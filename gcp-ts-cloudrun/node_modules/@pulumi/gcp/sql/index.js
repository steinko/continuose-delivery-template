"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./database"));
__export(require("./databaseInstance"));
__export(require("./getBackupRun"));
__export(require("./getCaCerts"));
__export(require("./getDatabaseInstance"));
__export(require("./sourceRepresentationInstance"));
__export(require("./sslCert"));
__export(require("./user"));
// Import resources to register:
const database_1 = require("./database");
const databaseInstance_1 = require("./databaseInstance");
const sourceRepresentationInstance_1 = require("./sourceRepresentationInstance");
const sslCert_1 = require("./sslCert");
const user_1 = require("./user");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:sql/database:Database":
                return new database_1.Database(name, undefined, { urn });
            case "gcp:sql/databaseInstance:DatabaseInstance":
                return new databaseInstance_1.DatabaseInstance(name, undefined, { urn });
            case "gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance":
                return new sourceRepresentationInstance_1.SourceRepresentationInstance(name, undefined, { urn });
            case "gcp:sql/sslCert:SslCert":
                return new sslCert_1.SslCert(name, undefined, { urn });
            case "gcp:sql/user:User":
                return new user_1.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "sql/database", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/databaseInstance", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/sourceRepresentationInstance", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/sslCert", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/user", _module);
//# sourceMappingURL=index.js.map