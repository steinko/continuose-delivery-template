"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a new Google SQL SSL Cert on a Google SQL Instance. For more information, see the [official documentation](https://cloud.google.com/sql/), or the [JSON API](https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/sslCerts).
 *
 * ## Example Usage
 *
 * Example creating a SQL Client Certificate.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 *
 * const dbNameSuffix = new random.RandomId("dbNameSuffix", {byteLength: 4});
 * const master = new gcp.sql.DatabaseInstance("master", {settings: {
 *     tier: "db-f1-micro",
 * }});
 * const clientCert = new gcp.sql.SslCert("clientCert", {
 *     commonName: "client-name",
 *     instance: master.name,
 * });
 * ```
 *
 * ## Import
 *
 * Since the contents of the certificate cannot be accessed after its creation, this resource cannot be imported.
 */
class SslCert extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["cert"] = state ? state.cert : undefined;
            inputs["certSerialNumber"] = state ? state.certSerialNumber : undefined;
            inputs["commonName"] = state ? state.commonName : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["expirationTime"] = state ? state.expirationTime : undefined;
            inputs["instance"] = state ? state.instance : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["serverCaCert"] = state ? state.serverCaCert : undefined;
            inputs["sha1Fingerprint"] = state ? state.sha1Fingerprint : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            inputs["commonName"] = args ? args.commonName : undefined;
            inputs["instance"] = args ? args.instance : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["cert"] = undefined /*out*/;
            inputs["certSerialNumber"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["expirationTime"] = undefined /*out*/;
            inputs["privateKey"] = undefined /*out*/;
            inputs["serverCaCert"] = undefined /*out*/;
            inputs["sha1Fingerprint"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SslCert.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SslCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SslCert(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SslCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslCert.__pulumiType;
    }
}
exports.SslCert = SslCert;
/** @internal */
SslCert.__pulumiType = 'gcp:sql/sslCert:SslCert';
//# sourceMappingURL=sslCert.js.map