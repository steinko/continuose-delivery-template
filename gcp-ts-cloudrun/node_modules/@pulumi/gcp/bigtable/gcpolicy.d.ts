import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Creates a Google Cloud Bigtable GC Policy inside a family. For more information see
 * [the official documentation](https://cloud.google.com/bigtable/) and
 * [API](https://cloud.google.com/bigtable/docs/go/reference).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.bigtable.Instance("instance", {clusters: [{
 *     clusterId: "tf-instance-cluster",
 *     numNodes: 3,
 *     storageType: "HDD",
 * }]});
 * const table = new gcp.bigtable.Table("table", {
 *     instanceName: instance.name,
 *     columnFamilies: [{
 *         family: "name",
 *     }],
 * });
 * const policy = new gcp.bigtable.GCPolicy("policy", {
 *     instanceName: instance.name,
 *     table: table.name,
 *     columnFamily: "name",
 *     maxAge: {
 *         duration: "168h",
 *     },
 * });
 * ```
 *
 * Multiple conditions is also supported. `UNION` when any of its sub-policies apply (OR). `INTERSECTION` when all its sub-policies apply (AND)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const policy = new gcp.bigtable.GCPolicy("policy", {
 *     instanceName: google_bigtable_instance.instance.name,
 *     table: google_bigtable_table.table.name,
 *     columnFamily: "name",
 *     mode: "UNION",
 *     maxAge: {
 *         duration: "168h",
 *     },
 *     maxVersions: [{
 *         number: 10,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support import.
 */
export declare class GCPolicy extends pulumi.CustomResource {
    /**
     * Get an existing GCPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GCPolicyState, opts?: pulumi.CustomResourceOptions): GCPolicy;
    /**
     * Returns true if the given object is an instance of GCPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GCPolicy;
    /**
     * The name of the column family.
     */
    readonly columnFamily: pulumi.Output<string>;
    /**
     * The name of the Bigtable instance.
     */
    readonly instanceName: pulumi.Output<string>;
    /**
     * GC policy that applies to all cells older than the given age.
     */
    readonly maxAge: pulumi.Output<outputs.bigtable.GCPolicyMaxAge | undefined>;
    /**
     * GC policy that applies to all versions of a cell except for the most recent.
     */
    readonly maxVersions: pulumi.Output<outputs.bigtable.GCPolicyMaxVersion[] | undefined>;
    /**
     * If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     */
    readonly mode: pulumi.Output<string | undefined>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The name of the table.
     */
    readonly table: pulumi.Output<string>;
    /**
     * Create a GCPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GCPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering GCPolicy resources.
 */
export interface GCPolicyState {
    /**
     * The name of the column family.
     */
    readonly columnFamily?: pulumi.Input<string>;
    /**
     * The name of the Bigtable instance.
     */
    readonly instanceName?: pulumi.Input<string>;
    /**
     * GC policy that applies to all cells older than the given age.
     */
    readonly maxAge?: pulumi.Input<inputs.bigtable.GCPolicyMaxAge>;
    /**
     * GC policy that applies to all versions of a cell except for the most recent.
     */
    readonly maxVersions?: pulumi.Input<pulumi.Input<inputs.bigtable.GCPolicyMaxVersion>[]>;
    /**
     * If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The name of the table.
     */
    readonly table?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a GCPolicy resource.
 */
export interface GCPolicyArgs {
    /**
     * The name of the column family.
     */
    readonly columnFamily: pulumi.Input<string>;
    /**
     * The name of the Bigtable instance.
     */
    readonly instanceName: pulumi.Input<string>;
    /**
     * GC policy that applies to all cells older than the given age.
     */
    readonly maxAge?: pulumi.Input<inputs.bigtable.GCPolicyMaxAge>;
    /**
     * GC policy that applies to all versions of a cell except for the most recent.
     */
    readonly maxVersions?: pulumi.Input<pulumi.Input<inputs.bigtable.GCPolicyMaxVersion>[]>;
    /**
     * If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The name of the table.
     */
    readonly table: pulumi.Input<string>;
}
