"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a set of DNS records within Google Cloud DNS. For more information see [the official documentation](https://cloud.google.com/dns/records/) and
 * [API](https://cloud.google.com/dns/api/v1/resourceRecordSets).
 *
 * > **Note:** The provider treats this resource as an authoritative record set. This means existing records (including
 * the default records) for the given type will be overwritten when you create this resource in the provider.
 * In addition, the Google Cloud DNS API requires NS records to be present at all times, so the provider
 * will not actually remove NS records during destroy but will report that it did.
 *
 * ## Example Usage
 * ### Binding a DNS name to the ephemeral IP of a new instance:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const frontendInstance = new gcp.compute.Instance("frontendInstance", {
 *     machineType: "g1-small",
 *     zone: "us-central1-b",
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-9",
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: "default",
 *         accessConfigs: [{}],
 *     }],
 * });
 * const prod = new gcp.dns.ManagedZone("prod", {dnsName: "prod.mydomain.com."});
 * const frontendRecordSet = new gcp.dns.RecordSet("frontendRecordSet", {
 *     name: pulumi.interpolate`frontend.${prod.dnsName}`,
 *     type: "A",
 *     ttl: 300,
 *     managedZone: prod.name,
 *     rrdatas: [frontendInstance.networkInterfaces.apply(networkInterfaces => networkInterfaces[0].accessConfigs?[0]?.natIp)],
 * });
 * ```
 * ### Adding an A record
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const prod = new gcp.dns.ManagedZone("prod", {dnsName: "prod.mydomain.com."});
 * const recordSet = new gcp.dns.RecordSet("recordSet", {
 *     name: pulumi.interpolate`backend.${prod.dnsName}`,
 *     managedZone: prod.name,
 *     type: "A",
 *     ttl: 300,
 *     rrdatas: ["8.8.8.8"],
 * });
 * ```
 * ### Adding an MX record
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const prod = new gcp.dns.ManagedZone("prod", {dnsName: "prod.mydomain.com."});
 * const mx = new gcp.dns.RecordSet("mx", {
 *     name: prod.dnsName,
 *     managedZone: prod.name,
 *     type: "MX",
 *     ttl: 3600,
 *     rrdatas: [
 *         "1 aspmx.l.google.com.",
 *         "5 alt1.aspmx.l.google.com.",
 *         "5 alt2.aspmx.l.google.com.",
 *         "10 alt3.aspmx.l.google.com.",
 *         "10 alt4.aspmx.l.google.com.",
 *     ],
 * });
 * ```
 * ### Adding an SPF record
 *
 * Quotes (`""`) must be added around your `rrdatas` for a SPF record. Otherwise `rrdatas` string gets split on spaces.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const prod = new gcp.dns.ManagedZone("prod", {dnsName: "prod.mydomain.com."});
 * const spf = new gcp.dns.RecordSet("spf", {
 *     name: pulumi.interpolate`frontend.${prod.dnsName}`,
 *     managedZone: prod.name,
 *     type: "TXT",
 *     ttl: 300,
 *     rrdatas: ["\"v=spf1 ip4:111.111.111.111 include:backoff.email-example.com -all\""],
 * });
 * ```
 * ### Adding a CNAME record
 *
 *  The list of `rrdatas` should only contain a single string corresponding to the Canonical Name intended.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const prod = new gcp.dns.ManagedZone("prod", {dnsName: "prod.mydomain.com."});
 * const cname = new gcp.dns.RecordSet("cname", {
 *     name: pulumi.interpolate`frontend.${prod.dnsName}`,
 *     managedZone: prod.name,
 *     type: "CNAME",
 *     ttl: 300,
 *     rrdatas: ["frontend.mydomain.com."],
 * });
 * ```
 *
 * ## Import
 *
 * DNS record sets can be imported using either of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{project}}/{{zone}}/{{name}}/{{type}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{zone}}/{{name}}/{{type}}
 * ```
 *
 *  NoteThe record name must include the trailing dot at the end.
 */
class RecordSet extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["managedZone"] = state ? state.managedZone : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["rrdatas"] = state ? state.rrdatas : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.managedZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedZone'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["managedZone"] = args ? args.managedZone : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["rrdatas"] = args ? args.rrdatas : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(RecordSet.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RecordSet(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecordSet.__pulumiType;
    }
}
exports.RecordSet = RecordSet;
/** @internal */
RecordSet.__pulumiType = 'gcp:dns/recordSet:RecordSet';
//# sourceMappingURL=recordSet.js.map