"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a machine learning solution.
 *
 * A model can have multiple versions, each of which is a deployed, trained model
 * ready to receive prediction requests. The model itself is just a container.
 *
 * ## Example Usage
 * ### Ml Model Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultEngineModel = new gcp.ml.EngineModel("default", {
 *     description: "My model",
 *     regions: "us-central1",
 * });
 * ```
 * ### Ml Model Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultEngineModel = new gcp.ml.EngineModel("default", {
 *     description: "My model",
 *     labels: {
 *         my_model: "foo",
 *     },
 *     onlinePredictionConsoleLogging: true,
 *     onlinePredictionLogging: true,
 *     regions: "us-central1",
 * });
 * ```
 *
 * ## Import
 *
 * Model can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:ml/engineModel:EngineModel default projects/{{project}}/models/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:ml/engineModel:EngineModel default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:ml/engineModel:EngineModel default {{name}}
 * ```
 */
class EngineModel extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["defaultVersion"] = state ? state.defaultVersion : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["onlinePredictionConsoleLogging"] = state ? state.onlinePredictionConsoleLogging : undefined;
            inputs["onlinePredictionLogging"] = state ? state.onlinePredictionLogging : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["regions"] = state ? state.regions : undefined;
        }
        else {
            const args = argsOrState;
            inputs["defaultVersion"] = args ? args.defaultVersion : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["onlinePredictionConsoleLogging"] = args ? args.onlinePredictionConsoleLogging : undefined;
            inputs["onlinePredictionLogging"] = args ? args.onlinePredictionLogging : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["regions"] = args ? args.regions : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(EngineModel.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing EngineModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EngineModel(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EngineModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EngineModel.__pulumiType;
    }
}
exports.EngineModel = EngineModel;
/** @internal */
EngineModel.__pulumiType = 'gcp:ml/engineModel:EngineModel';
//# sourceMappingURL=engineModel.js.map