"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Generates an IAM policy document that may be referenced by and applied to
 * other Google Cloud Platform IAM resources, such as the `gcp.projects.IAMPolicy` resource.
 *
 * **Note:** Please review the documentation of the resource that you will be using the datasource with. Some resources such as `gcp.projects.IAMPolicy` and others have limitations in their API methods which are noted on their respective page.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = pulumi.output(gcp.organizations.getIAMPolicy({
 *     auditConfigs: [{
 *         auditLogConfigs: [
 *             {
 *                 exemptedMembers: ["user:you@domain.com"],
 *                 logType: "DATA_READ",
 *             },
 *             {
 *                 logType: "DATA_WRITE",
 *             },
 *             {
 *                 logType: "ADMIN_READ",
 *             },
 *         ],
 *         service: "cloudkms.googleapis.com",
 *     }],
 *     bindings: [
 *         {
 *             members: ["serviceAccount:your-custom-sa@your-project.iam.gserviceaccount.com"],
 *             role: "roles/compute.instanceAdmin",
 *         },
 *         {
 *             members: ["user:alice@gmail.com"],
 *             role: "roles/storage.objectViewer",
 *         },
 *     ],
 * }, { async: true }));
 * ```
 *
 * This data source is used to define IAM policies to apply to other resources.
 * Currently, defining a policy through a datasource and referencing that policy
 * from another resource is the only way to apply an IAM policy to a resource.
 */
function getIAMPolicy(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("gcp:organizations/getIAMPolicy:getIAMPolicy", {
        "auditConfigs": args.auditConfigs,
        "bindings": args.bindings,
    }, opts);
}
exports.getIAMPolicy = getIAMPolicy;
//# sourceMappingURL=getIAMPolicy.js.map