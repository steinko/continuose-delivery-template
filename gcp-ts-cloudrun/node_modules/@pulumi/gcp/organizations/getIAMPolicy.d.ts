import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Generates an IAM policy document that may be referenced by and applied to
 * other Google Cloud Platform IAM resources, such as the `gcp.projects.IAMPolicy` resource.
 *
 * **Note:** Please review the documentation of the resource that you will be using the datasource with. Some resources such as `gcp.projects.IAMPolicy` and others have limitations in their API methods which are noted on their respective page.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = pulumi.output(gcp.organizations.getIAMPolicy({
 *     auditConfigs: [{
 *         auditLogConfigs: [
 *             {
 *                 exemptedMembers: ["user:you@domain.com"],
 *                 logType: "DATA_READ",
 *             },
 *             {
 *                 logType: "DATA_WRITE",
 *             },
 *             {
 *                 logType: "ADMIN_READ",
 *             },
 *         ],
 *         service: "cloudkms.googleapis.com",
 *     }],
 *     bindings: [
 *         {
 *             members: ["serviceAccount:your-custom-sa@your-project.iam.gserviceaccount.com"],
 *             role: "roles/compute.instanceAdmin",
 *         },
 *         {
 *             members: ["user:alice@gmail.com"],
 *             role: "roles/storage.objectViewer",
 *         },
 *     ],
 * }, { async: true }));
 * ```
 *
 * This data source is used to define IAM policies to apply to other resources.
 * Currently, defining a policy through a datasource and referencing that policy
 * from another resource is the only way to apply an IAM policy to a resource.
 */
export declare function getIAMPolicy(args?: GetIAMPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetIAMPolicyResult>;
/**
 * A collection of arguments for invoking getIAMPolicy.
 */
export interface GetIAMPolicyArgs {
    /**
     * A nested configuration block that defines logging additional configuration for your project. This field is only supported on `gcp.projects.IAMPolicy`, `gcp.folder.IAMPolicy` and `gcp.organizations.IAMPolicy`.
     */
    readonly auditConfigs?: inputs.organizations.GetIAMPolicyAuditConfig[];
    /**
     * A nested configuration block (described below)
     * defining a binding to be included in the policy document. Multiple
     * `binding` arguments are supported.
     */
    readonly bindings?: inputs.organizations.GetIAMPolicyBinding[];
}
/**
 * A collection of values returned by getIAMPolicy.
 */
export interface GetIAMPolicyResult {
    readonly auditConfigs?: outputs.organizations.GetIAMPolicyAuditConfig[];
    readonly bindings?: outputs.organizations.GetIAMPolicyBinding[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The above bindings serialized in a format suitable for
     * referencing from a resource that supports IAM.
     */
    readonly policyData: string;
}
