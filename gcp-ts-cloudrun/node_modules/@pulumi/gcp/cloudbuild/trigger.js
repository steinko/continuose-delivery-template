"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Configuration for an automated build in response to source repository changes.
 *
 * To get more information about Trigger, see:
 *
 * * [API documentation](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.triggers)
 * * How-to Guides
 *     * [Automating builds using build triggers](https://cloud.google.com/cloud-build/docs/running-builds/automate-builds)
 *
 * > **Note:** You can retrieve the email of the Cloud Build Service Account used in jobs by using the `gcp.projects.ServiceIdentity` resource.
 *
 * ## Example Usage
 * ### Cloudbuild Trigger Filename
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const filename_trigger = new gcp.cloudbuild.Trigger("filename-trigger", {
 *     filename: "cloudbuild.yaml",
 *     substitutions: {
 *         _BAZ: "qux",
 *         _FOO: "bar",
 *     },
 *     triggerTemplate: {
 *         branchName: "master",
 *         repoName: "my-repo",
 *     },
 * });
 * ```
 * ### Cloudbuild Trigger Build
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const build_trigger = new gcp.cloudbuild.Trigger("build-trigger", {
 *     build: {
 *         artifacts: {
 *             images: ["gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA"],
 *             objects: {
 *                 location: "gs://bucket/path/to/somewhere/",
 *                 paths: ["path"],
 *             },
 *         },
 *         logsBucket: "gs://mybucket/logs",
 *         options: {
 *             diskSizeGb: 100,
 *             dynamicSubstitutions: true,
 *             envs: ["ekey = evalue"],
 *             logStreamingOption: "STREAM_OFF",
 *             logging: "LEGACY",
 *             machineType: "N1_HIGHCPU_8",
 *             requestedVerifyOption: "VERIFIED",
 *             secretEnvs: ["secretenv = svalue"],
 *             sourceProvenanceHashes: ["MD5"],
 *             substitutionOption: "ALLOW_LOOSE",
 *             volumes: [{
 *                 name: "v1",
 *                 path: "v1",
 *             }],
 *             workerPool: "pool",
 *         },
 *         queueTtl: "20s",
 *         secrets: [{
 *             kmsKeyName: "projects/myProject/locations/global/keyRings/keyring-name/cryptoKeys/key-name",
 *             secretEnv: {
 *                 PASSWORD: "ZW5jcnlwdGVkLXBhc3N3b3JkCg==",
 *             },
 *         }],
 *         source: {
 *             storageSource: {
 *                 bucket: "mybucket",
 *                 object: "source_code.tar.gz",
 *             },
 *         },
 *         steps: [{
 *             args: [
 *                 "cp",
 *                 "gs://mybucket/remotefile.zip",
 *                 "localfile.zip",
 *             ],
 *             name: "gcr.io/cloud-builders/gsutil",
 *             timeout: "120s",
 *         }],
 *         substitutions: {
 *             _BAZ: "qux",
 *             _FOO: "bar",
 *         },
 *         tags: [
 *             "build",
 *             "newFeature",
 *         ],
 *     },
 *     triggerTemplate: {
 *         branchName: "master",
 *         repoName: "my-repo",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Trigger can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/trigger:Trigger default projects/{{project}}/triggers/{{trigger_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/trigger:Trigger default {{project}}/{{trigger_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/trigger:Trigger default {{trigger_id}}
 * ```
 */
class Trigger extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["build"] = state ? state.build : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["filename"] = state ? state.filename : undefined;
            inputs["github"] = state ? state.github : undefined;
            inputs["ignoredFiles"] = state ? state.ignoredFiles : undefined;
            inputs["includedFiles"] = state ? state.includedFiles : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["substitutions"] = state ? state.substitutions : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["triggerId"] = state ? state.triggerId : undefined;
            inputs["triggerTemplate"] = state ? state.triggerTemplate : undefined;
        }
        else {
            const args = argsOrState;
            inputs["build"] = args ? args.build : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["filename"] = args ? args.filename : undefined;
            inputs["github"] = args ? args.github : undefined;
            inputs["ignoredFiles"] = args ? args.ignoredFiles : undefined;
            inputs["includedFiles"] = args ? args.includedFiles : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["substitutions"] = args ? args.substitutions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["triggerTemplate"] = args ? args.triggerTemplate : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["triggerId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Trigger.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Trigger(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }
}
exports.Trigger = Trigger;
/** @internal */
Trigger.__pulumiType = 'gcp:cloudbuild/trigger:Trigger';
//# sourceMappingURL=trigger.js.map