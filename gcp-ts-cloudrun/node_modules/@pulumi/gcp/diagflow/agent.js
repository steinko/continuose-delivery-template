"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Dialogflow agent is a virtual agent that handles conversations with your end-users. It is a natural language
 * understanding module that understands the nuances of human language. Dialogflow translates end-user text or audio
 * during a conversation to structured data that your apps and services can understand. You design and build a Dialogflow
 * agent to handle the types of conversations required for your system.
 *
 * To get more information about Agent, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/docs/reference/rest/v2/projects/agent)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/docs/)
 *
 * ## Example Usage
 * ### Dialogflow Agent Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const fullAgent = new gcp.diagflow.Agent("full_agent", {
 *     apiVersion: "API_VERSION_V2_BETA_1",
 *     avatarUri: "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     classificationThreshold: 0.3,
 *     defaultLanguageCode: "en",
 *     description: "Example description.",
 *     displayName: "dialogflow-agent",
 *     enableLogging: true,
 *     matchMode: "MATCH_MODE_ML_ONLY",
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     tier: "TIER_STANDARD",
 *     timeZone: "America/New_York",
 * });
 * ```
 *
 * ## Import
 *
 * Agent can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/agent:Agent default {{project}}
 * ```
 */
class Agent extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiVersion"] = state ? state.apiVersion : undefined;
            inputs["avatarUri"] = state ? state.avatarUri : undefined;
            inputs["avatarUriBackend"] = state ? state.avatarUriBackend : undefined;
            inputs["classificationThreshold"] = state ? state.classificationThreshold : undefined;
            inputs["defaultLanguageCode"] = state ? state.defaultLanguageCode : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["enableLogging"] = state ? state.enableLogging : undefined;
            inputs["matchMode"] = state ? state.matchMode : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["supportedLanguageCodes"] = state ? state.supportedLanguageCodes : undefined;
            inputs["tier"] = state ? state.tier : undefined;
            inputs["timeZone"] = state ? state.timeZone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultLanguageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultLanguageCode'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            inputs["apiVersion"] = args ? args.apiVersion : undefined;
            inputs["avatarUri"] = args ? args.avatarUri : undefined;
            inputs["classificationThreshold"] = args ? args.classificationThreshold : undefined;
            inputs["defaultLanguageCode"] = args ? args.defaultLanguageCode : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["enableLogging"] = args ? args.enableLogging : undefined;
            inputs["matchMode"] = args ? args.matchMode : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["supportedLanguageCodes"] = args ? args.supportedLanguageCodes : undefined;
            inputs["tier"] = args ? args.tier : undefined;
            inputs["timeZone"] = args ? args.timeZone : undefined;
            inputs["avatarUriBackend"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Agent.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Agent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Agent(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Agent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Agent.__pulumiType;
    }
}
exports.Agent = Agent;
/** @internal */
Agent.__pulumiType = 'gcp:diagflow/agent:Agent';
//# sourceMappingURL=agent.js.map