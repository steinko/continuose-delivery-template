"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a new Transfer Job in Google Cloud Storage Transfer.
 *
 * To get more information about Google Cloud Storage Transfer, see:
 *
 * * [Overview](https://cloud.google.com/storage-transfer/docs/overview)
 * * [API documentation](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs#TransferJob)
 * * How-to Guides
 *     * [Configuring Access to Data Sources and Sinks](https://cloud.google.com/storage-transfer/docs/configure-access)
 *
 * ## Example Usage
 *
 * Example creating a nightly Transfer Job from an AWS S3 Bucket to a GCS bucket.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.storage.getTransferProjectServieAccount({
 *     project: _var.project,
 * });
 * const s3_backup_bucketBucket = new gcp.storage.Bucket("s3-backup-bucketBucket", {
 *     storageClass: "NEARLINE",
 *     project: _var.project,
 * });
 * const s3_backup_bucketBucketIAMMember = new gcp.storage.BucketIAMMember("s3-backup-bucketBucketIAMMember", {
 *     bucket: s3_backup_bucketBucket.name,
 *     role: "roles/storage.admin",
 *     member: _default.then(_default => `serviceAccount:${_default.email}`),
 * }, {
 *     dependsOn: [s3_backup_bucketBucket],
 * });
 * const s3_bucket_nightly_backup = new gcp.storage.TransferJob("s3-bucket-nightly-backup", {
 *     description: "Nightly backup of S3 bucket",
 *     project: _var.project,
 *     transferSpec: {
 *         objectConditions: {
 *             maxTimeElapsedSinceLastModification: "600s",
 *             excludePrefixes: ["requests.gz"],
 *         },
 *         transferOptions: {
 *             deleteObjectsUniqueInSink: false,
 *         },
 *         awsS3DataSource: {
 *             bucketName: _var.aws_s3_bucket,
 *             awsAccessKey: {
 *                 accessKeyId: _var.aws_access_key,
 *                 secretAccessKey: _var.aws_secret_key,
 *             },
 *         },
 *         gcsDataSink: {
 *             bucketName: s3_backup_bucketBucket.name,
 *         },
 *     },
 *     schedule: {
 *         scheduleStartDate: {
 *             year: 2018,
 *             month: 10,
 *             day: 1,
 *         },
 *         scheduleEndDate: {
 *             year: 2019,
 *             month: 1,
 *             day: 15,
 *         },
 *         startTimeOfDay: {
 *             hours: 23,
 *             minutes: 30,
 *             seconds: 0,
 *             nanos: 0,
 *         },
 *     },
 * }, {
 *     dependsOn: [s3_backup_bucketBucketIAMMember],
 * });
 * ```
 *
 * ## Import
 *
 * Storage buckets can be imported using the Transfer Job's `project` and `name` without the `transferJob/` prefix, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:storage/transferJob:TransferJob nightly-backup-transfer-job my-project-1asd32/8422144862922355674
 * ```
 */
class TransferJob extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["creationTime"] = state ? state.creationTime : undefined;
            inputs["deletionTime"] = state ? state.deletionTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["lastModificationTime"] = state ? state.lastModificationTime : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["transferSpec"] = state ? state.transferSpec : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.transferSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transferSpec'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["transferSpec"] = args ? args.transferSpec : undefined;
            inputs["creationTime"] = undefined /*out*/;
            inputs["deletionTime"] = undefined /*out*/;
            inputs["lastModificationTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TransferJob.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TransferJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TransferJob(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TransferJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransferJob.__pulumiType;
    }
}
exports.TransferJob = TransferJob;
/** @internal */
TransferJob.__pulumiType = 'gcp:storage/transferJob:TransferJob';
//# sourceMappingURL=transferJob.js.map