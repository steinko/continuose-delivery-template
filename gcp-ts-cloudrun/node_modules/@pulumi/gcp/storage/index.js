"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./bucket"));
__export(require("./bucketACL"));
__export(require("./bucketAccessControl"));
__export(require("./bucketIAMBinding"));
__export(require("./bucketIAMMember"));
__export(require("./bucketIAMPolicy"));
__export(require("./bucketObject"));
__export(require("./defaultObjectACL"));
__export(require("./defaultObjectAccessControl"));
__export(require("./getBucketObject"));
__export(require("./getBucketObjectContent"));
__export(require("./getObjectSignedUrl"));
__export(require("./getProjectServiceAccount"));
__export(require("./getTransferProjectServieAccount"));
__export(require("./hmacKey"));
__export(require("./notification"));
__export(require("./objectACL"));
__export(require("./objectAccessControl"));
__export(require("./transferJob"));
__export(require("./zMixins"));
// Import resources to register:
const bucket_1 = require("./bucket");
const bucketACL_1 = require("./bucketACL");
const bucketAccessControl_1 = require("./bucketAccessControl");
const bucketIAMBinding_1 = require("./bucketIAMBinding");
const bucketIAMMember_1 = require("./bucketIAMMember");
const bucketIAMPolicy_1 = require("./bucketIAMPolicy");
const bucketObject_1 = require("./bucketObject");
const defaultObjectACL_1 = require("./defaultObjectACL");
const defaultObjectAccessControl_1 = require("./defaultObjectAccessControl");
const hmacKey_1 = require("./hmacKey");
const notification_1 = require("./notification");
const objectACL_1 = require("./objectACL");
const objectAccessControl_1 = require("./objectAccessControl");
const transferJob_1 = require("./transferJob");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:storage/bucket:Bucket":
                return new bucket_1.Bucket(name, undefined, { urn });
            case "gcp:storage/bucketACL:BucketACL":
                return new bucketACL_1.BucketACL(name, undefined, { urn });
            case "gcp:storage/bucketAccessControl:BucketAccessControl":
                return new bucketAccessControl_1.BucketAccessControl(name, undefined, { urn });
            case "gcp:storage/bucketIAMBinding:BucketIAMBinding":
                return new bucketIAMBinding_1.BucketIAMBinding(name, undefined, { urn });
            case "gcp:storage/bucketIAMMember:BucketIAMMember":
                return new bucketIAMMember_1.BucketIAMMember(name, undefined, { urn });
            case "gcp:storage/bucketIAMPolicy:BucketIAMPolicy":
                return new bucketIAMPolicy_1.BucketIAMPolicy(name, undefined, { urn });
            case "gcp:storage/bucketObject:BucketObject":
                return new bucketObject_1.BucketObject(name, undefined, { urn });
            case "gcp:storage/defaultObjectACL:DefaultObjectACL":
                return new defaultObjectACL_1.DefaultObjectACL(name, undefined, { urn });
            case "gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl":
                return new defaultObjectAccessControl_1.DefaultObjectAccessControl(name, undefined, { urn });
            case "gcp:storage/hmacKey:HmacKey":
                return new hmacKey_1.HmacKey(name, undefined, { urn });
            case "gcp:storage/notification:Notification":
                return new notification_1.Notification(name, undefined, { urn });
            case "gcp:storage/objectACL:ObjectACL":
                return new objectACL_1.ObjectACL(name, undefined, { urn });
            case "gcp:storage/objectAccessControl:ObjectAccessControl":
                return new objectAccessControl_1.ObjectAccessControl(name, undefined, { urn });
            case "gcp:storage/transferJob:TransferJob":
                return new transferJob_1.TransferJob(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "storage/bucket", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/bucketACL", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/bucketAccessControl", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/bucketIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/bucketIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/bucketIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/bucketObject", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/defaultObjectACL", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/defaultObjectAccessControl", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/hmacKey", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/notification", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/objectACL", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/objectAccessControl", _module);
pulumi.runtime.registerResourceModule("gcp", "storage/transferJob", _module);
//# sourceMappingURL=index.js.map