import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Creates a new Transfer Job in Google Cloud Storage Transfer.
 *
 * To get more information about Google Cloud Storage Transfer, see:
 *
 * * [Overview](https://cloud.google.com/storage-transfer/docs/overview)
 * * [API documentation](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs#TransferJob)
 * * How-to Guides
 *     * [Configuring Access to Data Sources and Sinks](https://cloud.google.com/storage-transfer/docs/configure-access)
 *
 * ## Example Usage
 *
 * Example creating a nightly Transfer Job from an AWS S3 Bucket to a GCS bucket.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.storage.getTransferProjectServieAccount({
 *     project: _var.project,
 * });
 * const s3_backup_bucketBucket = new gcp.storage.Bucket("s3-backup-bucketBucket", {
 *     storageClass: "NEARLINE",
 *     project: _var.project,
 * });
 * const s3_backup_bucketBucketIAMMember = new gcp.storage.BucketIAMMember("s3-backup-bucketBucketIAMMember", {
 *     bucket: s3_backup_bucketBucket.name,
 *     role: "roles/storage.admin",
 *     member: _default.then(_default => `serviceAccount:${_default.email}`),
 * }, {
 *     dependsOn: [s3_backup_bucketBucket],
 * });
 * const s3_bucket_nightly_backup = new gcp.storage.TransferJob("s3-bucket-nightly-backup", {
 *     description: "Nightly backup of S3 bucket",
 *     project: _var.project,
 *     transferSpec: {
 *         objectConditions: {
 *             maxTimeElapsedSinceLastModification: "600s",
 *             excludePrefixes: ["requests.gz"],
 *         },
 *         transferOptions: {
 *             deleteObjectsUniqueInSink: false,
 *         },
 *         awsS3DataSource: {
 *             bucketName: _var.aws_s3_bucket,
 *             awsAccessKey: {
 *                 accessKeyId: _var.aws_access_key,
 *                 secretAccessKey: _var.aws_secret_key,
 *             },
 *         },
 *         gcsDataSink: {
 *             bucketName: s3_backup_bucketBucket.name,
 *         },
 *     },
 *     schedule: {
 *         scheduleStartDate: {
 *             year: 2018,
 *             month: 10,
 *             day: 1,
 *         },
 *         scheduleEndDate: {
 *             year: 2019,
 *             month: 1,
 *             day: 15,
 *         },
 *         startTimeOfDay: {
 *             hours: 23,
 *             minutes: 30,
 *             seconds: 0,
 *             nanos: 0,
 *         },
 *     },
 * }, {
 *     dependsOn: [s3_backup_bucketBucketIAMMember],
 * });
 * ```
 *
 * ## Import
 *
 * Storage buckets can be imported using the Transfer Job's `project` and `name` without the `transferJob/` prefix, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:storage/transferJob:TransferJob nightly-backup-transfer-job my-project-1asd32/8422144862922355674
 * ```
 */
export declare class TransferJob extends pulumi.CustomResource {
    /**
     * Get an existing TransferJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransferJobState, opts?: pulumi.CustomResourceOptions): TransferJob;
    /**
     * Returns true if the given object is an instance of TransferJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TransferJob;
    /**
     * When the Transfer Job was created.
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * When the Transfer Job was deleted.
     */
    readonly deletionTime: pulumi.Output<string>;
    /**
     * Unique description to identify the Transfer Job.
     */
    readonly description: pulumi.Output<string>;
    /**
     * When the Transfer Job was last modified.
     */
    readonly lastModificationTime: pulumi.Output<string>;
    /**
     * The name of the Transfer Job.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below.
     */
    readonly schedule: pulumi.Output<outputs.storage.TransferJobSchedule>;
    /**
     * Status of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
     */
    readonly status: pulumi.Output<string | undefined>;
    /**
     * Transfer specification. Structure documented below.
     */
    readonly transferSpec: pulumi.Output<outputs.storage.TransferJobTransferSpec>;
    /**
     * Create a TransferJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransferJobArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering TransferJob resources.
 */
export interface TransferJobState {
    /**
     * When the Transfer Job was created.
     */
    readonly creationTime?: pulumi.Input<string>;
    /**
     * When the Transfer Job was deleted.
     */
    readonly deletionTime?: pulumi.Input<string>;
    /**
     * Unique description to identify the Transfer Job.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * When the Transfer Job was last modified.
     */
    readonly lastModificationTime?: pulumi.Input<string>;
    /**
     * The name of the Transfer Job.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below.
     */
    readonly schedule?: pulumi.Input<inputs.storage.TransferJobSchedule>;
    /**
     * Status of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Transfer specification. Structure documented below.
     */
    readonly transferSpec?: pulumi.Input<inputs.storage.TransferJobTransferSpec>;
}
/**
 * The set of arguments for constructing a TransferJob resource.
 */
export interface TransferJobArgs {
    /**
     * Unique description to identify the Transfer Job.
     */
    readonly description: pulumi.Input<string>;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below.
     */
    readonly schedule: pulumi.Input<inputs.storage.TransferJobSchedule>;
    /**
     * Status of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
     */
    readonly status?: pulumi.Input<string>;
    /**
     * Transfer specification. Structure documented below.
     */
    readonly transferSpec: pulumi.Input<inputs.storage.TransferJobTransferSpec>;
}
