"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./attestor"));
__export(require("./attestorIamBinding"));
__export(require("./attestorIamMember"));
__export(require("./attestorIamPolicy"));
__export(require("./policy"));
// Import resources to register:
const attestor_1 = require("./attestor");
const attestorIamBinding_1 = require("./attestorIamBinding");
const attestorIamMember_1 = require("./attestorIamMember");
const attestorIamPolicy_1 = require("./attestorIamPolicy");
const policy_1 = require("./policy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:binaryauthorization/attestor:Attestor":
                return new attestor_1.Attestor(name, undefined, { urn });
            case "gcp:binaryauthorization/attestorIamBinding:AttestorIamBinding":
                return new attestorIamBinding_1.AttestorIamBinding(name, undefined, { urn });
            case "gcp:binaryauthorization/attestorIamMember:AttestorIamMember":
                return new attestorIamMember_1.AttestorIamMember(name, undefined, { urn });
            case "gcp:binaryauthorization/attestorIamPolicy:AttestorIamPolicy":
                return new attestorIamPolicy_1.AttestorIamPolicy(name, undefined, { urn });
            case "gcp:binaryauthorization/policy:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestor", _module);
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestorIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestorIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/attestorIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "binaryauthorization/policy", _module);
//# sourceMappingURL=index.js.map