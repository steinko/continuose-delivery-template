"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A policy for container image binary authorization.
 *
 * To get more information about Policy, see:
 *
 * * [API documentation](https://cloud.google.com/binary-authorization/docs/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/binary-authorization/)
 *
 * ## Example Usage
 * ### Binary Authorization Policy Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const note = new gcp.containeranalysis.Note("note", {attestationAuthority: {
 *     hint: {
 *         humanReadableName: "My attestor",
 *     },
 * }});
 * const attestor = new gcp.binaryauthorization.Attestor("attestor", {attestationAuthorityNote: {
 *     noteReference: note.name,
 * }});
 * const policy = new gcp.binaryauthorization.Policy("policy", {
 *     admissionWhitelistPatterns: [{
 *         namePattern: "gcr.io/google_containers/*",
 *     }],
 *     defaultAdmissionRule: {
 *         evaluationMode: "ALWAYS_ALLOW",
 *         enforcementMode: "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *     },
 *     clusterAdmissionRules: [{
 *         cluster: "us-central1-a.prod-cluster",
 *         evaluationMode: "REQUIRE_ATTESTATION",
 *         enforcementMode: "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *         requireAttestationsBies: [attestor.name],
 *     }],
 * });
 * ```
 * ### Binary Authorization Policy Global Evaluation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const note = new gcp.containeranalysis.Note("note", {attestationAuthority: {
 *     hint: {
 *         humanReadableName: "My attestor",
 *     },
 * }});
 * const attestor = new gcp.binaryauthorization.Attestor("attestor", {attestationAuthorityNote: {
 *     noteReference: note.name,
 * }});
 * const policy = new gcp.binaryauthorization.Policy("policy", {
 *     defaultAdmissionRule: {
 *         evaluationMode: "REQUIRE_ATTESTATION",
 *         enforcementMode: "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *         requireAttestationsBies: [attestor.name],
 *     },
 *     globalPolicyEvaluationMode: "ENABLE",
 * });
 * ```
 *
 * ## Import
 *
 * Policy can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:binaryauthorization/policy:Policy default projects/{{project}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:binaryauthorization/policy:Policy default {{project}}
 * ```
 */
class Policy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["admissionWhitelistPatterns"] = state ? state.admissionWhitelistPatterns : undefined;
            inputs["clusterAdmissionRules"] = state ? state.clusterAdmissionRules : undefined;
            inputs["defaultAdmissionRule"] = state ? state.defaultAdmissionRule : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["globalPolicyEvaluationMode"] = state ? state.globalPolicyEvaluationMode : undefined;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultAdmissionRule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAdmissionRule'");
            }
            inputs["admissionWhitelistPatterns"] = args ? args.admissionWhitelistPatterns : undefined;
            inputs["clusterAdmissionRules"] = args ? args.clusterAdmissionRules : undefined;
            inputs["defaultAdmissionRule"] = args ? args.defaultAdmissionRule : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["globalPolicyEvaluationMode"] = args ? args.globalPolicyEvaluationMode : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Policy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Policy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }
}
exports.Policy = Policy;
/** @internal */
Policy.__pulumiType = 'gcp:binaryauthorization/policy:Policy';
//# sourceMappingURL=policy.js.map