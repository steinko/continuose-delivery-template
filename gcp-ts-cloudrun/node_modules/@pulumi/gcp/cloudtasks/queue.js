"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A named resource to which messages are sent by publishers.
 *
 * > **Warning:** This resource requires an App Engine application to be created on the
 * project you're provisioning it on. If you haven't already enabled it, you
 * can create a `gcp.appengine.Application` resource to do so. This
 * resource's location will be the same as the App Engine location specified.
 *
 * ## Example Usage
 * ### Queue Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultQueue = new gcp.cloudtasks.Queue("default", {
 *     location: "us-central1",
 * });
 * ```
 * ### Cloud Tasks Queue Advanced
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const advancedConfiguration = new gcp.cloudtasks.Queue("advanced_configuration", {
 *     appEngineRoutingOverride: {
 *         instance: "test",
 *         service: "worker",
 *         version: "1.0",
 *     },
 *     location: "us-central1",
 *     rateLimits: {
 *         maxConcurrentDispatches: 3,
 *         maxDispatchesPerSecond: 2,
 *     },
 *     retryConfig: {
 *         maxAttempts: 5,
 *         maxBackoff: "3s",
 *         maxDoublings: 1,
 *         maxRetryDuration: "4s",
 *         minBackoff: "2s",
 *     },
 *     stackdriverLoggingConfig: {
 *         samplingRatio: 0.9,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Queue can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudtasks/queue:Queue default projects/{{project}}/locations/{{location}}/queues/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudtasks/queue:Queue default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudtasks/queue:Queue default {{location}}/{{name}}
 * ```
 */
class Queue extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["appEngineRoutingOverride"] = state ? state.appEngineRoutingOverride : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["rateLimits"] = state ? state.rateLimits : undefined;
            inputs["retryConfig"] = state ? state.retryConfig : undefined;
            inputs["stackdriverLoggingConfig"] = state ? state.stackdriverLoggingConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            inputs["appEngineRoutingOverride"] = args ? args.appEngineRoutingOverride : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["rateLimits"] = args ? args.rateLimits : undefined;
            inputs["retryConfig"] = args ? args.retryConfig : undefined;
            inputs["stackdriverLoggingConfig"] = args ? args.stackdriverLoggingConfig : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Queue.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Queue(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Queue.__pulumiType;
    }
}
exports.Queue = Queue;
/** @internal */
Queue.__pulumiType = 'gcp:cloudtasks/queue:Queue';
//# sourceMappingURL=queue.js.map