"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Container Analysis note is a high-level piece of metadata that
 * describes a type of analysis that can be done for a resource.
 *
 * To get more information about Note, see:
 *
 * * [API documentation](https://cloud.google.com/container-analysis/api/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/container-analysis/)
 *     * [Creating Attestations (Occurrences)](https://cloud.google.com/binary-authorization/docs/making-attestations)
 *
 * ## Example Usage
 * ### Container Analysis Note Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const note = new gcp.containeranalysis.Note("note", {
 *     attestationAuthority: {
 *         hint: {
 *             humanReadableName: "Attestor Note",
 *         },
 *     },
 * });
 * ```
 * ### Container Analysis Note Attestation Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const note = new gcp.containeranalysis.Note("note", {
 *     attestationAuthority: {
 *         hint: {
 *             humanReadableName: "Attestor Note",
 *         },
 *     },
 *     expirationTime: "2120-10-02T15:01:23.045123456Z",
 *     longDescription: "a longer description of test note",
 *     relatedUrls: [
 *         {
 *             label: "foo",
 *             url: "some.url",
 *         },
 *         {
 *             url: "google.com",
 *         },
 *     ],
 *     shortDescription: "test note",
 * });
 * ```
 *
 * ## Import
 *
 * Note can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/note:Note default projects/{{project}}/notes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/note:Note default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/note:Note default {{name}}
 * ```
 */
class Note extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["attestationAuthority"] = state ? state.attestationAuthority : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["expirationTime"] = state ? state.expirationTime : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["longDescription"] = state ? state.longDescription : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["relatedNoteNames"] = state ? state.relatedNoteNames : undefined;
            inputs["relatedUrls"] = state ? state.relatedUrls : undefined;
            inputs["shortDescription"] = state ? state.shortDescription : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.attestationAuthority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attestationAuthority'");
            }
            inputs["attestationAuthority"] = args ? args.attestationAuthority : undefined;
            inputs["expirationTime"] = args ? args.expirationTime : undefined;
            inputs["longDescription"] = args ? args.longDescription : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["relatedNoteNames"] = args ? args.relatedNoteNames : undefined;
            inputs["relatedUrls"] = args ? args.relatedUrls : undefined;
            inputs["shortDescription"] = args ? args.shortDescription : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Note.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Note resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Note(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Note.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Note.__pulumiType;
    }
}
exports.Note = Note;
/** @internal */
Note.__pulumiType = 'gcp:containeranalysis/note:Note';
//# sourceMappingURL=note.js.map