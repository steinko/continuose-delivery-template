import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * An occurrence is an instance of a Note, or type of analysis that
 * can be done for a resource.
 *
 * To get more information about Occurrence, see:
 *
 * * [API documentation](https://cloud.google.com/container-analysis/api/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/container-analysis/)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Occurrence can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default projects/{{project}}/occurrences/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{name}}
 * ```
 */
export declare class Occurence extends pulumi.CustomResource {
    /**
     * Get an existing Occurence resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OccurenceState, opts?: pulumi.CustomResourceOptions): Occurence;
    /**
     * Returns true if the given object is an instance of Occurence.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Occurence;
    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     */
    readonly attestation: pulumi.Output<outputs.containeranalysis.OccurenceAttestation>;
    /**
     * The time when the repository was created.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * The name of the occurrence.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     */
    readonly noteName: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    readonly remediation: pulumi.Output<string | undefined>;
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    readonly resourceUri: pulumi.Output<string>;
    /**
     * The time when the repository was last updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a Occurence resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OccurenceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Occurence resources.
 */
export interface OccurenceState {
    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     */
    readonly attestation?: pulumi.Input<inputs.containeranalysis.OccurenceAttestation>;
    /**
     * The time when the repository was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * The name of the occurrence.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     */
    readonly noteName?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    readonly remediation?: pulumi.Input<string>;
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    readonly resourceUri?: pulumi.Input<string>;
    /**
     * The time when the repository was last updated.
     */
    readonly updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Occurence resource.
 */
export interface OccurenceArgs {
    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     */
    readonly attestation: pulumi.Input<inputs.containeranalysis.OccurenceAttestation>;
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     */
    readonly noteName: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    readonly remediation?: pulumi.Input<string>;
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    readonly resourceUri: pulumi.Input<string>;
}
