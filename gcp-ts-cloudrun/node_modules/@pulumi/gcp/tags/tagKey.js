"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A TagKey, used to group a set of TagValues.
 *
 * To get more information about TagKey, see:
 *
 * * [API documentation](https://cloud.google.com/resource-manager/reference/rest/v3/tagKeys)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing)
 *
 * ## Example Usage
 * ### Tag Key Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const key = new gcp.tags.TagKey("key", {
 *     description: "For keyname resources.",
 *     parent: "organizations/123456789",
 *     shortName: "keyname",
 * });
 * ```
 *
 * ## Import
 *
 * TagKey can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:tags/tagKey:TagKey default tagKeys/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:tags/tagKey:TagKey default {{name}}
 * ```
 */
class TagKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespacedName"] = state ? state.namespacedName : undefined;
            inputs["parent"] = state ? state.parent : undefined;
            inputs["shortName"] = state ? state.shortName : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.shortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortName'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["shortName"] = args ? args.shortName : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["namespacedName"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TagKey.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TagKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TagKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TagKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TagKey.__pulumiType;
    }
}
exports.TagKey = TagKey;
/** @internal */
TagKey.__pulumiType = 'gcp:tags/tagKey:TagKey';
//# sourceMappingURL=tagKey.js.map