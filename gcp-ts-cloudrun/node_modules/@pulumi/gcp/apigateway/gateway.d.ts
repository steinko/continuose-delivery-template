import * as pulumi from "@pulumi/pulumi";
/**
 * A consumable API that can be used by multiple Gateways.
 *
 * To get more information about Gateway, see:
 *
 * * [API documentation](https://cloud.google.com/api-gateway/docs/reference/rest/v1beta/projects.locations.apis)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/api-gateway/docs/quickstart)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Gateway can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default projects/{{project}}/locations/{{region}}/gateways/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default {{name}}
 * ```
 */
export declare class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway;
    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Gateway;
    /**
     * Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
     */
    readonly apiConfig: pulumi.Output<string>;
    /**
     * The default API Gateway host name of the form {gatewayId}-{hash}.{region_code}.gateway.dev.
     */
    readonly defaultHostname: pulumi.Output<string>;
    /**
     * A user-visible name for the API.
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * Identifier to assign to the Gateway. Must be unique within scope of the parent resource(project).
     */
    readonly gatewayId: pulumi.Output<string>;
    /**
     * Resource labels to represent user-provided metadata.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Resource name of the Gateway. Format: projects/{project}/locations/{region}/gateways/{gateway}
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The region of the gateway for the API.
     */
    readonly region: pulumi.Output<string>;
    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    /**
     * Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
     */
    readonly apiConfig?: pulumi.Input<string>;
    /**
     * The default API Gateway host name of the form {gatewayId}-{hash}.{region_code}.gateway.dev.
     */
    readonly defaultHostname?: pulumi.Input<string>;
    /**
     * A user-visible name for the API.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Identifier to assign to the Gateway. Must be unique within scope of the parent resource(project).
     */
    readonly gatewayId?: pulumi.Input<string>;
    /**
     * Resource labels to represent user-provided metadata.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Resource name of the Gateway. Format: projects/{project}/locations/{region}/gateways/{gateway}
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The region of the gateway for the API.
     */
    readonly region?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
     */
    readonly apiConfig: pulumi.Input<string>;
    /**
     * A user-visible name for the API.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Identifier to assign to the Gateway. Must be unique within scope of the parent resource(project).
     */
    readonly gatewayId: pulumi.Input<string>;
    /**
     * Resource labels to represent user-provided metadata.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * The region of the gateway for the API.
     */
    readonly region?: pulumi.Input<string>;
}
