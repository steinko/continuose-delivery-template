"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A consumable API that can be used by multiple Gateways.
 *
 * To get more information about Gateway, see:
 *
 * * [API documentation](https://cloud.google.com/api-gateway/docs/reference/rest/v1beta/projects.locations.apis)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/api-gateway/docs/quickstart)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Gateway can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default projects/{{project}}/locations/{{region}}/gateways/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/gateway:Gateway default {{name}}
 * ```
 */
class Gateway extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiConfig"] = state ? state.apiConfig : undefined;
            inputs["defaultHostname"] = state ? state.defaultHostname : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["gatewayId"] = state ? state.gatewayId : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiConfig'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            inputs["apiConfig"] = args ? args.apiConfig : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["gatewayId"] = args ? args.gatewayId : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["defaultHostname"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Gateway.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Gateway(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }
}
exports.Gateway = Gateway;
/** @internal */
Gateway.__pulumiType = 'gcp:apigateway/gateway:Gateway';
//# sourceMappingURL=gateway.js.map