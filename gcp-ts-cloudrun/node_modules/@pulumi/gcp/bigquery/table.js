"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a table resource in a dataset for Google BigQuery. For more information see
 * [the official documentation](https://cloud.google.com/bigquery/docs/) and
 * [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
 *
 * > **Note**: On newer versions of the provider, you must explicitly set `deletion_protection=false`
 * (and run `pulumi update` to write the field to state) in order to destroy an instance.
 * It is recommended to not set this field (or set it to true) until you're ready to destroy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultDataset = new gcp.bigquery.Dataset("defaultDataset", {
 *     datasetId: "foo",
 *     friendlyName: "test",
 *     description: "This is a test description",
 *     location: "EU",
 *     defaultTableExpirationMs: 3600000,
 *     labels: {
 *         env: "default",
 *     },
 * });
 * const defaultTable = new gcp.bigquery.Table("defaultTable", {
 *     datasetId: defaultDataset.datasetId,
 *     tableId: "bar",
 *     timePartitioning: {
 *         type: "DAY",
 *     },
 *     labels: {
 *         env: "default",
 *     },
 *     schema: `[
 *   {
 *     "name": "permalink",
 *     "type": "STRING",
 *     "mode": "NULLABLE",
 *     "description": "The Permalink"
 *   },
 *   {
 *     "name": "state",
 *     "type": "STRING",
 *     "mode": "NULLABLE",
 *     "description": "State where the head office is located"
 *   }
 * ]
 * `,
 * });
 * const sheet = new gcp.bigquery.Table("sheet", {
 *     datasetId: defaultDataset.datasetId,
 *     tableId: "sheet",
 *     externalDataConfiguration: {
 *         autodetect: true,
 *         sourceFormat: "GOOGLE_SHEETS",
 *         googleSheetsOptions: {
 *             skipLeadingRows: 1,
 *         },
 *         sourceUris: ["https://docs.google.com/spreadsheets/d/123456789012345"],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * BigQuery tables can be imported using the `project`, `dataset_id`, and `table_id`, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/table:Table default gcp-project/foo/bar
 * ```
 */
class Table extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["clusterings"] = state ? state.clusterings : undefined;
            inputs["creationTime"] = state ? state.creationTime : undefined;
            inputs["datasetId"] = state ? state.datasetId : undefined;
            inputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["encryptionConfiguration"] = state ? state.encryptionConfiguration : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["expirationTime"] = state ? state.expirationTime : undefined;
            inputs["externalDataConfiguration"] = state ? state.externalDataConfiguration : undefined;
            inputs["friendlyName"] = state ? state.friendlyName : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["materializedView"] = state ? state.materializedView : undefined;
            inputs["numBytes"] = state ? state.numBytes : undefined;
            inputs["numLongTermBytes"] = state ? state.numLongTermBytes : undefined;
            inputs["numRows"] = state ? state.numRows : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["rangePartitioning"] = state ? state.rangePartitioning : undefined;
            inputs["schema"] = state ? state.schema : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["tableId"] = state ? state.tableId : undefined;
            inputs["timePartitioning"] = state ? state.timePartitioning : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["view"] = state ? state.view : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.datasetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetId'");
            }
            if ((!args || args.tableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableId'");
            }
            inputs["clusterings"] = args ? args.clusterings : undefined;
            inputs["datasetId"] = args ? args.datasetId : undefined;
            inputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["encryptionConfiguration"] = args ? args.encryptionConfiguration : undefined;
            inputs["expirationTime"] = args ? args.expirationTime : undefined;
            inputs["externalDataConfiguration"] = args ? args.externalDataConfiguration : undefined;
            inputs["friendlyName"] = args ? args.friendlyName : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["materializedView"] = args ? args.materializedView : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["rangePartitioning"] = args ? args.rangePartitioning : undefined;
            inputs["schema"] = args ? args.schema : undefined;
            inputs["tableId"] = args ? args.tableId : undefined;
            inputs["timePartitioning"] = args ? args.timePartitioning : undefined;
            inputs["view"] = args ? args.view : undefined;
            inputs["creationTime"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["lastModifiedTime"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["numBytes"] = undefined /*out*/;
            inputs["numLongTermBytes"] = undefined /*out*/;
            inputs["numRows"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Table.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Table(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }
}
exports.Table = Table;
/** @internal */
Table.__pulumiType = 'gcp:bigquery/table:Table';
//# sourceMappingURL=table.js.map