import * as pulumi from "@pulumi/pulumi";
/**
 * Get a Secret Manager secret's version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = pulumi.output(gcp.secretmanager.getSecretVersion({
 *     secret: "my-secret",
 * }, { async: true }));
 * ```
 */
export declare function getSecretVersion(args: GetSecretVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetSecretVersionResult>;
/**
 * A collection of arguments for invoking getSecretVersion.
 */
export interface GetSecretVersionArgs {
    /**
     * The project to get the secret version for. If it
     * is not provided, the provider project is used.
     */
    readonly project?: string;
    /**
     * The secret to get the secret version for.
     */
    readonly secret: string;
    /**
     * The version of the secret to get. If it
     * is not provided, the latest version is retrieved.
     */
    readonly version?: string;
}
/**
 * A collection of values returned by getSecretVersion.
 */
export interface GetSecretVersionResult {
    /**
     * The time at which the Secret was created.
     */
    readonly createTime: string;
    /**
     * The time at which the Secret was destroyed. Only present if state is DESTROYED.
     */
    readonly destroyTime: string;
    /**
     * True if the current state of the SecretVersion is enabled.
     */
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The resource name of the SecretVersion. Format:
     * `projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}`
     */
    readonly name: string;
    readonly project: string;
    readonly secret: string;
    /**
     * The secret data. No larger than 64KiB.
     */
    readonly secretData: string;
    readonly version: string;
}
