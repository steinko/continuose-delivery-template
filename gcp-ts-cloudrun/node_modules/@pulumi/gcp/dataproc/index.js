"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./autoscalingPolicy"));
__export(require("./cluster"));
__export(require("./clusterIAMBinding"));
__export(require("./clusterIAMMember"));
__export(require("./clusterIAMPolicy"));
__export(require("./job"));
__export(require("./jobIAMBinding"));
__export(require("./jobIAMMember"));
__export(require("./jobIAMPolicy"));
__export(require("./metastoreService"));
__export(require("./workflowTemplate"));
// Import resources to register:
const autoscalingPolicy_1 = require("./autoscalingPolicy");
const cluster_1 = require("./cluster");
const clusterIAMBinding_1 = require("./clusterIAMBinding");
const clusterIAMMember_1 = require("./clusterIAMMember");
const clusterIAMPolicy_1 = require("./clusterIAMPolicy");
const job_1 = require("./job");
const jobIAMBinding_1 = require("./jobIAMBinding");
const jobIAMMember_1 = require("./jobIAMMember");
const jobIAMPolicy_1 = require("./jobIAMPolicy");
const metastoreService_1 = require("./metastoreService");
const workflowTemplate_1 = require("./workflowTemplate");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:dataproc/autoscalingPolicy:AutoscalingPolicy":
                return new autoscalingPolicy_1.AutoscalingPolicy(name, undefined, { urn });
            case "gcp:dataproc/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "gcp:dataproc/clusterIAMBinding:ClusterIAMBinding":
                return new clusterIAMBinding_1.ClusterIAMBinding(name, undefined, { urn });
            case "gcp:dataproc/clusterIAMMember:ClusterIAMMember":
                return new clusterIAMMember_1.ClusterIAMMember(name, undefined, { urn });
            case "gcp:dataproc/clusterIAMPolicy:ClusterIAMPolicy":
                return new clusterIAMPolicy_1.ClusterIAMPolicy(name, undefined, { urn });
            case "gcp:dataproc/job:Job":
                return new job_1.Job(name, undefined, { urn });
            case "gcp:dataproc/jobIAMBinding:JobIAMBinding":
                return new jobIAMBinding_1.JobIAMBinding(name, undefined, { urn });
            case "gcp:dataproc/jobIAMMember:JobIAMMember":
                return new jobIAMMember_1.JobIAMMember(name, undefined, { urn });
            case "gcp:dataproc/jobIAMPolicy:JobIAMPolicy":
                return new jobIAMPolicy_1.JobIAMPolicy(name, undefined, { urn });
            case "gcp:dataproc/metastoreService:MetastoreService":
                return new metastoreService_1.MetastoreService(name, undefined, { urn });
            case "gcp:dataproc/workflowTemplate:WorkflowTemplate":
                return new workflowTemplate_1.WorkflowTemplate(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "dataproc/autoscalingPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/cluster", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/clusterIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/clusterIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/clusterIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/job", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/jobIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/jobIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/jobIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/metastoreService", _module);
pulumi.runtime.registerResourceModule("gcp", "dataproc/workflowTemplate", _module);
//# sourceMappingURL=index.js.map