"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Google Cloud IoT Core device registry.
 *
 * To get more information about DeviceRegistry, see:
 *
 * * [API documentation](https://cloud.google.com/iot/docs/reference/cloudiot/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/iot/docs/)
 *
 * ## Example Usage
 * ### Cloudiot Device Registry Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const test_registry = new gcp.iot.Registry("test-registry", {});
 * ```
 * ### Cloudiot Device Registry Single Event Notification Configs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default_telemetry = new gcp.pubsub.Topic("default-telemetry", {});
 * const test_registry = new gcp.iot.Registry("test-registry", {eventNotificationConfigs: [{
 *     pubsubTopicName: default_telemetry.id,
 *     subfolderMatches: "",
 * }]});
 * ```
 * ### Cloudiot Device Registry Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 *
 * const default_devicestatus = new gcp.pubsub.Topic("default-devicestatus", {});
 * const default_telemetry = new gcp.pubsub.Topic("default-telemetry", {});
 * const additional_telemetry = new gcp.pubsub.Topic("additional-telemetry", {});
 * const test_registry = new gcp.iot.Registry("test-registry", {
 *     eventNotificationConfigs: [
 *         {
 *             pubsubTopicName: additional_telemetry.id,
 *             subfolderMatches: "test/path",
 *         },
 *         {
 *             pubsubTopicName: default_telemetry.id,
 *             subfolderMatches: "",
 *         },
 *     ],
 *     stateNotificationConfig: {
 *         pubsub_topic_name: default_devicestatus.id,
 *     },
 *     mqttConfig: {
 *         mqtt_enabled_state: "MQTT_ENABLED",
 *     },
 *     httpConfig: {
 *         http_enabled_state: "HTTP_ENABLED",
 *     },
 *     logLevel: "INFO",
 *     credentials: [{
 *         publicKeyCertificate: {
 *             format: "X509_CERTIFICATE_PEM",
 *             certificate: fs.readFileSync("test-fixtures/rsa_cert.pem"),
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DeviceRegistry can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{project}}/locations/{{region}}/registries/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{name}}
 * ```
 */
class Registry extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["credentials"] = state ? state.credentials : undefined;
            inputs["eventNotificationConfigs"] = state ? state.eventNotificationConfigs : undefined;
            inputs["httpConfig"] = state ? state.httpConfig : undefined;
            inputs["logLevel"] = state ? state.logLevel : undefined;
            inputs["mqttConfig"] = state ? state.mqttConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["stateNotificationConfig"] = state ? state.stateNotificationConfig : undefined;
        }
        else {
            const args = argsOrState;
            inputs["credentials"] = args ? args.credentials : undefined;
            inputs["eventNotificationConfigs"] = args ? args.eventNotificationConfigs : undefined;
            inputs["httpConfig"] = args ? args.httpConfig : undefined;
            inputs["logLevel"] = args ? args.logLevel : undefined;
            inputs["mqttConfig"] = args ? args.mqttConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["stateNotificationConfig"] = args ? args.stateNotificationConfig : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "gcp:kms/registry:Registry" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Registry.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Registry(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }
}
exports.Registry = Registry;
/** @internal */
Registry.__pulumiType = 'gcp:iot/registry:Registry';
//# sourceMappingURL=registry.js.map