"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Adds a trust between Active Directory domains
 *
 * To get more information about DomainTrust, see:
 *
 * * [API documentation](https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains/attachTrust)
 * * How-to Guides
 *     * [Active Directory Trust](https://cloud.google.com/managed-microsoft-ad/docs/create-one-way-trust)
 *
 * > **Warning:** All arguments including `trustHandshakeSecret` will be stored in the raw
 * state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Example Usage
 * ### Active Directory Domain Trust Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const ad_domain_trust = new gcp.activedirectory.DomainTrust("ad-domain-trust", {
 *     domain: "test-managed-ad.com",
 *     targetDnsIpAddresses: ["10.1.0.100"],
 *     targetDomainName: "example-gcp.com",
 *     trustDirection: "OUTBOUND",
 *     trustHandshakeSecret: "Testing1!",
 *     trustType: "FOREST",
 * });
 * ```
 *
 * ## Import
 *
 * DomainTrust can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:activedirectory/domainTrust:DomainTrust default projects/{{project}}/locations/global/domains/{{domain}}/{{target_domain_name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:activedirectory/domainTrust:DomainTrust default {{project}}/{{domain}}/{{target_domain_name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:activedirectory/domainTrust:DomainTrust default {{domain}}/{{target_domain_name}}
 * ```
 */
class DomainTrust extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["selectiveAuthentication"] = state ? state.selectiveAuthentication : undefined;
            inputs["targetDnsIpAddresses"] = state ? state.targetDnsIpAddresses : undefined;
            inputs["targetDomainName"] = state ? state.targetDomainName : undefined;
            inputs["trustDirection"] = state ? state.trustDirection : undefined;
            inputs["trustHandshakeSecret"] = state ? state.trustHandshakeSecret : undefined;
            inputs["trustType"] = state ? state.trustType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.targetDnsIpAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDnsIpAddresses'");
            }
            if ((!args || args.targetDomainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDomainName'");
            }
            if ((!args || args.trustDirection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustDirection'");
            }
            if ((!args || args.trustHandshakeSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustHandshakeSecret'");
            }
            if ((!args || args.trustType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustType'");
            }
            inputs["domain"] = args ? args.domain : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["selectiveAuthentication"] = args ? args.selectiveAuthentication : undefined;
            inputs["targetDnsIpAddresses"] = args ? args.targetDnsIpAddresses : undefined;
            inputs["targetDomainName"] = args ? args.targetDomainName : undefined;
            inputs["trustDirection"] = args ? args.trustDirection : undefined;
            inputs["trustHandshakeSecret"] = args ? args.trustHandshakeSecret : undefined;
            inputs["trustType"] = args ? args.trustType : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(DomainTrust.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DomainTrust resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DomainTrust(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DomainTrust.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainTrust.__pulumiType;
    }
}
exports.DomainTrust = DomainTrust;
/** @internal */
DomainTrust.__pulumiType = 'gcp:activedirectory/domainTrust:DomainTrust';
//# sourceMappingURL=domainTrust.js.map