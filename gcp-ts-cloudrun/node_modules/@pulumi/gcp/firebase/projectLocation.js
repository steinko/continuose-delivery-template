"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Sets the default Google Cloud Platform (GCP) resource location for the specified FirebaseProject.
 *
 * This method creates an App Engine application with a default Cloud Storage bucket, located in the specified
 * locationId. This location must be one of the available GCP resource locations.
 *
 * After the default GCP resource location is finalized, or if it was already set, it cannot be changed.
 * The default GCP resource location for the specified FirebaseProject might already be set because either the
 * GCP Project already has an App Engine application or defaultLocation.finalize was previously called with a
 * specified locationId. Any new calls to defaultLocation.finalize with a different specified locationId will
 * return a 409 error.
 *
 * To get more information about ProjectLocation, see:
 *
 * * [API documentation](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.defaultLocation/finalize)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * ProjectLocation can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebase/projectLocation:ProjectLocation default projects/{{project}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/projectLocation:ProjectLocation default {{project}}
 * ```
 */
class ProjectLocation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["locationId"] = state ? state.locationId : undefined;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            inputs["locationId"] = args ? args.locationId : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ProjectLocation.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ProjectLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectLocation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectLocation.__pulumiType;
    }
}
exports.ProjectLocation = ProjectLocation;
/** @internal */
ProjectLocation.__pulumiType = 'gcp:firebase/projectLocation:ProjectLocation';
//# sourceMappingURL=projectLocation.js.map