"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Flexible App Version resource to create a new version of flexible GAE Application. Based on Google Compute Engine,
 * the App Engine flexible environment automatically scales your app up and down while also balancing the load.
 * Learn about the differences between the standard environment and the flexible environment
 * at https://cloud.google.com/appengine/docs/the-appengine-environments.
 *
 * > **Note:** The App Engine flexible environment service account uses the member ID `service-[YOUR_PROJECT_NUMBER]@gae-api-prod.google.com.iam.gserviceaccount.com`
 * It should have the App Engine Flexible Environment Service Agent role, which will be applied when the `appengineflex.googleapis.com` service is enabled.
 *
 * To get more information about FlexibleAppVersion, see:
 *
 * * [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/appengine/docs/flexible)
 *
 * ## Example Usage
 * ### App Engine Flexible App Version
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myProject = new gcp.organizations.Project("myProject", {
 *     projectId: "appeng-flex",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const app = new gcp.appengine.Application("app", {
 *     project: myProject.projectId,
 *     locationId: "us-central",
 * });
 * const service = new gcp.projects.Service("service", {
 *     project: myProject.projectId,
 *     service: "appengineflex.googleapis.com",
 *     disableDependentServices: false,
 * });
 * const gaeApi = new gcp.projects.IAMMember("gaeApi", {
 *     project: service.project,
 *     role: "roles/compute.networkUser",
 *     member: pulumi.interpolate`serviceAccount:service-${myProject.number}@gae-api-prod.google.com.iam.gserviceaccount.com`,
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {project: myProject.projectId});
 * const object = new gcp.storage.BucketObject("object", {
 *     bucket: bucket.name,
 *     source: new pulumi.asset.FileAsset("./test-fixtures/appengine/hello-world.zip"),
 * });
 * const myappV1 = new gcp.appengine.FlexibleAppVersion("myappV1", {
 *     versionId: "v1",
 *     project: gaeApi.project,
 *     service: "default",
 *     runtime: "nodejs",
 *     entrypoint: {
 *         shell: "node ./app.js",
 *     },
 *     deployment: {
 *         zip: {
 *             sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
 *         },
 *     },
 *     livenessCheck: {
 *         path: "/",
 *     },
 *     readinessCheck: {
 *         path: "/",
 *     },
 *     envVariables: {
 *         port: "8080",
 *     },
 *     handlers: [{
 *         urlRegex: ".*\\/my-path\\/*",
 *         securityLevel: "SECURE_ALWAYS",
 *         login: "LOGIN_REQUIRED",
 *         authFailAction: "AUTH_FAIL_ACTION_REDIRECT",
 *         staticFiles: {
 *             path: "my-other-path",
 *             uploadPathRegex: ".*\\/my-path\\/*",
 *         },
 *     }],
 *     automaticScaling: {
 *         coolDownPeriod: "120s",
 *         cpuUtilization: {
 *             targetUtilization: 0.5,
 *         },
 *     },
 *     noopOnDestroy: true,
 * });
 * ```
 *
 * ## Import
 *
 * FlexibleAppVersion can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:appengine/flexibleAppVersion:FlexibleAppVersion default apps/{{project}}/services/{{service}}/versions/{{version_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:appengine/flexibleAppVersion:FlexibleAppVersion default {{project}}/{{service}}/{{version_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:appengine/flexibleAppVersion:FlexibleAppVersion default {{service}}/{{version_id}}
 * ```
 */
class FlexibleAppVersion extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiConfig"] = state ? state.apiConfig : undefined;
            inputs["automaticScaling"] = state ? state.automaticScaling : undefined;
            inputs["betaSettings"] = state ? state.betaSettings : undefined;
            inputs["defaultExpiration"] = state ? state.defaultExpiration : undefined;
            inputs["deleteServiceOnDestroy"] = state ? state.deleteServiceOnDestroy : undefined;
            inputs["deployment"] = state ? state.deployment : undefined;
            inputs["endpointsApiService"] = state ? state.endpointsApiService : undefined;
            inputs["entrypoint"] = state ? state.entrypoint : undefined;
            inputs["envVariables"] = state ? state.envVariables : undefined;
            inputs["handlers"] = state ? state.handlers : undefined;
            inputs["inboundServices"] = state ? state.inboundServices : undefined;
            inputs["instanceClass"] = state ? state.instanceClass : undefined;
            inputs["livenessCheck"] = state ? state.livenessCheck : undefined;
            inputs["manualScaling"] = state ? state.manualScaling : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["nobuildFilesRegex"] = state ? state.nobuildFilesRegex : undefined;
            inputs["noopOnDestroy"] = state ? state.noopOnDestroy : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["readinessCheck"] = state ? state.readinessCheck : undefined;
            inputs["resources"] = state ? state.resources : undefined;
            inputs["runtime"] = state ? state.runtime : undefined;
            inputs["runtimeApiVersion"] = state ? state.runtimeApiVersion : undefined;
            inputs["runtimeChannel"] = state ? state.runtimeChannel : undefined;
            inputs["runtimeMainExecutablePath"] = state ? state.runtimeMainExecutablePath : undefined;
            inputs["service"] = state ? state.service : undefined;
            inputs["servingStatus"] = state ? state.servingStatus : undefined;
            inputs["versionId"] = state ? state.versionId : undefined;
            inputs["vpcAccessConnector"] = state ? state.vpcAccessConnector : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.livenessCheck === undefined) && !opts.urn) {
                throw new Error("Missing required property 'livenessCheck'");
            }
            if ((!args || args.readinessCheck === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readinessCheck'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            inputs["apiConfig"] = args ? args.apiConfig : undefined;
            inputs["automaticScaling"] = args ? args.automaticScaling : undefined;
            inputs["betaSettings"] = args ? args.betaSettings : undefined;
            inputs["defaultExpiration"] = args ? args.defaultExpiration : undefined;
            inputs["deleteServiceOnDestroy"] = args ? args.deleteServiceOnDestroy : undefined;
            inputs["deployment"] = args ? args.deployment : undefined;
            inputs["endpointsApiService"] = args ? args.endpointsApiService : undefined;
            inputs["entrypoint"] = args ? args.entrypoint : undefined;
            inputs["envVariables"] = args ? args.envVariables : undefined;
            inputs["handlers"] = args ? args.handlers : undefined;
            inputs["inboundServices"] = args ? args.inboundServices : undefined;
            inputs["instanceClass"] = args ? args.instanceClass : undefined;
            inputs["livenessCheck"] = args ? args.livenessCheck : undefined;
            inputs["manualScaling"] = args ? args.manualScaling : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["nobuildFilesRegex"] = args ? args.nobuildFilesRegex : undefined;
            inputs["noopOnDestroy"] = args ? args.noopOnDestroy : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["readinessCheck"] = args ? args.readinessCheck : undefined;
            inputs["resources"] = args ? args.resources : undefined;
            inputs["runtime"] = args ? args.runtime : undefined;
            inputs["runtimeApiVersion"] = args ? args.runtimeApiVersion : undefined;
            inputs["runtimeChannel"] = args ? args.runtimeChannel : undefined;
            inputs["runtimeMainExecutablePath"] = args ? args.runtimeMainExecutablePath : undefined;
            inputs["service"] = args ? args.service : undefined;
            inputs["servingStatus"] = args ? args.servingStatus : undefined;
            inputs["versionId"] = args ? args.versionId : undefined;
            inputs["vpcAccessConnector"] = args ? args.vpcAccessConnector : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(FlexibleAppVersion.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing FlexibleAppVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FlexibleAppVersion(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlexibleAppVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlexibleAppVersion.__pulumiType;
    }
}
exports.FlexibleAppVersion = FlexibleAppVersion;
/** @internal */
FlexibleAppVersion.__pulumiType = 'gcp:appengine/flexibleAppVersion:FlexibleAppVersion';
//# sourceMappingURL=flexibleAppVersion.js.map