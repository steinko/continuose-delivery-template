"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows creation and management of an App Engine application.
 *
 * > App Engine applications cannot be deleted once they're created; you have to delete the
 *    entire project to delete the application. This provider will report the application has been
 *    successfully deleted; this is a limitation of the provider, and will go away in the future.
 *    This provider is not able to delete App Engine applications.
 *
 * > **Warning:** All arguments including `iap.oauth2_client_secret` will be stored in the raw
 * state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myProject = new gcp.organizations.Project("myProject", {
 *     projectId: "your-project-id",
 *     orgId: "1234567",
 * });
 * const app = new gcp.appengine.Application("app", {
 *     project: myProject.projectId,
 *     locationId: "us-central",
 * });
 * ```
 *
 * ## Import
 *
 * Applications can be imported using the ID of the project the application belongs to, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:appengine/application:Application app your-project-id
 * ```
 */
class Application extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["appId"] = state ? state.appId : undefined;
            inputs["authDomain"] = state ? state.authDomain : undefined;
            inputs["codeBucket"] = state ? state.codeBucket : undefined;
            inputs["databaseType"] = state ? state.databaseType : undefined;
            inputs["defaultBucket"] = state ? state.defaultBucket : undefined;
            inputs["defaultHostname"] = state ? state.defaultHostname : undefined;
            inputs["featureSettings"] = state ? state.featureSettings : undefined;
            inputs["gcrDomain"] = state ? state.gcrDomain : undefined;
            inputs["iap"] = state ? state.iap : undefined;
            inputs["locationId"] = state ? state.locationId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["servingStatus"] = state ? state.servingStatus : undefined;
            inputs["urlDispatchRules"] = state ? state.urlDispatchRules : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            inputs["authDomain"] = args ? args.authDomain : undefined;
            inputs["databaseType"] = args ? args.databaseType : undefined;
            inputs["featureSettings"] = args ? args.featureSettings : undefined;
            inputs["iap"] = args ? args.iap : undefined;
            inputs["locationId"] = args ? args.locationId : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["servingStatus"] = args ? args.servingStatus : undefined;
            inputs["appId"] = undefined /*out*/;
            inputs["codeBucket"] = undefined /*out*/;
            inputs["defaultBucket"] = undefined /*out*/;
            inputs["defaultHostname"] = undefined /*out*/;
            inputs["gcrDomain"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["urlDispatchRules"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Application.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Application(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'gcp:appengine/application:Application';
//# sourceMappingURL=application.js.map