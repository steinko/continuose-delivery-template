"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A scheduled job that can publish a pubsub message or a http request
 * every X interval of time, using crontab format string.
 *
 * To use Cloud Scheduler your project must contain an App Engine app
 * that is located in one of the supported regions. If your project
 * does not have an App Engine app, you must create one.
 *
 * To get more information about Job, see:
 *
 * * [API documentation](https://cloud.google.com/scheduler/docs/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/scheduler/)
 *
 * ## Example Usage
 * ### Scheduler Job App Engine
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const job = new gcp.cloudscheduler.Job("job", {
 *     appEngineHttpTarget: {
 *         appEngineRouting: {
 *             instance: "my-instance-001",
 *             service: "web",
 *             version: "prod",
 *         },
 *         httpMethod: "POST",
 *         relativeUri: "/ping",
 *     },
 *     attemptDeadline: "320s",
 *     description: "test app engine job",
 *     retryConfig: {
 *         maxDoublings: 2,
 *         maxRetryDuration: "10s",
 *         minBackoffDuration: "1s",
 *         retryCount: 3,
 *     },
 *     schedule: "*&#47;4 * * * *",
 *     timeZone: "Europe/London",
 * });
 * ```
 * ### Scheduler Job Oauth
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.compute.getDefaultServiceAccount({});
 * const job = new gcp.cloudscheduler.Job("job", {
 *     description: "test http job",
 *     schedule: "*&#47;8 * * * *",
 *     timeZone: "America/New_York",
 *     attemptDeadline: "320s",
 *     httpTarget: {
 *         httpMethod: "GET",
 *         uri: "https://cloudscheduler.googleapis.com/v1/projects/my-project-name/locations/us-west1/jobs",
 *         oauthToken: {
 *             serviceAccountEmail: _default.then(_default => _default.email),
 *         },
 *     },
 * });
 * ```
 * ### Scheduler Job Oidc
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.compute.getDefaultServiceAccount({});
 * const job = new gcp.cloudscheduler.Job("job", {
 *     description: "test http job",
 *     schedule: "*&#47;8 * * * *",
 *     timeZone: "America/New_York",
 *     attemptDeadline: "320s",
 *     httpTarget: {
 *         httpMethod: "GET",
 *         uri: "https://example.com/ping",
 *         oidcToken: {
 *             serviceAccountEmail: _default.then(_default => _default.email),
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Job can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default projects/{{project}}/locations/{{region}}/jobs/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default {{name}}
 * ```
 */
class Job extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["appEngineHttpTarget"] = state ? state.appEngineHttpTarget : undefined;
            inputs["attemptDeadline"] = state ? state.attemptDeadline : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["httpTarget"] = state ? state.httpTarget : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["pubsubTarget"] = state ? state.pubsubTarget : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["retryConfig"] = state ? state.retryConfig : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["timeZone"] = state ? state.timeZone : undefined;
        }
        else {
            const args = argsOrState;
            inputs["appEngineHttpTarget"] = args ? args.appEngineHttpTarget : undefined;
            inputs["attemptDeadline"] = args ? args.attemptDeadline : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["httpTarget"] = args ? args.httpTarget : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["pubsubTarget"] = args ? args.pubsubTarget : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["retryConfig"] = args ? args.retryConfig : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["timeZone"] = args ? args.timeZone : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Job.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Job(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }
}
exports.Job = Job;
/** @internal */
Job.__pulumiType = 'gcp:cloudscheduler/job:Job';
//# sourceMappingURL=job.js.map