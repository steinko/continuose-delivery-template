"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A CertificateAuthority represents an individual Certificate Authority. A
 * CertificateAuthority can be used to create Certificates.
 *
 * > **Warning:** Please remember that all resources created during preview (via this provider)
 * will be deleted when CA service transitions to General Availability (GA). Relying on these
 * certificate authorities for production traffic is discouraged.
 *
 * To get more information about CertificateAuthority, see:
 *
 * * [API documentation](https://cloud.google.com/certificate-authority-service/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/certificate-authority-service)
 *
 * ## Example Usage
 * ### Privateca Certificate Authority Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.certificateauthority.Authority("default", {
 *     certificateAuthorityId: "my-certificate-authority",
 *     location: "us-central1",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *             },
 *             commonName: "my-certificate-authority",
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         reusableConfig: {
 *             reusableConfig: "projects/568668481468/locations/us-central1/reusableConfigs/root-unconstrained",
 *         },
 *     },
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 *     disableOnDelete: true,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Privateca Certificate Authority Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.certificateauthority.Authority("default", {
 *     certificateAuthorityId: "my-certificate-authority",
 *     location: "us-central1",
 *     tier: "DEVOPS",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 countryCode: "US",
 *                 organization: "HashiCorp",
 *                 organizationalUnit: "Terraform",
 *                 locality: "San Francisco",
 *                 province: "CA",
 *                 streetAddress: "101 2nd St #700",
 *                 postalCode: "94105",
 *             },
 *             commonName: "my-certificate-authority",
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *                 emailAddresses: ["email@example.com"],
 *                 ipAddresses: ["127.0.0.1"],
 *                 uris: ["http://www.ietf.org/rfc/rfc3986.txt"],
 *             },
 *         },
 *         reusableConfig: {
 *             reusableConfig: "projects/568668481468/locations/us-central1/reusableConfigs/root-unconstrained",
 *         },
 *     },
 *     lifetime: "86400s",
 *     issuingOptions: {
 *         includeCaCertUrl: true,
 *         includeCrlAccessUrl: false,
 *     },
 *     keySpec: {
 *         algorithm: "EC_P256_SHA256",
 *     },
 *     disableOnDelete: true,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * CertificateAuthority can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authority:Authority default projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authority:Authority default {{project}}/{{location}}/{{certificate_authority_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authority:Authority default {{location}}/{{certificate_authority_id}}
 * ```
 */
class Authority extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accessUrls"] = state ? state.accessUrls : undefined;
            inputs["certificateAuthorityId"] = state ? state.certificateAuthorityId : undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["disableOnDelete"] = state ? state.disableOnDelete : undefined;
            inputs["gcsBucket"] = state ? state.gcsBucket : undefined;
            inputs["issuingOptions"] = state ? state.issuingOptions : undefined;
            inputs["keySpec"] = state ? state.keySpec : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["lifetime"] = state ? state.lifetime : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pemCaCertificates"] = state ? state.pemCaCertificates : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tier"] = state ? state.tier : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.certificateAuthorityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.keySpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keySpec'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            inputs["certificateAuthorityId"] = args ? args.certificateAuthorityId : undefined;
            inputs["config"] = args ? args.config : undefined;
            inputs["disableOnDelete"] = args ? args.disableOnDelete : undefined;
            inputs["gcsBucket"] = args ? args.gcsBucket : undefined;
            inputs["issuingOptions"] = args ? args.issuingOptions : undefined;
            inputs["keySpec"] = args ? args.keySpec : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["lifetime"] = args ? args.lifetime : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["tier"] = args ? args.tier : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["accessUrls"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pemCaCertificates"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Authority.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Authority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Authority(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Authority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authority.__pulumiType;
    }
}
exports.Authority = Authority;
/** @internal */
Authority.__pulumiType = 'gcp:certificateauthority/authority:Authority';
//# sourceMappingURL=authority.js.map