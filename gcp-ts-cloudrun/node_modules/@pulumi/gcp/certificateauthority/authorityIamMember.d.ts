import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Three different resources help you manage your IAM policy for Certificate Authority Service CertificateAuthority. Each of these resources serves a different use case:
 *
 * * `gcp.certificateauthority.AuthorityIamPolicy`: Authoritative. Sets the IAM policy for the certificateauthority and replaces any existing policy already attached.
 * * `gcp.certificateauthority.AuthorityIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the certificateauthority are preserved.
 * * `gcp.certificateauthority.AuthorityIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the certificateauthority are preserved.
 *
 * > **Note:** `gcp.certificateauthority.AuthorityIamPolicy` **cannot** be used in conjunction with `gcp.certificateauthority.AuthorityIamBinding` and `gcp.certificateauthority.AuthorityIamMember` or they will fight over what your policy should be.
 *
 * > **Note:** `gcp.certificateauthority.AuthorityIamBinding` resources **can be** used in conjunction with `gcp.certificateauthority.AuthorityIamMember` resources **only if** they do not grant privilege to the same role.
 * ## google\_privateca\_certificate\_authority\_iam\_policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/privateca.certificateManager",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const policy = new gcp.certificateauthority.AuthorityIamPolicy("policy", {
 *     certificateAuthority: google_privateca_certificate_authority["default"].id,
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * ## google\_privateca\_certificate\_authority\_iam\_binding
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const binding = new gcp.certificateauthority.AuthorityIamBinding("binding", {
 *     certificateAuthority: google_privateca_certificate_authority["default"].id,
 *     role: "roles/privateca.certificateManager",
 *     members: ["user:jane@example.com"],
 * });
 * ```
 *
 * ## google\_privateca\_certificate\_authority\_iam\_member
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const member = new gcp.certificateauthority.AuthorityIamMember("member", {
 *     certificateAuthority: google_privateca_certificate_authority["default"].id,
 *     role: "roles/privateca.certificateManager",
 *     member: "user:jane@example.com",
 * });
 * ```
 *
 * ## Import
 *
 * For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}} * {{project}}/{{location}}/{{certificate_authority_id}} * {{location}}/{{certificate_authority_id}} Any variables not passed in the import command will be taken from the provider configuration. Certificate Authority Service certificateauthority IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authorityIamMember:AuthorityIamMember editor "projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}} roles/privateca.certificateManager user:jane@example.com"
 * ```
 *
 *  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authorityIamMember:AuthorityIamMember editor "projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}} roles/privateca.certificateManager"
 * ```
 *
 *  IAM policy imports use the identifier of the resource in question, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authorityIamMember:AuthorityIamMember editor projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}}
 * ```
 *
 *  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
 *
 * full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
 */
export declare class AuthorityIamMember extends pulumi.CustomResource {
    /**
     * Get an existing AuthorityIamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorityIamMemberState, opts?: pulumi.CustomResourceOptions): AuthorityIamMember;
    /**
     * Returns true if the given object is an instance of AuthorityIamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AuthorityIamMember;
    readonly certificateAuthority: pulumi.Output<string>;
    readonly condition: pulumi.Output<outputs.certificateauthority.AuthorityIamMemberCondition | undefined>;
    /**
     * (Computed) The etag of the IAM policy.
     */
    readonly etag: pulumi.Output<string>;
    readonly member: pulumi.Output<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     */
    readonly role: pulumi.Output<string>;
    /**
     * Create a AuthorityIamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorityIamMemberArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AuthorityIamMember resources.
 */
export interface AuthorityIamMemberState {
    readonly certificateAuthority?: pulumi.Input<string>;
    readonly condition?: pulumi.Input<inputs.certificateauthority.AuthorityIamMemberCondition>;
    /**
     * (Computed) The etag of the IAM policy.
     */
    readonly etag?: pulumi.Input<string>;
    readonly member?: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     */
    readonly role?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AuthorityIamMember resource.
 */
export interface AuthorityIamMemberArgs {
    readonly certificateAuthority: pulumi.Input<string>;
    readonly condition?: pulumi.Input<inputs.certificateauthority.AuthorityIamMemberCondition>;
    readonly member: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     */
    readonly role: pulumi.Input<string>;
}
