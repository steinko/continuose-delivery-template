import * as pulumi from "@pulumi/pulumi";
/**
 * A Realm resource.
 *
 * To get more information about Realm, see:
 *
 * * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/projects.locations.realms)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/game-servers/docs)
 *
 * ## Example Usage
 * ### Game Service Realm Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultRealm = new gcp.gameservices.Realm("default", {
 *     description: "one of the nine",
 *     location: "global",
 *     realmId: "tf-test-realm",
 *     timeZone: "EST",
 * });
 * ```
 *
 * ## Import
 *
 * Realm can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/realm:Realm default projects/{{project}}/locations/{{location}}/realms/{{realm_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/realm:Realm default {{project}}/{{location}}/{{realm_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/realm:Realm default {{location}}/{{realm_id}}
 * ```
 */
export declare class Realm extends pulumi.CustomResource {
    /**
     * Get an existing Realm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmState, opts?: pulumi.CustomResourceOptions): Realm;
    /**
     * Returns true if the given object is an instance of Realm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Realm;
    /**
     * Human readable description of the realm.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * ETag of the resource.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * The labels associated with this realm. Each label is a key-value pair.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Location of the Realm.
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The resource id of the realm, of the form: 'projects/{project_id}/locations/{location}/realms/{realm_id}'. For example,
     * 'projects/my-project/locations/{location}/realms/my-realm'.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * GCP region of the Realm.
     */
    readonly realmId: pulumi.Output<string>;
    /**
     * Required. Time zone where all realm-specific policies are evaluated. The value of
     * this field must be from the IANA time zone database:
     * https://www.iana.org/time-zones.
     */
    readonly timeZone: pulumi.Output<string>;
    /**
     * Create a Realm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Realm resources.
 */
export interface RealmState {
    /**
     * Human readable description of the realm.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * ETag of the resource.
     */
    readonly etag?: pulumi.Input<string>;
    /**
     * The labels associated with this realm. Each label is a key-value pair.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Location of the Realm.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The resource id of the realm, of the form: 'projects/{project_id}/locations/{location}/realms/{realm_id}'. For example,
     * 'projects/my-project/locations/{location}/realms/my-realm'.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * GCP region of the Realm.
     */
    readonly realmId?: pulumi.Input<string>;
    /**
     * Required. Time zone where all realm-specific policies are evaluated. The value of
     * this field must be from the IANA time zone database:
     * https://www.iana.org/time-zones.
     */
    readonly timeZone?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Realm resource.
 */
export interface RealmArgs {
    /**
     * Human readable description of the realm.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The labels associated with this realm. Each label is a key-value pair.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Location of the Realm.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * GCP region of the Realm.
     */
    readonly realmId: pulumi.Input<string>;
    /**
     * Required. Time zone where all realm-specific policies are evaluated. The value of
     * this field must be from the IANA time zone database:
     * https://www.iana.org/time-zones.
     */
    readonly timeZone: pulumi.Input<string>;
}
