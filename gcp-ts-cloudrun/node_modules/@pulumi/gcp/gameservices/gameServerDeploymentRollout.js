"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This represents the rollout state. This is part of the game server
 * deployment.
 *
 * To get more information about GameServerDeploymentRollout, see:
 *
 * * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/GameServerDeploymentRollout)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/game-servers/docs)
 *
 * ## Example Usage
 * ### Game Service Deployment Rollout Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultGameServerDeployment = new gcp.gameservices.GameServerDeployment("defaultGameServerDeployment", {
 *     deploymentId: "tf-test-deployment",
 *     description: "a deployment description",
 * });
 * const defaultGameServerConfig = new gcp.gameservices.GameServerConfig("defaultGameServerConfig", {
 *     configId: "tf-test-config",
 *     deploymentId: defaultGameServerDeployment.deploymentId,
 *     description: "a config description",
 *     fleetConfigs: [{
 *         name: "some-non-guid",
 *         fleetSpec: JSON.stringify({
 *             replicas: 1,
 *             scheduling: "Packed",
 *             template: {
 *                 metadata: {
 *                     name: "tf-test-game-server-template",
 *                 },
 *                 spec: {
 *                     ports: [{
 *                         name: "default",
 *                         portPolicy: "Dynamic",
 *                         containerPort: 7654,
 *                         protocol: "UDP",
 *                     }],
 *                     template: {
 *                         spec: {
 *                             containers: [{
 *                                 name: "simple-udp-server",
 *                                 image: "gcr.io/agones-images/udp-server:0.14",
 *                             }],
 *                         },
 *                     },
 *                 },
 *             },
 *         }),
 *     }],
 * });
 * const defaultGameServerDeploymentRollout = new gcp.gameservices.GameServerDeploymentRollout("defaultGameServerDeploymentRollout", {
 *     deploymentId: defaultGameServerDeployment.deploymentId,
 *     defaultGameServerConfig: defaultGameServerConfig.name,
 * });
 * ```
 *
 * ## Import
 *
 * GameServerDeploymentRollout can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default projects/{{project}}/locations/global/gameServerDeployments/{{deployment_id}}/rollout
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{project}}/{{deployment_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{deployment_id}}
 * ```
 */
class GameServerDeploymentRollout extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["defaultGameServerConfig"] = state ? state.defaultGameServerConfig : undefined;
            inputs["deploymentId"] = state ? state.deploymentId : undefined;
            inputs["gameServerConfigOverrides"] = state ? state.gameServerConfigOverrides : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultGameServerConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultGameServerConfig'");
            }
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            inputs["defaultGameServerConfig"] = args ? args.defaultGameServerConfig : undefined;
            inputs["deploymentId"] = args ? args.deploymentId : undefined;
            inputs["gameServerConfigOverrides"] = args ? args.gameServerConfigOverrides : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(GameServerDeploymentRollout.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing GameServerDeploymentRollout resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GameServerDeploymentRollout(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GameServerDeploymentRollout.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GameServerDeploymentRollout.__pulumiType;
    }
}
exports.GameServerDeploymentRollout = GameServerDeploymentRollout;
/** @internal */
GameServerDeploymentRollout.__pulumiType = 'gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout';
//# sourceMappingURL=gameServerDeploymentRollout.js.map