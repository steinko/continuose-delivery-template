import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * A game server config resource. Configs are global and immutable.
 *
 * To get more information about GameServerConfig, see:
 *
 * * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/projects.locations.gameServerDeployments.configs)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/game-servers/docs)
 *
 * ## Example Usage
 * ### Game Service Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultGameServerDeployment = new gcp.gameservices.GameServerDeployment("defaultGameServerDeployment", {
 *     deploymentId: "tf-test-deployment",
 *     description: "a deployment description",
 * });
 * const defaultGameServerConfig = new gcp.gameservices.GameServerConfig("defaultGameServerConfig", {
 *     configId: "tf-test-config",
 *     deploymentId: defaultGameServerDeployment.deploymentId,
 *     description: "a config description",
 *     fleetConfigs: [{
 *         name: "something-unique",
 *         fleetSpec: JSON.stringify({
 *             replicas: 1,
 *             scheduling: "Packed",
 *             template: {
 *                 metadata: {
 *                     name: "tf-test-game-server-template",
 *                 },
 *                 spec: {
 *                     ports: [{
 *                         name: "default",
 *                         portPolicy: "Dynamic",
 *                         containerPort: 7654,
 *                         protocol: "UDP",
 *                     }],
 *                     template: {
 *                         spec: {
 *                             containers: [{
 *                                 name: "simple-udp-server",
 *                                 image: "gcr.io/agones-images/udp-server:0.14",
 *                             }],
 *                         },
 *                     },
 *                 },
 *             },
 *         }),
 *     }],
 *     scalingConfigs: [{
 *         name: "scaling-config-name",
 *         fleetAutoscalerSpec: JSON.stringify({
 *             policy: {
 *                 type: "Webhook",
 *                 webhook: {
 *                     service: {
 *                         name: "autoscaler-webhook-service",
 *                         namespace: "default",
 *                         path: "scale",
 *                     },
 *                 },
 *             },
 *         }),
 *         selectors: [{
 *             labels: {
 *                 one: "two",
 *             },
 *         }],
 *         schedules: [{
 *             cronJobDuration: "3.500s",
 *             cronSpec: "0 0 * * 0",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * GameServerConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerConfig:GameServerConfig default projects/{{project}}/locations/{{location}}/gameServerDeployments/{{deployment_id}}/configs/{{config_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerConfig:GameServerConfig default {{project}}/{{location}}/{{deployment_id}}/{{config_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerConfig:GameServerConfig default {{location}}/{{deployment_id}}/{{config_id}}
 * ```
 */
export declare class GameServerConfig extends pulumi.CustomResource {
    /**
     * Get an existing GameServerConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GameServerConfigState, opts?: pulumi.CustomResourceOptions): GameServerConfig;
    /**
     * Returns true if the given object is an instance of GameServerConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GameServerConfig;
    /**
     * A unique id for the deployment config.
     */
    readonly configId: pulumi.Output<string>;
    /**
     * A unique id for the deployment.
     */
    readonly deploymentId: pulumi.Output<string>;
    /**
     * The description of the game server config.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The fleet config contains list of fleet specs. In the Single Cloud, there
     * will be only one.
     * Structure is documented below.
     */
    readonly fleetConfigs: pulumi.Output<outputs.gameservices.GameServerConfigFleetConfig[]>;
    /**
     * Set of labels to group by.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Location of the Deployment.
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * The name of the ScalingConfig
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Optional. This contains the autoscaling settings.
     * Structure is documented below.
     */
    readonly scalingConfigs: pulumi.Output<outputs.gameservices.GameServerConfigScalingConfig[] | undefined>;
    /**
     * Create a GameServerConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GameServerConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering GameServerConfig resources.
 */
export interface GameServerConfigState {
    /**
     * A unique id for the deployment config.
     */
    readonly configId?: pulumi.Input<string>;
    /**
     * A unique id for the deployment.
     */
    readonly deploymentId?: pulumi.Input<string>;
    /**
     * The description of the game server config.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The fleet config contains list of fleet specs. In the Single Cloud, there
     * will be only one.
     * Structure is documented below.
     */
    readonly fleetConfigs?: pulumi.Input<pulumi.Input<inputs.gameservices.GameServerConfigFleetConfig>[]>;
    /**
     * Set of labels to group by.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Location of the Deployment.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The name of the ScalingConfig
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Optional. This contains the autoscaling settings.
     * Structure is documented below.
     */
    readonly scalingConfigs?: pulumi.Input<pulumi.Input<inputs.gameservices.GameServerConfigScalingConfig>[]>;
}
/**
 * The set of arguments for constructing a GameServerConfig resource.
 */
export interface GameServerConfigArgs {
    /**
     * A unique id for the deployment config.
     */
    readonly configId: pulumi.Input<string>;
    /**
     * A unique id for the deployment.
     */
    readonly deploymentId: pulumi.Input<string>;
    /**
     * The description of the game server config.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The fleet config contains list of fleet specs. In the Single Cloud, there
     * will be only one.
     * Structure is documented below.
     */
    readonly fleetConfigs: pulumi.Input<pulumi.Input<inputs.gameservices.GameServerConfigFleetConfig>[]>;
    /**
     * Set of labels to group by.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Location of the Deployment.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Optional. This contains the autoscaling settings.
     * Structure is documented below.
     */
    readonly scalingConfigs?: pulumi.Input<pulumi.Input<inputs.gameservices.GameServerConfigScalingConfig>[]>;
}
