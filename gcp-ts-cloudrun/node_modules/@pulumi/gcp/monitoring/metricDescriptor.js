"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
 *
 * To get more information about MetricDescriptor, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/custom-metrics/)
 *
 * ## Example Usage
 * ### Monitoring Metric Descriptor Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.monitoring.MetricDescriptor("basic", {
 *     description: "Daily sales records from all branch stores.",
 *     displayName: "metric-descriptor",
 *     labels: [{
 *         description: "The ID of the store.",
 *         key: "store_id",
 *         valueType: "STRING",
 *     }],
 *     launchStage: "BETA",
 *     metadata: {
 *         ingestDelay: "30s",
 *         samplePeriod: "60s",
 *     },
 *     metricKind: "GAUGE",
 *     type: "custom.googleapis.com/stores/daily_sales",
 *     unit: "{USD}",
 *     valueType: "DOUBLE",
 * });
 * ```
 * ### Monitoring Metric Descriptor Alert
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const withAlert = new gcp.monitoring.MetricDescriptor("with_alert", {
 *     description: "Daily sales records from all branch stores.",
 *     displayName: "metric-descriptor",
 *     metricKind: "GAUGE",
 *     type: "custom.googleapis.com/stores/daily_sales",
 *     unit: "{USD}",
 *     valueType: "DOUBLE",
 * });
 * const alertPolicy = new gcp.monitoring.AlertPolicy("alert_policy", {
 *     combiner: "OR",
 *     conditions: [{
 *         conditionThreshold: {
 *             comparison: "COMPARISON_GT",
 *             duration: "60s",
 *             filter: pulumi.interpolate`metric.type="${withAlert.type}" AND resource.type="gce_instance"`,
 *         },
 *         displayName: "test condition",
 *     }],
 *     displayName: "metric-descriptor",
 * });
 * ```
 *
 * ## Import
 *
 * MetricDescriptor can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:monitoring/metricDescriptor:MetricDescriptor default {{name}}
 * ```
 */
class MetricDescriptor extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["launchStage"] = state ? state.launchStage : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["metricKind"] = state ? state.metricKind : undefined;
            inputs["monitoredResourceTypes"] = state ? state.monitoredResourceTypes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["unit"] = state ? state.unit : undefined;
            inputs["valueType"] = state ? state.valueType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.metricKind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricKind'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.valueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'valueType'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["launchStage"] = args ? args.launchStage : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["metricKind"] = args ? args.metricKind : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["unit"] = args ? args.unit : undefined;
            inputs["valueType"] = args ? args.valueType : undefined;
            inputs["monitoredResourceTypes"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(MetricDescriptor.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing MetricDescriptor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MetricDescriptor(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MetricDescriptor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricDescriptor.__pulumiType;
    }
}
exports.MetricDescriptor = MetricDescriptor;
/** @internal */
MetricDescriptor.__pulumiType = 'gcp:monitoring/metricDescriptor:MetricDescriptor';
//# sourceMappingURL=metricDescriptor.js.map