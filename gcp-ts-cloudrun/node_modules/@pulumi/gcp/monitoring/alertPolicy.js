"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A description of the conditions under which some aspect of your system is
 * considered to be "unhealthy" and the ways to notify people or services
 * about this state.
 *
 * To get more information about AlertPolicy, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.alertPolicies)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/alerts/)
 *
 * ## Example Usage
 * ### Monitoring Alert Policy Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const alertPolicy = new gcp.monitoring.AlertPolicy("alert_policy", {
 *     combiner: "OR",
 *     conditions: [{
 *         conditionThreshold: {
 *             aggregations: [{
 *                 alignmentPeriod: "60s",
 *                 perSeriesAligner: "ALIGN_RATE",
 *             }],
 *             comparison: "COMPARISON_GT",
 *             duration: "60s",
 *             filter: "metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"",
 *         },
 *         displayName: "test condition",
 *     }],
 *     displayName: "My Alert Policy",
 *     userLabels: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AlertPolicy can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:monitoring/alertPolicy:AlertPolicy default {{name}}
 * ```
 */
class AlertPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["combiner"] = state ? state.combiner : undefined;
            inputs["conditions"] = state ? state.conditions : undefined;
            inputs["creationRecords"] = state ? state.creationRecords : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["documentation"] = state ? state.documentation : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notificationChannels"] = state ? state.notificationChannels : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["userLabels"] = state ? state.userLabels : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.combiner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'combiner'");
            }
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            inputs["combiner"] = args ? args.combiner : undefined;
            inputs["conditions"] = args ? args.conditions : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["documentation"] = args ? args.documentation : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["notificationChannels"] = args ? args.notificationChannels : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["userLabels"] = args ? args.userLabels : undefined;
            inputs["creationRecords"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(AlertPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AlertPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AlertPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AlertPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertPolicy.__pulumiType;
    }
}
exports.AlertPolicy = AlertPolicy;
/** @internal */
AlertPolicy.__pulumiType = 'gcp:monitoring/alertPolicy:AlertPolicy';
//# sourceMappingURL=alertPolicy.js.map