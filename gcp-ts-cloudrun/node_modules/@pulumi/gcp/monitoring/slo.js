"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Service-Level Objective (SLO) describes the level of desired good
 * service. It consists of a service-level indicator (SLI), a performance
 * goal, and a period over which the objective is to be evaluated against
 * that goal. The SLO can use SLIs defined in a number of different manners.
 * Typical SLOs might include "99% of requests in each rolling week have
 * latency below 200 milliseconds" or "99.5% of requests in each calendar
 * month return successfully."
 *
 * To get more information about Slo, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives)
 * * How-to Guides
 *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
 *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
 *
 * ## Example Usage
 * ### Monitoring Slo Appengine
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const default = gcp.monitoring.getAppEngineService({
 *     moduleId: "default",
 * });
 * const appengSlo = new gcp.monitoring.Slo("appengSlo", {
 *     service: _default.then(_default => _default.serviceId),
 *     sloId: "ae-slo",
 *     displayName: "Test SLO for App Engine",
 *     goal: 0.9,
 *     calendarPeriod: "DAY",
 *     basicSli: {
 *         latency: {
 *             threshold: "1s",
 *         },
 *     },
 * });
 * ```
 * ### Monitoring Slo Request Based
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const customsrv = new gcp.monitoring.CustomService("customsrv", {
 *     serviceId: "custom-srv-request-slos",
 *     displayName: "My Custom Service",
 * });
 * const requestBasedSlo = new gcp.monitoring.Slo("requestBasedSlo", {
 *     service: customsrv.serviceId,
 *     sloId: "consumed-api-slo",
 *     displayName: "Test SLO with request based SLI (good total ratio)",
 *     goal: 0.9,
 *     rollingPeriodDays: 30,
 *     requestBasedSli: {
 *         distributionCut: {
 *             distributionFilter: "metric.type=\"serviceruntime.googleapis.com/api/request_latencies\" resource.type=\"api\"  ",
 *             range: {
 *                 max: 0.5,
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Slo can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:monitoring/slo:Slo default {{name}}
 * ```
 */
class Slo extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["basicSli"] = state ? state.basicSli : undefined;
            inputs["calendarPeriod"] = state ? state.calendarPeriod : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["goal"] = state ? state.goal : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["requestBasedSli"] = state ? state.requestBasedSli : undefined;
            inputs["rollingPeriodDays"] = state ? state.rollingPeriodDays : undefined;
            inputs["service"] = state ? state.service : undefined;
            inputs["sloId"] = state ? state.sloId : undefined;
            inputs["windowsBasedSli"] = state ? state.windowsBasedSli : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.goal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'goal'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            inputs["basicSli"] = args ? args.basicSli : undefined;
            inputs["calendarPeriod"] = args ? args.calendarPeriod : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["goal"] = args ? args.goal : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["requestBasedSli"] = args ? args.requestBasedSli : undefined;
            inputs["rollingPeriodDays"] = args ? args.rollingPeriodDays : undefined;
            inputs["service"] = args ? args.service : undefined;
            inputs["sloId"] = args ? args.sloId : undefined;
            inputs["windowsBasedSli"] = args ? args.windowsBasedSli : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Slo.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Slo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Slo(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Slo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Slo.__pulumiType;
    }
}
exports.Slo = Slo;
/** @internal */
Slo.__pulumiType = 'gcp:monitoring/slo:Slo';
//# sourceMappingURL=slo.js.map