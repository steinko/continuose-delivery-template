"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./alertPolicy"));
__export(require("./customService"));
__export(require("./dashboard"));
__export(require("./getAppEngineService"));
__export(require("./getClusterIstioService"));
__export(require("./getIstioCanonicalService"));
__export(require("./getMeshIstioService"));
__export(require("./getNotificationChannel"));
__export(require("./getSecretVersion"));
__export(require("./getUptimeCheckIPs"));
__export(require("./group"));
__export(require("./metricDescriptor"));
__export(require("./notificationChannel"));
__export(require("./slo"));
__export(require("./uptimeCheckConfig"));
// Import resources to register:
const alertPolicy_1 = require("./alertPolicy");
const customService_1 = require("./customService");
const dashboard_1 = require("./dashboard");
const group_1 = require("./group");
const metricDescriptor_1 = require("./metricDescriptor");
const notificationChannel_1 = require("./notificationChannel");
const slo_1 = require("./slo");
const uptimeCheckConfig_1 = require("./uptimeCheckConfig");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:monitoring/alertPolicy:AlertPolicy":
                return new alertPolicy_1.AlertPolicy(name, undefined, { urn });
            case "gcp:monitoring/customService:CustomService":
                return new customService_1.CustomService(name, undefined, { urn });
            case "gcp:monitoring/dashboard:Dashboard":
                return new dashboard_1.Dashboard(name, undefined, { urn });
            case "gcp:monitoring/group:Group":
                return new group_1.Group(name, undefined, { urn });
            case "gcp:monitoring/metricDescriptor:MetricDescriptor":
                return new metricDescriptor_1.MetricDescriptor(name, undefined, { urn });
            case "gcp:monitoring/notificationChannel:NotificationChannel":
                return new notificationChannel_1.NotificationChannel(name, undefined, { urn });
            case "gcp:monitoring/slo:Slo":
                return new slo_1.Slo(name, undefined, { urn });
            case "gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig":
                return new uptimeCheckConfig_1.UptimeCheckConfig(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "monitoring/alertPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/customService", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/dashboard", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/group", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/metricDescriptor", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/notificationChannel", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/slo", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/uptimeCheckConfig", _module);
//# sourceMappingURL=index.js.map