"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows creation and management of a Google Cloud Platform project.
 *
 * Projects created with this resource must be associated with an Organization.
 * See the [Organization documentation](https://cloud.google.com/resource-manager/docs/quickstarts) for more details.
 *
 * The user or service account that is running this provider when creating a `gcp.organizations.Project`
 * resource must have `roles/resourcemanager.projectCreator` on the specified organization. See the
 * [Access Control for Organizations Using IAM](https://cloud.google.com/resource-manager/docs/access-control-org)
 * doc for more information.
 *
 * > This resource reads the specified billing account on every provider apply and plan operation so you must have permissions on the specified billing account.
 *
 * To get more information about projects, see:
 *
 * * [API documentation](https://cloud.google.com/resource-manager/reference/rest/v1/projects)
 * * How-to Guides
 *     * [Creating and managing projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myProject = new gcp.organizations.Project("my_project", {
 *     orgId: "1234567",
 *     projectId: "your-project-id",
 * });
 * ```
 *
 * To create a project under a specific folder
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const department1 = new gcp.organizations.Folder("department1", {
 *     displayName: "Department 1",
 *     parent: "organizations/1234567",
 * });
 * const myProject_in_a_folder = new gcp.organizations.Project("myProject-in-a-folder", {
 *     projectId: "your-project-id",
 *     folderId: department1.name,
 * });
 * ```
 *
 * ## Import
 *
 * Projects can be imported using the `project_id`, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:projects/usageExportBucket:UsageExportBucket my_project your-project-id
 * ```
 */
class UsageExportBucket extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["bucketName"] = state ? state.bucketName : undefined;
            inputs["prefix"] = state ? state.prefix : undefined;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            inputs["bucketName"] = args ? args.bucketName : undefined;
            inputs["prefix"] = args ? args.prefix : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(UsageExportBucket.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing UsageExportBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UsageExportBucket(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UsageExportBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UsageExportBucket.__pulumiType;
    }
}
exports.UsageExportBucket = UsageExportBucket;
/** @internal */
UsageExportBucket.__pulumiType = 'gcp:projects/usageExportBucket:UsageExportBucket';
//# sourceMappingURL=usageExportBucket.js.map