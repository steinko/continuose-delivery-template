"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./accessLevel"));
__export(require("./accessLevelCondition"));
__export(require("./accessLevels"));
__export(require("./accessPolicy"));
__export(require("./gcpUserAccessBinding"));
__export(require("./servicePerimeter"));
__export(require("./servicePerimeterResource"));
__export(require("./servicePerimeters"));
// Import resources to register:
const accessLevel_1 = require("./accessLevel");
const accessLevelCondition_1 = require("./accessLevelCondition");
const accessLevels_1 = require("./accessLevels");
const accessPolicy_1 = require("./accessPolicy");
const gcpUserAccessBinding_1 = require("./gcpUserAccessBinding");
const servicePerimeter_1 = require("./servicePerimeter");
const servicePerimeterResource_1 = require("./servicePerimeterResource");
const servicePerimeters_1 = require("./servicePerimeters");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:accesscontextmanager/accessLevel:AccessLevel":
                return new accessLevel_1.AccessLevel(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessLevelCondition:AccessLevelCondition":
                return new accessLevelCondition_1.AccessLevelCondition(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessLevels:AccessLevels":
                return new accessLevels_1.AccessLevels(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessPolicy:AccessPolicy":
                return new accessPolicy_1.AccessPolicy(name, undefined, { urn });
            case "gcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBinding":
                return new gcpUserAccessBinding_1.GcpUserAccessBinding(name, undefined, { urn });
            case "gcp:accesscontextmanager/servicePerimeter:ServicePerimeter":
                return new servicePerimeter_1.ServicePerimeter(name, undefined, { urn });
            case "gcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource":
                return new servicePerimeterResource_1.ServicePerimeterResource(name, undefined, { urn });
            case "gcp:accesscontextmanager/servicePerimeters:ServicePerimeters":
                return new servicePerimeters_1.ServicePerimeters(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessLevel", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessLevelCondition", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessLevels", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/gcpUserAccessBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/servicePerimeter", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/servicePerimeterResource", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/servicePerimeters", _module);
//# sourceMappingURL=index.js.map