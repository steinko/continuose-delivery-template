"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows configuring a single access level condition to be appended to an access level's conditions.
 * This resource is intended to be used in cases where it is not possible to compile a full list
 * of conditions to include in a `gcp.accesscontextmanager.AccessLevel` resource,
 * to enable them to be added separately.
 *
 * > **Note:** If this resource is used alongside a `gcp.accesscontextmanager.AccessLevel` resource,
 * the access level resource must have a `lifecycle` block with `ignoreChanges = [basic[0].conditions]` so
 * they don't fight over which service accounts should be included.
 *
 * To get more information about AccessLevelCondition, see:
 *
 * * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)
 * * How-to Guides
 *     * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)
 *
 * > **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
 * you must specify a `billingProject` and set `userProjectOverride` to true
 * in the provider configuration. Otherwise the ACM API will return a 403 error.
 * Your account must have the `serviceusage.services.use` permission on the
 * `billingProject` you defined.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * This resource does not support import.
 */
class AccessLevelCondition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accessLevel"] = state ? state.accessLevel : undefined;
            inputs["devicePolicy"] = state ? state.devicePolicy : undefined;
            inputs["ipSubnetworks"] = state ? state.ipSubnetworks : undefined;
            inputs["members"] = state ? state.members : undefined;
            inputs["negate"] = state ? state.negate : undefined;
            inputs["regions"] = state ? state.regions : undefined;
            inputs["requiredAccessLevels"] = state ? state.requiredAccessLevels : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLevel'");
            }
            inputs["accessLevel"] = args ? args.accessLevel : undefined;
            inputs["devicePolicy"] = args ? args.devicePolicy : undefined;
            inputs["ipSubnetworks"] = args ? args.ipSubnetworks : undefined;
            inputs["members"] = args ? args.members : undefined;
            inputs["negate"] = args ? args.negate : undefined;
            inputs["regions"] = args ? args.regions : undefined;
            inputs["requiredAccessLevels"] = args ? args.requiredAccessLevels : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(AccessLevelCondition.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AccessLevelCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccessLevelCondition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccessLevelCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessLevelCondition.__pulumiType;
    }
}
exports.AccessLevelCondition = AccessLevelCondition;
/** @internal */
AccessLevelCondition.__pulumiType = 'gcp:accesscontextmanager/accessLevelCondition:AccessLevelCondition';
//# sourceMappingURL=accessLevelCondition.js.map