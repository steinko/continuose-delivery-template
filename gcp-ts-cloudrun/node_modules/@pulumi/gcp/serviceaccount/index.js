"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./account"));
__export(require("./getAccount"));
__export(require("./getAccountAccessToken"));
__export(require("./getAccountIdToken"));
__export(require("./getAccountKey"));
__export(require("./iambinding"));
__export(require("./iammember"));
__export(require("./iampolicy"));
__export(require("./key"));
// Import resources to register:
const account_1 = require("./account");
const iambinding_1 = require("./iambinding");
const iammember_1 = require("./iammember");
const iampolicy_1 = require("./iampolicy");
const key_1 = require("./key");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:serviceAccount/account:Account":
                return new account_1.Account(name, undefined, { urn });
            case "gcp:serviceAccount/iAMBinding:IAMBinding":
                return new iambinding_1.IAMBinding(name, undefined, { urn });
            case "gcp:serviceAccount/iAMMember:IAMMember":
                return new iammember_1.IAMMember(name, undefined, { urn });
            case "gcp:serviceAccount/iAMPolicy:IAMPolicy":
                return new iampolicy_1.IAMPolicy(name, undefined, { urn });
            case "gcp:serviceAccount/key:Key":
                return new key_1.Key(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/account", _module);
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/iAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "serviceAccount/key", _module);
//# sourceMappingURL=index.js.map