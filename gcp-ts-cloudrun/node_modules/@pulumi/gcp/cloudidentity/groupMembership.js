"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Membership defines a relationship between a Group and an entity belonging to that Group, referred to as a "member".
 *
 * To get more information about GroupMembership, see:
 *
 * * [API documentation](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/identity/docs/how-to/memberships-google-groups)
 *
 * > **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
 * you must specify a `billingProject` and set `userProjectOverride` to true
 * in the provider configuration. Otherwise the Cloud Identity API will return a 403 error.
 * Your account must have the `serviceusage.services.use` permission on the
 * `billingProject` you defined.
 *
 * ## Example Usage
 * ### Cloud Identity Group Membership User
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const group = new gcp.cloudidentity.Group("group", {
 *     displayName: "my-identity-group",
 *     parent: "customers/A01b123xz",
 *     groupKey: {
 *         id: "my-identity-group@example.com",
 *     },
 *     labels: {
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     },
 * });
 * const cloudIdentityGroupMembershipBasic = new gcp.cloudidentity.GroupMembership("cloudIdentityGroupMembershipBasic", {
 *     group: group.id,
 *     preferredMemberKey: {
 *         id: "cloud_identity_user@example.com",
 *     },
 *     roles: [
 *         {
 *             name: "MEMBER",
 *         },
 *         {
 *             name: "MANAGER",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * GroupMembership can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudidentity/groupMembership:GroupMembership default {{name}}
 * ```
 */
class GroupMembership extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["group"] = state ? state.group : undefined;
            inputs["memberKey"] = state ? state.memberKey : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preferredMemberKey"] = state ? state.preferredMemberKey : undefined;
            inputs["roles"] = state ? state.roles : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            inputs["group"] = args ? args.group : undefined;
            inputs["memberKey"] = args ? args.memberKey : undefined;
            inputs["preferredMemberKey"] = args ? args.preferredMemberKey : undefined;
            inputs["roles"] = args ? args.roles : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(GroupMembership.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing GroupMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GroupMembership(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GroupMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMembership.__pulumiType;
    }
}
exports.GroupMembership = GroupMembership;
/** @internal */
GroupMembership.__pulumiType = 'gcp:cloudidentity/groupMembership:GroupMembership';
//# sourceMappingURL=groupMembership.js.map