"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Describes a composite index for Cloud Datastore.
 *
 * To get more information about Index, see:
 *
 * * [API documentation](https://cloud.google.com/datastore/docs/reference/admin/rest/v1/projects.indexes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/datastore/docs/concepts/indexes)
 *
 * > **Warning:** This resource creates a Datastore Index on a project that has already
 * enabled a Datastore-compatible database. If you haven't already enabled
 * one, you can create a `gcp.appengine.Application` resource with
 * `databaseType` set to `"CLOUD_DATASTORE_COMPATIBILITY"` to do so. Your
 * Datastore location will be the same as the App Engine location specified.
 *
 * ## Example Usage
 * ### Datastore Index
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultDataStoreIndex = new gcp.datastore.DataStoreIndex("default", {
 *     kind: "foo",
 *     properties: [
 *         {
 *             direction: "ASCENDING",
 *             name: "property_a",
 *         },
 *         {
 *             direction: "ASCENDING",
 *             name: "property_b",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Index can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datastore/dataStoreIndex:DataStoreIndex default projects/{{project}}/indexes/{{index_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:datastore/dataStoreIndex:DataStoreIndex default {{project}}/{{index_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:datastore/dataStoreIndex:DataStoreIndex default {{index_id}}
 * ```
 */
class DataStoreIndex extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["ancestor"] = state ? state.ancestor : undefined;
            inputs["indexId"] = state ? state.indexId : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["properties"] = state ? state.properties : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            inputs["ancestor"] = args ? args.ancestor : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["properties"] = args ? args.properties : undefined;
            inputs["indexId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(DataStoreIndex.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DataStoreIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataStoreIndex(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataStoreIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataStoreIndex.__pulumiType;
    }
}
exports.DataStoreIndex = DataStoreIndex;
/** @internal */
DataStoreIndex.__pulumiType = 'gcp:datastore/dataStoreIndex:DataStoreIndex';
//# sourceMappingURL=dataStoreIndex.js.map