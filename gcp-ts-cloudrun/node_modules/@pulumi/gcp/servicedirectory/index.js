"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./endpoint"));
__export(require("./namespace"));
__export(require("./namespaceIamBinding"));
__export(require("./namespaceIamMember"));
__export(require("./namespaceIamPolicy"));
__export(require("./service"));
__export(require("./serviceIamBinding"));
__export(require("./serviceIamMember"));
__export(require("./serviceIamPolicy"));
// Import resources to register:
const endpoint_1 = require("./endpoint");
const namespace_1 = require("./namespace");
const namespaceIamBinding_1 = require("./namespaceIamBinding");
const namespaceIamMember_1 = require("./namespaceIamMember");
const namespaceIamPolicy_1 = require("./namespaceIamPolicy");
const service_1 = require("./service");
const serviceIamBinding_1 = require("./serviceIamBinding");
const serviceIamMember_1 = require("./serviceIamMember");
const serviceIamPolicy_1 = require("./serviceIamPolicy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:servicedirectory/endpoint:Endpoint":
                return new endpoint_1.Endpoint(name, undefined, { urn });
            case "gcp:servicedirectory/namespace:Namespace":
                return new namespace_1.Namespace(name, undefined, { urn });
            case "gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding":
                return new namespaceIamBinding_1.NamespaceIamBinding(name, undefined, { urn });
            case "gcp:servicedirectory/namespaceIamMember:NamespaceIamMember":
                return new namespaceIamMember_1.NamespaceIamMember(name, undefined, { urn });
            case "gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy":
                return new namespaceIamPolicy_1.NamespaceIamPolicy(name, undefined, { urn });
            case "gcp:servicedirectory/service:Service":
                return new service_1.Service(name, undefined, { urn });
            case "gcp:servicedirectory/serviceIamBinding:ServiceIamBinding":
                return new serviceIamBinding_1.ServiceIamBinding(name, undefined, { urn });
            case "gcp:servicedirectory/serviceIamMember:ServiceIamMember":
                return new serviceIamMember_1.ServiceIamMember(name, undefined, { urn });
            case "gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy":
                return new serviceIamPolicy_1.ServiceIamPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/endpoint", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespace", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespaceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespaceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/namespaceIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/service", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/serviceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/serviceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "servicedirectory/serviceIamPolicy", _module);
//# sourceMappingURL=index.js.map