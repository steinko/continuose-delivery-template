"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Cloud AI Platform Notebook instance.
 *
 * > **Note:** Due to limitations of the Notebooks Instance API, many fields
 * in this resource do not properly detect drift. These fields will also not
 * appear in state once imported.
 *
 * To get more information about Instance, see:
 *
 * * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
 *
 * ## Example Usage
 * ### Notebook Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.notebooks.Instance("instance", {
 *     location: "us-west1-a",
 *     machineType: "e2-medium",
 *     vmImage: {
 *         imageFamily: "tf-latest-cpu",
 *         project: "deeplearning-platform-release",
 *     },
 * });
 * ```
 * ### Notebook Instance Basic Container
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.notebooks.Instance("instance", {
 *     containerImage: {
 *         repository: "gcr.io/deeplearning-platform-release/base-cpu",
 *         tag: "latest",
 *     },
 *     location: "us-west1-a",
 *     machineType: "e2-medium",
 *     metadata: {
 *         "proxy-mode": "service_account",
 *     },
 * });
 * ```
 * ### Notebook Instance Basic Gpu
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.notebooks.Instance("instance", {
 *     acceleratorConfig: {
 *         coreCount: 1,
 *         type: "NVIDIA_TESLA_T4",
 *     },
 *     installGpuDriver: true,
 *     location: "us-west1-a",
 *     machineType: "n1-standard-1", // can't be e2 because of accelerator
 *     vmImage: {
 *         imageFamily: "tf-latest-gpu",
 *         project: "deeplearning-platform-release",
 *     },
 * });
 * ```
 * ### Notebook Instance Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myNetwork = gcp.compute.getNetwork({
 *     name: "default",
 * });
 * const mySubnetwork = gcp.compute.getSubnetwork({
 *     name: "default",
 *     region: "us-central1",
 * });
 * const instance = new gcp.notebooks.Instance("instance", {
 *     location: "us-central1-a",
 *     machineType: "e2-medium",
 *     vmImage: {
 *         project: "deeplearning-platform-release",
 *         imageFamily: "tf-latest-cpu",
 *     },
 *     instanceOwners: ["admin@hashicorptest.com"],
 *     serviceAccount: "emailAddress:my@service-account.com",
 *     installGpuDriver: true,
 *     bootDiskType: "PD_SSD",
 *     bootDiskSizeGb: 110,
 *     noPublicIp: true,
 *     noProxyAccess: true,
 *     network: myNetwork.then(myNetwork => myNetwork.id),
 *     subnet: mySubnetwork.then(mySubnetwork => mySubnetwork.id),
 *     labels: {
 *         k: "val",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Instance can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:notebooks/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:notebooks/instance:Instance default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:notebooks/instance:Instance default {{location}}/{{name}}
 * ```
 */
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["acceleratorConfig"] = state ? state.acceleratorConfig : undefined;
            inputs["bootDiskSizeGb"] = state ? state.bootDiskSizeGb : undefined;
            inputs["bootDiskType"] = state ? state.bootDiskType : undefined;
            inputs["containerImage"] = state ? state.containerImage : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["customGpuDriverPath"] = state ? state.customGpuDriverPath : undefined;
            inputs["dataDiskSizeGb"] = state ? state.dataDiskSizeGb : undefined;
            inputs["dataDiskType"] = state ? state.dataDiskType : undefined;
            inputs["diskEncryption"] = state ? state.diskEncryption : undefined;
            inputs["installGpuDriver"] = state ? state.installGpuDriver : undefined;
            inputs["instanceOwners"] = state ? state.instanceOwners : undefined;
            inputs["kmsKey"] = state ? state.kmsKey : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["machineType"] = state ? state.machineType : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["noProxyAccess"] = state ? state.noProxyAccess : undefined;
            inputs["noPublicIp"] = state ? state.noPublicIp : undefined;
            inputs["noRemoveDataDisk"] = state ? state.noRemoveDataDisk : undefined;
            inputs["postStartupScript"] = state ? state.postStartupScript : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["proxyUri"] = state ? state.proxyUri : undefined;
            inputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            inputs["serviceAccountScopes"] = state ? state.serviceAccountScopes : undefined;
            inputs["shieldedInstanceConfig"] = state ? state.shieldedInstanceConfig : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["subnet"] = state ? state.subnet : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["updateTime"] = state ? state.updateTime : undefined;
            inputs["vmImage"] = state ? state.vmImage : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.machineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            inputs["acceleratorConfig"] = args ? args.acceleratorConfig : undefined;
            inputs["bootDiskSizeGb"] = args ? args.bootDiskSizeGb : undefined;
            inputs["bootDiskType"] = args ? args.bootDiskType : undefined;
            inputs["containerImage"] = args ? args.containerImage : undefined;
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["customGpuDriverPath"] = args ? args.customGpuDriverPath : undefined;
            inputs["dataDiskSizeGb"] = args ? args.dataDiskSizeGb : undefined;
            inputs["dataDiskType"] = args ? args.dataDiskType : undefined;
            inputs["diskEncryption"] = args ? args.diskEncryption : undefined;
            inputs["installGpuDriver"] = args ? args.installGpuDriver : undefined;
            inputs["instanceOwners"] = args ? args.instanceOwners : undefined;
            inputs["kmsKey"] = args ? args.kmsKey : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["machineType"] = args ? args.machineType : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["noProxyAccess"] = args ? args.noProxyAccess : undefined;
            inputs["noPublicIp"] = args ? args.noPublicIp : undefined;
            inputs["noRemoveDataDisk"] = args ? args.noRemoveDataDisk : undefined;
            inputs["postStartupScript"] = args ? args.postStartupScript : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            inputs["serviceAccountScopes"] = args ? args.serviceAccountScopes : undefined;
            inputs["shieldedInstanceConfig"] = args ? args.shieldedInstanceConfig : undefined;
            inputs["subnet"] = args ? args.subnet : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["updateTime"] = args ? args.updateTime : undefined;
            inputs["vmImage"] = args ? args.vmImage : undefined;
            inputs["proxyUri"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'gcp:notebooks/instance:Instance';
//# sourceMappingURL=instance.js.map