"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Logs-based metric can also be used to extract values from logs and create a a distribution
 * of the values. The distribution records the statistics of the extracted values along with
 * an optional histogram of the values as specified by the bucket options.
 *
 * To get more information about Metric, see:
 *
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics/create)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/logging/docs/apis)
 *
 * ## Example Usage
 * ### Logging Metric Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const loggingMetric = new gcp.logging.Metric("logging_metric", {
 *     bucketOptions: {
 *         linearBuckets: {
 *             numFiniteBuckets: 3,
 *             offset: 1,
 *             width: 1,
 *         },
 *     },
 *     filter: "resource.type=gae_app AND severity>=ERROR",
 *     labelExtractors: {
 *         mass: "EXTRACT(jsonPayload.request)",
 *         sku: "EXTRACT(jsonPayload.id)",
 *     },
 *     metricDescriptor: {
 *         displayName: "My metric",
 *         labels: [
 *             {
 *                 description: "amount of matter",
 *                 key: "mass",
 *                 valueType: "STRING",
 *             },
 *             {
 *                 description: "Identifying number for item",
 *                 key: "sku",
 *                 valueType: "INT64",
 *             },
 *         ],
 *         metricKind: "DELTA",
 *         unit: "1",
 *         valueType: "DISTRIBUTION",
 *     },
 *     valueExtractor: "EXTRACT(jsonPayload.request)",
 * });
 * ```
 * ### Logging Metric Counter Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const loggingMetric = new gcp.logging.Metric("logging_metric", {
 *     filter: "resource.type=gae_app AND severity>=ERROR",
 *     metricDescriptor: {
 *         metricKind: "DELTA",
 *         valueType: "INT64",
 *     },
 * });
 * ```
 * ### Logging Metric Counter Labels
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const loggingMetric = new gcp.logging.Metric("logging_metric", {
 *     filter: "resource.type=gae_app AND severity>=ERROR",
 *     labelExtractors: {
 *         mass: "EXTRACT(jsonPayload.request)",
 *     },
 *     metricDescriptor: {
 *         labels: [{
 *             description: "amount of matter",
 *             key: "mass",
 *             valueType: "STRING",
 *         }],
 *         metricKind: "DELTA",
 *         valueType: "INT64",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Metric can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:logging/metric:Metric default {{project}} {{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:logging/metric:Metric default {{name}}
 * ```
 */
class Metric extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["bucketOptions"] = state ? state.bucketOptions : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["filter"] = state ? state.filter : undefined;
            inputs["labelExtractors"] = state ? state.labelExtractors : undefined;
            inputs["metricDescriptor"] = state ? state.metricDescriptor : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["valueExtractor"] = state ? state.valueExtractor : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.metricDescriptor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricDescriptor'");
            }
            inputs["bucketOptions"] = args ? args.bucketOptions : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["labelExtractors"] = args ? args.labelExtractors : undefined;
            inputs["metricDescriptor"] = args ? args.metricDescriptor : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["valueExtractor"] = args ? args.valueExtractor : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Metric.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Metric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Metric(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Metric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metric.__pulumiType;
    }
}
exports.Metric = Metric;
/** @internal */
Metric.__pulumiType = 'gcp:logging/metric:Metric';
//# sourceMappingURL=metric.js.map