import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../types";
/**
 * Get a global forwarding rule within GCE from its name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_forwarding_rule = pulumi.output(gcp.compute.getGlobalForwardingRule({
 *     name: "forwarding-rule-global",
 * }, { async: true }));
 * ```
 */
export declare function getGlobalForwardingRule(args: GetGlobalForwardingRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetGlobalForwardingRuleResult>;
/**
 * A collection of arguments for invoking getGlobalForwardingRule.
 */
export interface GetGlobalForwardingRuleArgs {
    /**
     * The name of the global forwarding rule.
     */
    readonly name: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: string;
}
/**
 * A collection of values returned by getGlobalForwardingRule.
 */
export interface GetGlobalForwardingRuleResult {
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddress: string;
    readonly ipProtocol: string;
    readonly ipVersion: string;
    readonly labelFingerprint: string;
    readonly labels: {
        [key: string]: string;
    };
    readonly loadBalancingScheme: string;
    readonly metadataFilters: outputs.compute.GetGlobalForwardingRuleMetadataFilter[];
    readonly name: string;
    readonly network: string;
    readonly portRange: string;
    readonly project?: string;
    readonly selfLink: string;
    readonly target: string;
}
