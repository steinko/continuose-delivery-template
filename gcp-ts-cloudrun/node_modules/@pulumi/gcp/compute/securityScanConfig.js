"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A ScanConfig resource contains the configurations to launch a scan.
 *
 * To get more information about ScanConfig, see:
 *
 * * [API documentation](https://cloud.google.com/security-scanner/docs/reference/rest/v1beta/projects.scanConfigs)
 * * How-to Guides
 *     * [Using Cloud Security Scanner](https://cloud.google.com/security-scanner/docs/scanning)
 *
 * > **Warning:** All arguments including `authentication.google_account.password` and `authentication.custom_account.password` will be stored in the raw
 * state as plain-text.[Read more about secrets in state](https://www.pulumi.com/docs/intro/concepts/programming-model/#secrets)
 *
 * ## Example Usage
 * ### Scan Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const scannerStaticIp = new gcp.compute.Address("scannerStaticIp", {}, {
 *     provider: google_beta,
 * });
 * const scan_config = new gcp.compute.SecurityScanConfig("scan-config", {
 *     displayName: "scan-config",
 *     startingUrls: [pulumi.interpolate`http://${scannerStaticIp.address}`],
 *     targetPlatforms: ["COMPUTE"],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * ScanConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/securityScanConfig:SecurityScanConfig default projects/{{project}}/scanConfigs/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/securityScanConfig:SecurityScanConfig default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/securityScanConfig:SecurityScanConfig default {{name}}
 * ```
 */
class SecurityScanConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["authentication"] = state ? state.authentication : undefined;
            inputs["blacklistPatterns"] = state ? state.blacklistPatterns : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["exportToSecurityCommandCenter"] = state ? state.exportToSecurityCommandCenter : undefined;
            inputs["maxQps"] = state ? state.maxQps : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["startingUrls"] = state ? state.startingUrls : undefined;
            inputs["targetPlatforms"] = state ? state.targetPlatforms : undefined;
            inputs["userAgent"] = state ? state.userAgent : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.startingUrls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startingUrls'");
            }
            inputs["authentication"] = args ? args.authentication : undefined;
            inputs["blacklistPatterns"] = args ? args.blacklistPatterns : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["exportToSecurityCommandCenter"] = args ? args.exportToSecurityCommandCenter : undefined;
            inputs["maxQps"] = args ? args.maxQps : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["startingUrls"] = args ? args.startingUrls : undefined;
            inputs["targetPlatforms"] = args ? args.targetPlatforms : undefined;
            inputs["userAgent"] = args ? args.userAgent : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SecurityScanConfig.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SecurityScanConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecurityScanConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SecurityScanConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityScanConfig.__pulumiType;
    }
}
exports.SecurityScanConfig = SecurityScanConfig;
/** @internal */
SecurityScanConfig.__pulumiType = 'gcp:compute/securityScanConfig:SecurityScanConfig';
//# sourceMappingURL=securityScanConfig.js.map