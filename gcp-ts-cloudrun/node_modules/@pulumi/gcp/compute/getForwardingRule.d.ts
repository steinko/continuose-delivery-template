import * as pulumi from "@pulumi/pulumi";
/**
 * Get a forwarding rule within GCE from its name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_forwarding_rule = pulumi.output(gcp.compute.getForwardingRule({
 *     name: "forwarding-rule-us-east1",
 * }, { async: true }));
 * ```
 */
export declare function getForwardingRule(args: GetForwardingRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetForwardingRuleResult>;
/**
 * A collection of arguments for invoking getForwardingRule.
 */
export interface GetForwardingRuleArgs {
    /**
     * The name of the forwarding rule.
     */
    readonly name: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: string;
    /**
     * The region in which the resource belongs. If it
     * is not provided, the project region is used.
     */
    readonly region?: string;
}
/**
 * A collection of values returned by getForwardingRule.
 */
export interface GetForwardingRuleResult {
    readonly allPorts: boolean;
    readonly allowGlobalAccess: boolean;
    readonly backendService: string;
    readonly creationTimestamp: string;
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddress: string;
    readonly ipProtocol: string;
    readonly isMirroringCollector: boolean;
    readonly labelFingerprint: string;
    readonly labels: {
        [key: string]: string;
    };
    readonly loadBalancingScheme: string;
    readonly name: string;
    readonly network: string;
    readonly networkTier: string;
    readonly portRange: string;
    readonly ports: string[];
    readonly project?: string;
    readonly region?: string;
    readonly selfLink: string;
    readonly serviceLabel: string;
    readonly serviceName: string;
    readonly subnetwork: string;
    readonly target: string;
}
