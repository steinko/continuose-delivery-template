"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Enables the Google Compute Engine
 * [Shared VPC](https://cloud.google.com/compute/docs/shared-vpc)
 * feature for a project, assigning it as a Shared VPC service project associated
 * with a given host project.
 *
 * For more information, see,
 * [the Project API documentation](https://cloud.google.com/compute/docs/reference/latest/projects),
 * where the Shared VPC feature is referred to by its former name "XPN".
 *
 * > **Note:** If Shared VPC Admin role is set at the folder level, use the google-beta provider. The google provider only supports this permission at project or organizational level currently. [[0]](https://cloud.google.com/vpc/docs/provisioning-shared-vpc#enable-shared-vpc-host)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const service1 = new gcp.compute.SharedVPCServiceProject("service1", {
 *     hostProject: "host-project-id",
 *     serviceProject: "service-project-id-1",
 * });
 * ```
 *
 * For a complete Shared VPC example with both host and service projects, see
 * [`gcp.compute.SharedVPCHostProject`](https://www.terraform.io/docs/providers/google/r/compute_shared_vpc_host_project.html).
 *
 * ## Import
 *
 * Google Compute Engine Shared VPC service project feature can be imported using the `host_project` and `service_project`, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject service1 host-project-id/service-project-id-1
 * ```
 */
class SharedVPCServiceProject extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["hostProject"] = state ? state.hostProject : undefined;
            inputs["serviceProject"] = state ? state.serviceProject : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.hostProject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostProject'");
            }
            if ((!args || args.serviceProject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceProject'");
            }
            inputs["hostProject"] = args ? args.hostProject : undefined;
            inputs["serviceProject"] = args ? args.serviceProject : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SharedVPCServiceProject.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SharedVPCServiceProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SharedVPCServiceProject(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SharedVPCServiceProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedVPCServiceProject.__pulumiType;
    }
}
exports.SharedVPCServiceProject = SharedVPCServiceProject;
/** @internal */
SharedVPCServiceProject.__pulumiType = 'gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject';
//# sourceMappingURL=sharedVPCServiceProject.js.map