"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./address"));
__export(require("./attachedDisk"));
__export(require("./autoscalar"));
__export(require("./autoscaler"));
__export(require("./backendBucket"));
__export(require("./backendBucketSignedUrlKey"));
__export(require("./backendService"));
__export(require("./backendServiceSignedUrlKey"));
__export(require("./disk"));
__export(require("./diskIamBinding"));
__export(require("./diskIamMember"));
__export(require("./diskIamPolicy"));
__export(require("./diskResourcePolicyAttachment"));
__export(require("./externalVpnGateway"));
__export(require("./firewall"));
__export(require("./forwardingRule"));
__export(require("./getAddress"));
__export(require("./getBackendBucket"));
__export(require("./getBackendService"));
__export(require("./getCertificate"));
__export(require("./getDefaultServiceAccount"));
__export(require("./getForwardingRule"));
__export(require("./getGlobalAddress"));
__export(require("./getGlobalForwardingRule"));
__export(require("./getHcVpnGateway"));
__export(require("./getHealthCheck"));
__export(require("./getImage"));
__export(require("./getInstance"));
__export(require("./getInstanceGroup"));
__export(require("./getInstanceSerialPort"));
__export(require("./getInstanceTemplate"));
__export(require("./getLBIPRanges"));
__export(require("./getNetblockIPRanges"));
__export(require("./getNetwork"));
__export(require("./getNetworkEndpointGroup"));
__export(require("./getNodeTypes"));
__export(require("./getRegionInstanceGroup"));
__export(require("./getRegionSslCertificate"));
__export(require("./getRegions"));
__export(require("./getResourcePolicy"));
__export(require("./getRouter"));
__export(require("./getSSLPolicy"));
__export(require("./getSubnetwork"));
__export(require("./getVPNGateway"));
__export(require("./getZones"));
__export(require("./globalAddress"));
__export(require("./globalForwardingRule"));
__export(require("./globalNetworkEndpoint"));
__export(require("./globalNetworkEndpointGroup"));
__export(require("./haVpnGateway"));
__export(require("./healthCheck"));
__export(require("./httpHealthCheck"));
__export(require("./httpsHealthCheck"));
__export(require("./image"));
__export(require("./imageIamBinding"));
__export(require("./imageIamMember"));
__export(require("./imageIamPolicy"));
__export(require("./instance"));
__export(require("./instanceFromMachineImage"));
__export(require("./instanceFromTemplate"));
__export(require("./instanceGroup"));
__export(require("./instanceGroupManager"));
__export(require("./instanceGroupNamedPort"));
__export(require("./instanceIAMBinding"));
__export(require("./instanceIAMMember"));
__export(require("./instanceIAMPolicy"));
__export(require("./instanceTemplate"));
__export(require("./interconnectAttachment"));
__export(require("./machineImage"));
__export(require("./machineImageIamBinding"));
__export(require("./machineImageIamMember"));
__export(require("./machineImageIamPolicy"));
__export(require("./managedSslCertificate"));
__export(require("./mangedSslCertificate"));
__export(require("./network"));
__export(require("./networkEndpoint"));
__export(require("./networkEndpointGroup"));
__export(require("./networkPeering"));
__export(require("./networkPeeringRoutesConfig"));
__export(require("./nodeGroup"));
__export(require("./nodeTemplate"));
__export(require("./organizationSecurityPolicy"));
__export(require("./organizationSecurityPolicyAssociation"));
__export(require("./organizationSecurityPolicyRule"));
__export(require("./packetMirroring"));
__export(require("./perInstanceConfig"));
__export(require("./projectDefaultNetworkTier"));
__export(require("./projectMetadata"));
__export(require("./projectMetadataItem"));
__export(require("./regionAutoscaler"));
__export(require("./regionBackendService"));
__export(require("./regionDisk"));
__export(require("./regionDiskIamBinding"));
__export(require("./regionDiskIamMember"));
__export(require("./regionDiskIamPolicy"));
__export(require("./regionDiskResourcePolicyAttachment"));
__export(require("./regionHealthCheck"));
__export(require("./regionInstanceGroupManager"));
__export(require("./regionNetworkEndpointGroup"));
__export(require("./regionPerInstanceConfig"));
__export(require("./regionSslCertificate"));
__export(require("./regionTargetHttpProxy"));
__export(require("./regionTargetHttpsProxy"));
__export(require("./regionUrlMap"));
__export(require("./reservation"));
__export(require("./resourcePolicy"));
__export(require("./route"));
__export(require("./router"));
__export(require("./routerInterface"));
__export(require("./routerNat"));
__export(require("./routerPeer"));
__export(require("./securityPolicy"));
__export(require("./securityScanConfig"));
__export(require("./sharedVPCHostProject"));
__export(require("./sharedVPCServiceProject"));
__export(require("./snapshot"));
__export(require("./sslcertificate"));
__export(require("./sslpolicy"));
__export(require("./subnetwork"));
__export(require("./subnetworkIAMBinding"));
__export(require("./subnetworkIAMMember"));
__export(require("./subnetworkIAMPolicy"));
__export(require("./targetGrpcProxy"));
__export(require("./targetHttpProxy"));
__export(require("./targetHttpsProxy"));
__export(require("./targetInstance"));
__export(require("./targetPool"));
__export(require("./targetSSLProxy"));
__export(require("./targetTCPProxy"));
__export(require("./urlmap"));
__export(require("./vpngateway"));
__export(require("./vpntunnel"));
// Import resources to register:
const address_1 = require("./address");
const attachedDisk_1 = require("./attachedDisk");
const autoscalar_1 = require("./autoscalar");
const autoscaler_1 = require("./autoscaler");
const backendBucket_1 = require("./backendBucket");
const backendBucketSignedUrlKey_1 = require("./backendBucketSignedUrlKey");
const backendService_1 = require("./backendService");
const backendServiceSignedUrlKey_1 = require("./backendServiceSignedUrlKey");
const disk_1 = require("./disk");
const diskIamBinding_1 = require("./diskIamBinding");
const diskIamMember_1 = require("./diskIamMember");
const diskIamPolicy_1 = require("./diskIamPolicy");
const diskResourcePolicyAttachment_1 = require("./diskResourcePolicyAttachment");
const externalVpnGateway_1 = require("./externalVpnGateway");
const firewall_1 = require("./firewall");
const forwardingRule_1 = require("./forwardingRule");
const globalAddress_1 = require("./globalAddress");
const globalForwardingRule_1 = require("./globalForwardingRule");
const globalNetworkEndpoint_1 = require("./globalNetworkEndpoint");
const globalNetworkEndpointGroup_1 = require("./globalNetworkEndpointGroup");
const haVpnGateway_1 = require("./haVpnGateway");
const healthCheck_1 = require("./healthCheck");
const httpHealthCheck_1 = require("./httpHealthCheck");
const httpsHealthCheck_1 = require("./httpsHealthCheck");
const image_1 = require("./image");
const imageIamBinding_1 = require("./imageIamBinding");
const imageIamMember_1 = require("./imageIamMember");
const imageIamPolicy_1 = require("./imageIamPolicy");
const instance_1 = require("./instance");
const instanceFromMachineImage_1 = require("./instanceFromMachineImage");
const instanceFromTemplate_1 = require("./instanceFromTemplate");
const instanceGroup_1 = require("./instanceGroup");
const instanceGroupManager_1 = require("./instanceGroupManager");
const instanceGroupNamedPort_1 = require("./instanceGroupNamedPort");
const instanceIAMBinding_1 = require("./instanceIAMBinding");
const instanceIAMMember_1 = require("./instanceIAMMember");
const instanceIAMPolicy_1 = require("./instanceIAMPolicy");
const instanceTemplate_1 = require("./instanceTemplate");
const interconnectAttachment_1 = require("./interconnectAttachment");
const machineImage_1 = require("./machineImage");
const machineImageIamBinding_1 = require("./machineImageIamBinding");
const machineImageIamMember_1 = require("./machineImageIamMember");
const machineImageIamPolicy_1 = require("./machineImageIamPolicy");
const managedSslCertificate_1 = require("./managedSslCertificate");
const mangedSslCertificate_1 = require("./mangedSslCertificate");
const network_1 = require("./network");
const networkEndpoint_1 = require("./networkEndpoint");
const networkEndpointGroup_1 = require("./networkEndpointGroup");
const networkPeering_1 = require("./networkPeering");
const networkPeeringRoutesConfig_1 = require("./networkPeeringRoutesConfig");
const nodeGroup_1 = require("./nodeGroup");
const nodeTemplate_1 = require("./nodeTemplate");
const organizationSecurityPolicy_1 = require("./organizationSecurityPolicy");
const organizationSecurityPolicyAssociation_1 = require("./organizationSecurityPolicyAssociation");
const organizationSecurityPolicyRule_1 = require("./organizationSecurityPolicyRule");
const packetMirroring_1 = require("./packetMirroring");
const perInstanceConfig_1 = require("./perInstanceConfig");
const projectDefaultNetworkTier_1 = require("./projectDefaultNetworkTier");
const projectMetadata_1 = require("./projectMetadata");
const projectMetadataItem_1 = require("./projectMetadataItem");
const regionAutoscaler_1 = require("./regionAutoscaler");
const regionBackendService_1 = require("./regionBackendService");
const regionDisk_1 = require("./regionDisk");
const regionDiskIamBinding_1 = require("./regionDiskIamBinding");
const regionDiskIamMember_1 = require("./regionDiskIamMember");
const regionDiskIamPolicy_1 = require("./regionDiskIamPolicy");
const regionDiskResourcePolicyAttachment_1 = require("./regionDiskResourcePolicyAttachment");
const regionHealthCheck_1 = require("./regionHealthCheck");
const regionInstanceGroupManager_1 = require("./regionInstanceGroupManager");
const regionNetworkEndpointGroup_1 = require("./regionNetworkEndpointGroup");
const regionPerInstanceConfig_1 = require("./regionPerInstanceConfig");
const regionSslCertificate_1 = require("./regionSslCertificate");
const regionTargetHttpProxy_1 = require("./regionTargetHttpProxy");
const regionTargetHttpsProxy_1 = require("./regionTargetHttpsProxy");
const regionUrlMap_1 = require("./regionUrlMap");
const reservation_1 = require("./reservation");
const resourcePolicy_1 = require("./resourcePolicy");
const route_1 = require("./route");
const router_1 = require("./router");
const routerInterface_1 = require("./routerInterface");
const routerNat_1 = require("./routerNat");
const routerPeer_1 = require("./routerPeer");
const sslcertificate_1 = require("./sslcertificate");
const sslpolicy_1 = require("./sslpolicy");
const securityPolicy_1 = require("./securityPolicy");
const securityScanConfig_1 = require("./securityScanConfig");
const sharedVPCHostProject_1 = require("./sharedVPCHostProject");
const sharedVPCServiceProject_1 = require("./sharedVPCServiceProject");
const snapshot_1 = require("./snapshot");
const subnetwork_1 = require("./subnetwork");
const subnetworkIAMBinding_1 = require("./subnetworkIAMBinding");
const subnetworkIAMMember_1 = require("./subnetworkIAMMember");
const subnetworkIAMPolicy_1 = require("./subnetworkIAMPolicy");
const targetGrpcProxy_1 = require("./targetGrpcProxy");
const targetHttpProxy_1 = require("./targetHttpProxy");
const targetHttpsProxy_1 = require("./targetHttpsProxy");
const targetInstance_1 = require("./targetInstance");
const targetPool_1 = require("./targetPool");
const targetSSLProxy_1 = require("./targetSSLProxy");
const targetTCPProxy_1 = require("./targetTCPProxy");
const urlmap_1 = require("./urlmap");
const vpngateway_1 = require("./vpngateway");
const vpntunnel_1 = require("./vpntunnel");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:compute/address:Address":
                return new address_1.Address(name, undefined, { urn });
            case "gcp:compute/attachedDisk:AttachedDisk":
                return new attachedDisk_1.AttachedDisk(name, undefined, { urn });
            case "gcp:compute/autoscalar:Autoscalar":
                return new autoscalar_1.Autoscalar(name, undefined, { urn });
            case "gcp:compute/autoscaler:Autoscaler":
                return new autoscaler_1.Autoscaler(name, undefined, { urn });
            case "gcp:compute/backendBucket:BackendBucket":
                return new backendBucket_1.BackendBucket(name, undefined, { urn });
            case "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey":
                return new backendBucketSignedUrlKey_1.BackendBucketSignedUrlKey(name, undefined, { urn });
            case "gcp:compute/backendService:BackendService":
                return new backendService_1.BackendService(name, undefined, { urn });
            case "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey":
                return new backendServiceSignedUrlKey_1.BackendServiceSignedUrlKey(name, undefined, { urn });
            case "gcp:compute/disk:Disk":
                return new disk_1.Disk(name, undefined, { urn });
            case "gcp:compute/diskIamBinding:DiskIamBinding":
                return new diskIamBinding_1.DiskIamBinding(name, undefined, { urn });
            case "gcp:compute/diskIamMember:DiskIamMember":
                return new diskIamMember_1.DiskIamMember(name, undefined, { urn });
            case "gcp:compute/diskIamPolicy:DiskIamPolicy":
                return new diskIamPolicy_1.DiskIamPolicy(name, undefined, { urn });
            case "gcp:compute/diskResourcePolicyAttachment:DiskResourcePolicyAttachment":
                return new diskResourcePolicyAttachment_1.DiskResourcePolicyAttachment(name, undefined, { urn });
            case "gcp:compute/externalVpnGateway:ExternalVpnGateway":
                return new externalVpnGateway_1.ExternalVpnGateway(name, undefined, { urn });
            case "gcp:compute/firewall:Firewall":
                return new firewall_1.Firewall(name, undefined, { urn });
            case "gcp:compute/forwardingRule:ForwardingRule":
                return new forwardingRule_1.ForwardingRule(name, undefined, { urn });
            case "gcp:compute/globalAddress:GlobalAddress":
                return new globalAddress_1.GlobalAddress(name, undefined, { urn });
            case "gcp:compute/globalForwardingRule:GlobalForwardingRule":
                return new globalForwardingRule_1.GlobalForwardingRule(name, undefined, { urn });
            case "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint":
                return new globalNetworkEndpoint_1.GlobalNetworkEndpoint(name, undefined, { urn });
            case "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup":
                return new globalNetworkEndpointGroup_1.GlobalNetworkEndpointGroup(name, undefined, { urn });
            case "gcp:compute/haVpnGateway:HaVpnGateway":
                return new haVpnGateway_1.HaVpnGateway(name, undefined, { urn });
            case "gcp:compute/healthCheck:HealthCheck":
                return new healthCheck_1.HealthCheck(name, undefined, { urn });
            case "gcp:compute/httpHealthCheck:HttpHealthCheck":
                return new httpHealthCheck_1.HttpHealthCheck(name, undefined, { urn });
            case "gcp:compute/httpsHealthCheck:HttpsHealthCheck":
                return new httpsHealthCheck_1.HttpsHealthCheck(name, undefined, { urn });
            case "gcp:compute/image:Image":
                return new image_1.Image(name, undefined, { urn });
            case "gcp:compute/imageIamBinding:ImageIamBinding":
                return new imageIamBinding_1.ImageIamBinding(name, undefined, { urn });
            case "gcp:compute/imageIamMember:ImageIamMember":
                return new imageIamMember_1.ImageIamMember(name, undefined, { urn });
            case "gcp:compute/imageIamPolicy:ImageIamPolicy":
                return new imageIamPolicy_1.ImageIamPolicy(name, undefined, { urn });
            case "gcp:compute/instance:Instance":
                return new instance_1.Instance(name, undefined, { urn });
            case "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage":
                return new instanceFromMachineImage_1.InstanceFromMachineImage(name, undefined, { urn });
            case "gcp:compute/instanceFromTemplate:InstanceFromTemplate":
                return new instanceFromTemplate_1.InstanceFromTemplate(name, undefined, { urn });
            case "gcp:compute/instanceGroup:InstanceGroup":
                return new instanceGroup_1.InstanceGroup(name, undefined, { urn });
            case "gcp:compute/instanceGroupManager:InstanceGroupManager":
                return new instanceGroupManager_1.InstanceGroupManager(name, undefined, { urn });
            case "gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort":
                return new instanceGroupNamedPort_1.InstanceGroupNamedPort(name, undefined, { urn });
            case "gcp:compute/instanceIAMBinding:InstanceIAMBinding":
                return new instanceIAMBinding_1.InstanceIAMBinding(name, undefined, { urn });
            case "gcp:compute/instanceIAMMember:InstanceIAMMember":
                return new instanceIAMMember_1.InstanceIAMMember(name, undefined, { urn });
            case "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy":
                return new instanceIAMPolicy_1.InstanceIAMPolicy(name, undefined, { urn });
            case "gcp:compute/instanceTemplate:InstanceTemplate":
                return new instanceTemplate_1.InstanceTemplate(name, undefined, { urn });
            case "gcp:compute/interconnectAttachment:InterconnectAttachment":
                return new interconnectAttachment_1.InterconnectAttachment(name, undefined, { urn });
            case "gcp:compute/machineImage:MachineImage":
                return new machineImage_1.MachineImage(name, undefined, { urn });
            case "gcp:compute/machineImageIamBinding:MachineImageIamBinding":
                return new machineImageIamBinding_1.MachineImageIamBinding(name, undefined, { urn });
            case "gcp:compute/machineImageIamMember:MachineImageIamMember":
                return new machineImageIamMember_1.MachineImageIamMember(name, undefined, { urn });
            case "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy":
                return new machineImageIamPolicy_1.MachineImageIamPolicy(name, undefined, { urn });
            case "gcp:compute/managedSslCertificate:ManagedSslCertificate":
                return new managedSslCertificate_1.ManagedSslCertificate(name, undefined, { urn });
            case "gcp:compute/mangedSslCertificate:MangedSslCertificate":
                return new mangedSslCertificate_1.MangedSslCertificate(name, undefined, { urn });
            case "gcp:compute/network:Network":
                return new network_1.Network(name, undefined, { urn });
            case "gcp:compute/networkEndpoint:NetworkEndpoint":
                return new networkEndpoint_1.NetworkEndpoint(name, undefined, { urn });
            case "gcp:compute/networkEndpointGroup:NetworkEndpointGroup":
                return new networkEndpointGroup_1.NetworkEndpointGroup(name, undefined, { urn });
            case "gcp:compute/networkPeering:NetworkPeering":
                return new networkPeering_1.NetworkPeering(name, undefined, { urn });
            case "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig":
                return new networkPeeringRoutesConfig_1.NetworkPeeringRoutesConfig(name, undefined, { urn });
            case "gcp:compute/nodeGroup:NodeGroup":
                return new nodeGroup_1.NodeGroup(name, undefined, { urn });
            case "gcp:compute/nodeTemplate:NodeTemplate":
                return new nodeTemplate_1.NodeTemplate(name, undefined, { urn });
            case "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy":
                return new organizationSecurityPolicy_1.OrganizationSecurityPolicy(name, undefined, { urn });
            case "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation":
                return new organizationSecurityPolicyAssociation_1.OrganizationSecurityPolicyAssociation(name, undefined, { urn });
            case "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule":
                return new organizationSecurityPolicyRule_1.OrganizationSecurityPolicyRule(name, undefined, { urn });
            case "gcp:compute/packetMirroring:PacketMirroring":
                return new packetMirroring_1.PacketMirroring(name, undefined, { urn });
            case "gcp:compute/perInstanceConfig:PerInstanceConfig":
                return new perInstanceConfig_1.PerInstanceConfig(name, undefined, { urn });
            case "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier":
                return new projectDefaultNetworkTier_1.ProjectDefaultNetworkTier(name, undefined, { urn });
            case "gcp:compute/projectMetadata:ProjectMetadata":
                return new projectMetadata_1.ProjectMetadata(name, undefined, { urn });
            case "gcp:compute/projectMetadataItem:ProjectMetadataItem":
                return new projectMetadataItem_1.ProjectMetadataItem(name, undefined, { urn });
            case "gcp:compute/regionAutoscaler:RegionAutoscaler":
                return new regionAutoscaler_1.RegionAutoscaler(name, undefined, { urn });
            case "gcp:compute/regionBackendService:RegionBackendService":
                return new regionBackendService_1.RegionBackendService(name, undefined, { urn });
            case "gcp:compute/regionDisk:RegionDisk":
                return new regionDisk_1.RegionDisk(name, undefined, { urn });
            case "gcp:compute/regionDiskIamBinding:RegionDiskIamBinding":
                return new regionDiskIamBinding_1.RegionDiskIamBinding(name, undefined, { urn });
            case "gcp:compute/regionDiskIamMember:RegionDiskIamMember":
                return new regionDiskIamMember_1.RegionDiskIamMember(name, undefined, { urn });
            case "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy":
                return new regionDiskIamPolicy_1.RegionDiskIamPolicy(name, undefined, { urn });
            case "gcp:compute/regionDiskResourcePolicyAttachment:RegionDiskResourcePolicyAttachment":
                return new regionDiskResourcePolicyAttachment_1.RegionDiskResourcePolicyAttachment(name, undefined, { urn });
            case "gcp:compute/regionHealthCheck:RegionHealthCheck":
                return new regionHealthCheck_1.RegionHealthCheck(name, undefined, { urn });
            case "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager":
                return new regionInstanceGroupManager_1.RegionInstanceGroupManager(name, undefined, { urn });
            case "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup":
                return new regionNetworkEndpointGroup_1.RegionNetworkEndpointGroup(name, undefined, { urn });
            case "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig":
                return new regionPerInstanceConfig_1.RegionPerInstanceConfig(name, undefined, { urn });
            case "gcp:compute/regionSslCertificate:RegionSslCertificate":
                return new regionSslCertificate_1.RegionSslCertificate(name, undefined, { urn });
            case "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy":
                return new regionTargetHttpProxy_1.RegionTargetHttpProxy(name, undefined, { urn });
            case "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy":
                return new regionTargetHttpsProxy_1.RegionTargetHttpsProxy(name, undefined, { urn });
            case "gcp:compute/regionUrlMap:RegionUrlMap":
                return new regionUrlMap_1.RegionUrlMap(name, undefined, { urn });
            case "gcp:compute/reservation:Reservation":
                return new reservation_1.Reservation(name, undefined, { urn });
            case "gcp:compute/resourcePolicy:ResourcePolicy":
                return new resourcePolicy_1.ResourcePolicy(name, undefined, { urn });
            case "gcp:compute/route:Route":
                return new route_1.Route(name, undefined, { urn });
            case "gcp:compute/router:Router":
                return new router_1.Router(name, undefined, { urn });
            case "gcp:compute/routerInterface:RouterInterface":
                return new routerInterface_1.RouterInterface(name, undefined, { urn });
            case "gcp:compute/routerNat:RouterNat":
                return new routerNat_1.RouterNat(name, undefined, { urn });
            case "gcp:compute/routerPeer:RouterPeer":
                return new routerPeer_1.RouterPeer(name, undefined, { urn });
            case "gcp:compute/sSLCertificate:SSLCertificate":
                return new sslcertificate_1.SSLCertificate(name, undefined, { urn });
            case "gcp:compute/sSLPolicy:SSLPolicy":
                return new sslpolicy_1.SSLPolicy(name, undefined, { urn });
            case "gcp:compute/securityPolicy:SecurityPolicy":
                return new securityPolicy_1.SecurityPolicy(name, undefined, { urn });
            case "gcp:compute/securityScanConfig:SecurityScanConfig":
                return new securityScanConfig_1.SecurityScanConfig(name, undefined, { urn });
            case "gcp:compute/sharedVPCHostProject:SharedVPCHostProject":
                return new sharedVPCHostProject_1.SharedVPCHostProject(name, undefined, { urn });
            case "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject":
                return new sharedVPCServiceProject_1.SharedVPCServiceProject(name, undefined, { urn });
            case "gcp:compute/snapshot:Snapshot":
                return new snapshot_1.Snapshot(name, undefined, { urn });
            case "gcp:compute/subnetwork:Subnetwork":
                return new subnetwork_1.Subnetwork(name, undefined, { urn });
            case "gcp:compute/subnetworkIAMBinding:SubnetworkIAMBinding":
                return new subnetworkIAMBinding_1.SubnetworkIAMBinding(name, undefined, { urn });
            case "gcp:compute/subnetworkIAMMember:SubnetworkIAMMember":
                return new subnetworkIAMMember_1.SubnetworkIAMMember(name, undefined, { urn });
            case "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy":
                return new subnetworkIAMPolicy_1.SubnetworkIAMPolicy(name, undefined, { urn });
            case "gcp:compute/targetGrpcProxy:TargetGrpcProxy":
                return new targetGrpcProxy_1.TargetGrpcProxy(name, undefined, { urn });
            case "gcp:compute/targetHttpProxy:TargetHttpProxy":
                return new targetHttpProxy_1.TargetHttpProxy(name, undefined, { urn });
            case "gcp:compute/targetHttpsProxy:TargetHttpsProxy":
                return new targetHttpsProxy_1.TargetHttpsProxy(name, undefined, { urn });
            case "gcp:compute/targetInstance:TargetInstance":
                return new targetInstance_1.TargetInstance(name, undefined, { urn });
            case "gcp:compute/targetPool:TargetPool":
                return new targetPool_1.TargetPool(name, undefined, { urn });
            case "gcp:compute/targetSSLProxy:TargetSSLProxy":
                return new targetSSLProxy_1.TargetSSLProxy(name, undefined, { urn });
            case "gcp:compute/targetTCPProxy:TargetTCPProxy":
                return new targetTCPProxy_1.TargetTCPProxy(name, undefined, { urn });
            case "gcp:compute/uRLMap:URLMap":
                return new urlmap_1.URLMap(name, undefined, { urn });
            case "gcp:compute/vPNGateway:VPNGateway":
                return new vpngateway_1.VPNGateway(name, undefined, { urn });
            case "gcp:compute/vPNTunnel:VPNTunnel":
                return new vpntunnel_1.VPNTunnel(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "compute/address", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/attachedDisk", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/autoscalar", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/autoscaler", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucket", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketSignedUrlKey", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendService", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceSignedUrlKey", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/disk", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskResourcePolicyAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/externalVpnGateway", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/firewall", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/forwardingRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalAddress", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalForwardingRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalNetworkEndpoint", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalNetworkEndpointGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/haVpnGateway", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/healthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/httpHealthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/httpsHealthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/image", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instance", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceFromMachineImage", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceFromTemplate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroupManager", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroupNamedPort", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceTemplate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/interconnectAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImage", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/managedSslCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/mangedSslCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/network", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkEndpoint", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkEndpointGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkPeering", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkPeeringRoutesConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/nodeGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/nodeTemplate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicyAssociation", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicyRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/packetMirroring", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/perInstanceConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/projectDefaultNetworkTier", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/projectMetadata", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/projectMetadataItem", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionAutoscaler", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendService", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDisk", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskResourcePolicyAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionHealthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionInstanceGroupManager", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionNetworkEndpointGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionPerInstanceConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionSslCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetHttpProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetHttpsProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionUrlMap", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/reservation", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/resourcePolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/route", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/router", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/routerInterface", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/routerNat", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/routerPeer", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sSLCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sSLPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/securityPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/securityScanConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sharedVPCHostProject", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sharedVPCServiceProject", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/snapshot", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetwork", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetGrpcProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetHttpProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetHttpsProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetInstance", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetPool", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetSSLProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetTCPProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/uRLMap", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/vPNGateway", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/vPNTunnel", _module);
//# sourceMappingURL=index.js.map