"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a VPN gateway running in GCP. This virtual device is managed
 * by Google, but used only by you. This type of VPN Gateway allows for the creation
 * of VPN solutions with higher availability than classic Target VPN Gateways.
 *
 * To get more information about HaVpnGateway, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/vpnGateways)
 * * How-to Guides
 *     * [Choosing a VPN](https://cloud.google.com/vpn/docs/how-to/choosing-a-vpn)
 *     * [Cloud VPN Overview](https://cloud.google.com/vpn/docs/concepts/overview)
 *
 * ## Example Usage
 * ### Ha Vpn Gateway Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network1 = new gcp.compute.Network("network1", {autoCreateSubnetworks: false});
 * const haGateway1 = new gcp.compute.HaVpnGateway("haGateway1", {
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * ```
 * ### Ha Vpn Gateway Gcp To Gcp
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network1 = new gcp.compute.Network("network1", {
 *     routingMode: "GLOBAL",
 *     autoCreateSubnetworks: false,
 * });
 * const haGateway1 = new gcp.compute.HaVpnGateway("haGateway1", {
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const network2 = new gcp.compute.Network("network2", {
 *     routingMode: "GLOBAL",
 *     autoCreateSubnetworks: false,
 * });
 * const haGateway2 = new gcp.compute.HaVpnGateway("haGateway2", {
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const network1Subnet1 = new gcp.compute.Subnetwork("network1Subnet1", {
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const network1Subnet2 = new gcp.compute.Subnetwork("network1Subnet2", {
 *     ipCidrRange: "10.0.2.0/24",
 *     region: "us-west1",
 *     network: network1.id,
 * });
 * const network2Subnet1 = new gcp.compute.Subnetwork("network2Subnet1", {
 *     ipCidrRange: "192.168.1.0/24",
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const network2Subnet2 = new gcp.compute.Subnetwork("network2Subnet2", {
 *     ipCidrRange: "192.168.2.0/24",
 *     region: "us-east1",
 *     network: network2.id,
 * });
 * const router1 = new gcp.compute.Router("router1", {
 *     network: network1.name,
 *     bgp: {
 *         asn: 64514,
 *     },
 * });
 * const router2 = new gcp.compute.Router("router2", {
 *     network: network2.name,
 *     bgp: {
 *         asn: 64515,
 *     },
 * });
 * const tunnel1 = new gcp.compute.VPNTunnel("tunnel1", {
 *     region: "us-central1",
 *     vpnGateway: haGateway1.id,
 *     peerGcpGateway: haGateway2.id,
 *     sharedSecret: "a secret message",
 *     router: router1.id,
 *     vpnGatewayInterface: 0,
 * });
 * const tunnel2 = new gcp.compute.VPNTunnel("tunnel2", {
 *     region: "us-central1",
 *     vpnGateway: haGateway1.id,
 *     peerGcpGateway: haGateway2.id,
 *     sharedSecret: "a secret message",
 *     router: router1.id,
 *     vpnGatewayInterface: 1,
 * });
 * const tunnel3 = new gcp.compute.VPNTunnel("tunnel3", {
 *     region: "us-central1",
 *     vpnGateway: haGateway2.id,
 *     peerGcpGateway: haGateway1.id,
 *     sharedSecret: "a secret message",
 *     router: router2.id,
 *     vpnGatewayInterface: 0,
 * });
 * const tunnel4 = new gcp.compute.VPNTunnel("tunnel4", {
 *     region: "us-central1",
 *     vpnGateway: haGateway2.id,
 *     peerGcpGateway: haGateway1.id,
 *     sharedSecret: "a secret message",
 *     router: router2.id,
 *     vpnGatewayInterface: 1,
 * });
 * const router1Interface1 = new gcp.compute.RouterInterface("router1Interface1", {
 *     router: router1.name,
 *     region: "us-central1",
 *     ipRange: "169.254.0.1/30",
 *     vpnTunnel: tunnel1.name,
 * });
 * const router1Peer1 = new gcp.compute.RouterPeer("router1Peer1", {
 *     router: router1.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.0.2",
 *     peerAsn: 64515,
 *     advertisedRoutePriority: 100,
 *     "interface": router1Interface1.name,
 * });
 * const router1Interface2 = new gcp.compute.RouterInterface("router1Interface2", {
 *     router: router1.name,
 *     region: "us-central1",
 *     ipRange: "169.254.1.1/30",
 *     vpnTunnel: tunnel2.name,
 * });
 * const router1Peer2 = new gcp.compute.RouterPeer("router1Peer2", {
 *     router: router1.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.1.2",
 *     peerAsn: 64515,
 *     advertisedRoutePriority: 100,
 *     "interface": router1Interface2.name,
 * });
 * const router2Interface1 = new gcp.compute.RouterInterface("router2Interface1", {
 *     router: router2.name,
 *     region: "us-central1",
 *     ipRange: "169.254.0.1/30",
 *     vpnTunnel: tunnel3.name,
 * });
 * const router2Peer1 = new gcp.compute.RouterPeer("router2Peer1", {
 *     router: router2.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.0.2",
 *     peerAsn: 64514,
 *     advertisedRoutePriority: 100,
 *     "interface": router2Interface1.name,
 * });
 * const router2Interface2 = new gcp.compute.RouterInterface("router2Interface2", {
 *     router: router2.name,
 *     region: "us-central1",
 *     ipRange: "169.254.1.1/30",
 *     vpnTunnel: tunnel4.name,
 * });
 * const router2Peer2 = new gcp.compute.RouterPeer("router2Peer2", {
 *     router: router2.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.1.2",
 *     peerAsn: 64514,
 *     advertisedRoutePriority: 100,
 *     "interface": router2Interface2.name,
 * });
 * ```
 *
 * ## Import
 *
 * HaVpnGateway can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{name}}
 * ```
 */
class HaVpnGateway extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["vpnInterfaces"] = state ? state.vpnInterfaces : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["selfLink"] = undefined /*out*/;
            inputs["vpnInterfaces"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(HaVpnGateway.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing HaVpnGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new HaVpnGateway(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HaVpnGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HaVpnGateway.__pulumiType;
    }
}
exports.HaVpnGateway = HaVpnGateway;
/** @internal */
HaVpnGateway.__pulumiType = 'gcp:compute/haVpnGateway:HaVpnGateway';
//# sourceMappingURL=haVpnGateway.js.map