"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * BGP information that must be configured into the routing stack to
 * establish BGP peering. This information must specify the peer ASN
 * and either the interface name, IP address, or peer IP address.
 * Please refer to RFC4273.
 *
 * To get more information about RouterBgpPeer, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routers)
 * * How-to Guides
 *     * [Google Cloud Router](https://cloud.google.com/router/docs/)
 *
 * ## Example Usage
 * ### Router Peer Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const peer = new gcp.compute.RouterPeer("peer", {
 *     advertisedRoutePriority: 100,
 *     interface: "interface-1",
 *     peerAsn: 65513,
 *     peerIpAddress: "169.254.1.2",
 *     region: "us-central1",
 *     router: "my-router",
 * });
 * ```
 *
 * ## Import
 *
 * RouterBgpPeer can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/routerPeer:RouterPeer default projects/{{project}}/regions/{{region}}/routers/{{router}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/routerPeer:RouterPeer default {{project}}/{{region}}/{{router}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/routerPeer:RouterPeer default {{region}}/{{router}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/routerPeer:RouterPeer default {{router}}/{{name}}
 * ```
 */
class RouterPeer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["advertiseMode"] = state ? state.advertiseMode : undefined;
            inputs["advertisedGroups"] = state ? state.advertisedGroups : undefined;
            inputs["advertisedIpRanges"] = state ? state.advertisedIpRanges : undefined;
            inputs["advertisedRoutePriority"] = state ? state.advertisedRoutePriority : undefined;
            inputs["interface"] = state ? state.interface : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["managementType"] = state ? state.managementType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["peerAsn"] = state ? state.peerAsn : undefined;
            inputs["peerIpAddress"] = state ? state.peerIpAddress : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["router"] = state ? state.router : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.peerAsn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAsn'");
            }
            if ((!args || args.peerIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerIpAddress'");
            }
            if ((!args || args.router === undefined) && !opts.urn) {
                throw new Error("Missing required property 'router'");
            }
            inputs["advertiseMode"] = args ? args.advertiseMode : undefined;
            inputs["advertisedGroups"] = args ? args.advertisedGroups : undefined;
            inputs["advertisedIpRanges"] = args ? args.advertisedIpRanges : undefined;
            inputs["advertisedRoutePriority"] = args ? args.advertisedRoutePriority : undefined;
            inputs["interface"] = args ? args.interface : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["peerAsn"] = args ? args.peerAsn : undefined;
            inputs["peerIpAddress"] = args ? args.peerIpAddress : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["router"] = args ? args.router : undefined;
            inputs["ipAddress"] = undefined /*out*/;
            inputs["managementType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(RouterPeer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RouterPeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RouterPeer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RouterPeer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterPeer.__pulumiType;
    }
}
exports.RouterPeer = RouterPeer;
/** @internal */
RouterPeer.__pulumiType = 'gcp:compute/routerPeer:RouterPeer';
//# sourceMappingURL=routerPeer.js.map