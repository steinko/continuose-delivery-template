"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manage a network peering's route settings without managing the peering as
 * a whole. This resource is primarily intended for use with GCP-generated
 * peerings that shouldn't otherwise be managed by other tools. Deleting this
 * resource is a no-op and the peering will not be modified.
 *
 * To get more information about NetworkPeeringRoutesConfig, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/networks/updatePeering)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vpc/docs/vpc-peering)
 *
 * ## Example Usage
 * ### Network Peering Routes Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const networkPrimary = new gcp.compute.Network("networkPrimary", {autoCreateSubnetworks: "false"});
 * const networkSecondary = new gcp.compute.Network("networkSecondary", {autoCreateSubnetworks: "false"});
 * const peeringPrimary = new gcp.compute.NetworkPeering("peeringPrimary", {
 *     network: networkPrimary.id,
 *     peerNetwork: networkSecondary.id,
 *     importCustomRoutes: true,
 *     exportCustomRoutes: true,
 * });
 * const peeringPrimaryRoutes = new gcp.compute.NetworkPeeringRoutesConfig("peeringPrimaryRoutes", {
 *     peering: peeringPrimary.name,
 *     network: networkPrimary.name,
 *     importCustomRoutes: true,
 *     exportCustomRoutes: true,
 * });
 * const peeringSecondary = new gcp.compute.NetworkPeering("peeringSecondary", {
 *     network: networkSecondary.id,
 *     peerNetwork: networkPrimary.id,
 * });
 * ```
 *
 * ## Import
 *
 * NetworkPeeringRoutesConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig default projects/{{project}}/global/networks/{{network}}/networkPeerings/{{peering}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig default {{project}}/{{network}}/{{peering}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig default {{network}}/{{peering}}
 * ```
 */
class NetworkPeeringRoutesConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["exportCustomRoutes"] = state ? state.exportCustomRoutes : undefined;
            inputs["importCustomRoutes"] = state ? state.importCustomRoutes : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["peering"] = state ? state.peering : undefined;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.exportCustomRoutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportCustomRoutes'");
            }
            if ((!args || args.importCustomRoutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importCustomRoutes'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.peering === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peering'");
            }
            inputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            inputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["peering"] = args ? args.peering : undefined;
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(NetworkPeeringRoutesConfig.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing NetworkPeeringRoutesConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkPeeringRoutesConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkPeeringRoutesConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPeeringRoutesConfig.__pulumiType;
    }
}
exports.NetworkPeeringRoutesConfig = NetworkPeeringRoutesConfig;
/** @internal */
NetworkPeeringRoutesConfig.__pulumiType = 'gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig';
//# sourceMappingURL=networkPeeringRoutesConfig.js.map