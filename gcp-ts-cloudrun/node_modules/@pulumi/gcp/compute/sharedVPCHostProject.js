"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Enables the Google Compute Engine
 * [Shared VPC](https://cloud.google.com/compute/docs/shared-vpc)
 * feature for a project, assigning it as a Shared VPC host project.
 *
 * For more information, see,
 * [the Project API documentation](https://cloud.google.com/compute/docs/reference/latest/projects),
 * where the Shared VPC feature is referred to by its former name "XPN".
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // A host project provides network resources to associated service projects.
 * const host = new gcp.compute.SharedVPCHostProject("host", {project: "host-project-id"});
 * // A service project gains access to network resources provided by its
 * // associated host project.
 * const service1 = new gcp.compute.SharedVPCServiceProject("service1", {
 *     hostProject: host.project,
 *     serviceProject: "service-project-id-1",
 * });
 * const service2 = new gcp.compute.SharedVPCServiceProject("service2", {
 *     hostProject: host.project,
 *     serviceProject: "service-project-id-2",
 * });
 * ```
 *
 * ## Import
 *
 * Google Compute Engine Shared VPC host project feature can be imported using the `project`, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:compute/sharedVPCHostProject:SharedVPCHostProject host host-project-id
 * ```
 */
class SharedVPCHostProject extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            inputs["project"] = args ? args.project : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SharedVPCHostProject.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SharedVPCHostProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SharedVPCHostProject(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SharedVPCHostProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedVPCHostProject.__pulumiType;
    }
}
exports.SharedVPCHostProject = SharedVPCHostProject;
/** @internal */
SharedVPCHostProject.__pulumiType = 'gcp:compute/sharedVPCHostProject:SharedVPCHostProject';
//# sourceMappingURL=sharedVPCHostProject.js.map