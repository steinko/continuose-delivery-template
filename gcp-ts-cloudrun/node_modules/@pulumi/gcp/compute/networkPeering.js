"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a network peering within GCE. For more information see
 * [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/latest/networks).
 *
 * > Both network must create a peering with each other for the peering
 * to be functional.
 *
 * > Subnets IP ranges across peered VPC networks cannot overlap.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {autoCreateSubnetworks: "false"});
 * const other = new gcp.compute.Network("other", {autoCreateSubnetworks: "false"});
 * const peering1 = new gcp.compute.NetworkPeering("peering1", {
 *     network: _default.id,
 *     peerNetwork: other.id,
 * });
 * const peering2 = new gcp.compute.NetworkPeering("peering2", {
 *     network: other.id,
 *     peerNetwork: _default.id,
 * });
 * ```
 *
 * ## Import
 *
 * VPC network peerings can be imported using the name and project of the primary network the peering exists in and the name of the network peering
 *
 * ```sh
 *  $ pulumi import gcp:compute/networkPeering:NetworkPeering peering_network project-name/network-name/peering-name
 * ```
 */
class NetworkPeering extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["exportCustomRoutes"] = state ? state.exportCustomRoutes : undefined;
            inputs["exportSubnetRoutesWithPublicIp"] = state ? state.exportSubnetRoutesWithPublicIp : undefined;
            inputs["importCustomRoutes"] = state ? state.importCustomRoutes : undefined;
            inputs["importSubnetRoutesWithPublicIp"] = state ? state.importSubnetRoutesWithPublicIp : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["peerNetwork"] = state ? state.peerNetwork : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["stateDetails"] = state ? state.stateDetails : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.peerNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetwork'");
            }
            inputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            inputs["exportSubnetRoutesWithPublicIp"] = args ? args.exportSubnetRoutesWithPublicIp : undefined;
            inputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            inputs["importSubnetRoutesWithPublicIp"] = args ? args.importSubnetRoutesWithPublicIp : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["peerNetwork"] = args ? args.peerNetwork : undefined;
            inputs["state"] = undefined /*out*/;
            inputs["stateDetails"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(NetworkPeering.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkPeering(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPeering.__pulumiType;
    }
}
exports.NetworkPeering = NetworkPeering;
/** @internal */
NetworkPeering.__pulumiType = 'gcp:compute/networkPeering:NetworkPeering';
//# sourceMappingURL=networkPeering.js.map