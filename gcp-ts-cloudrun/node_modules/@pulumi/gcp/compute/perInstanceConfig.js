"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A config defined for a single managed instance that belongs to an instance group manager. It preserves the instance name
 * across instance group manager operations and can define stateful disks or metadata that are unique to the instance.
 *
 * To get more information about PerInstanceConfig, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/instanceGroupManagers)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/instance-groups/stateful-migs#per-instance_configs)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * PerInstanceConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{instance_group_manager}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default {{project}}/{{zone}}/{{instance_group_manager}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default {{zone}}/{{instance_group_manager}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default {{instance_group_manager}}/{{name}}
 * ```
 */
class PerInstanceConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["instanceGroupManager"] = state ? state.instanceGroupManager : undefined;
            inputs["minimalAction"] = state ? state.minimalAction : undefined;
            inputs["mostDisruptiveAllowedAction"] = state ? state.mostDisruptiveAllowedAction : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preservedState"] = state ? state.preservedState : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["removeInstanceStateOnDestroy"] = state ? state.removeInstanceStateOnDestroy : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceGroupManager === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceGroupManager'");
            }
            inputs["instanceGroupManager"] = args ? args.instanceGroupManager : undefined;
            inputs["minimalAction"] = args ? args.minimalAction : undefined;
            inputs["mostDisruptiveAllowedAction"] = args ? args.mostDisruptiveAllowedAction : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["preservedState"] = args ? args.preservedState : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["removeInstanceStateOnDestroy"] = args ? args.removeInstanceStateOnDestroy : undefined;
            inputs["zone"] = args ? args.zone : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(PerInstanceConfig.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing PerInstanceConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PerInstanceConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PerInstanceConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PerInstanceConfig.__pulumiType;
    }
}
exports.PerInstanceConfig = PerInstanceConfig;
/** @internal */
PerInstanceConfig.__pulumiType = 'gcp:compute/perInstanceConfig:PerInstanceConfig';
//# sourceMappingURL=perInstanceConfig.js.map