"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Backend Service defines a group of virtual machines that will serve
 * traffic for load balancing. This resource is a global backend service,
 * appropriate for external load balancing or self-managed internal load balancing.
 * For managed internal load balancing, use a regional backend service instead.
 *
 * Currently self-managed internal load balancing is only available in beta.
 *
 * To get more information about BackendService, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/v1/backendServices)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/backend-service)
 *
 * ## Example Usage
 * ### Backend Service Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("defaultHttpHealthCheck", {
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const defaultBackendService = new gcp.compute.BackendService("defaultBackendService", {healthChecks: [defaultHttpHealthCheck.id]});
 * ```
 * ### Backend Service Cache Simple
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("defaultHttpHealthCheck", {
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const defaultBackendService = new gcp.compute.BackendService("defaultBackendService", {
 *     healthChecks: [defaultHttpHealthCheck.id],
 *     enableCdn: true,
 *     cdnPolicy: {
 *         signedUrlCacheMaxAgeSec: 7200,
 *     },
 * });
 * ```
 * ### Backend Service Cache
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("defaultHttpHealthCheck", {
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * }, {
 *     provider: google_beta,
 * });
 * const defaultBackendService = new gcp.compute.BackendService("defaultBackendService", {
 *     healthChecks: [defaultHttpHealthCheck.id],
 *     enableCdn: true,
 *     cdnPolicy: {
 *         cacheMode: "CACHE_ALL_STATIC",
 *         defaultTtl: 3600,
 *         clientTtl: 7200,
 *         maxTtl: 10800,
 *         negativeCaching: true,
 *         signedUrlCacheMaxAgeSec: 7200,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Backend Service Traffic Director Round Robin
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const healthCheck = new gcp.compute.HealthCheck("healthCheck", {httpHealthCheck: {
 *     port: 80,
 * }}, {
 *     provider: google_beta,
 * });
 * const _default = new gcp.compute.BackendService("default", {
 *     healthChecks: [healthCheck.id],
 *     loadBalancingScheme: "INTERNAL_SELF_MANAGED",
 *     localityLbPolicy: "ROUND_ROBIN",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Backend Service Traffic Director Ring Hash
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const healthCheck = new gcp.compute.HealthCheck("healthCheck", {httpHealthCheck: {
 *     port: 80,
 * }}, {
 *     provider: google_beta,
 * });
 * const _default = new gcp.compute.BackendService("default", {
 *     healthChecks: [healthCheck.id],
 *     loadBalancingScheme: "INTERNAL_SELF_MANAGED",
 *     localityLbPolicy: "RING_HASH",
 *     sessionAffinity: "HTTP_COOKIE",
 *     circuitBreakers: {
 *         maxConnections: 10,
 *     },
 *     consistentHash: {
 *         httpCookie: {
 *             ttl: {
 *                 seconds: 11,
 *                 nanos: 1111,
 *             },
 *             name: "mycookie",
 *         },
 *     },
 *     outlierDetection: {
 *         consecutiveErrors: 2,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Backend Service Network Endpoint
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const externalProxy = new gcp.compute.GlobalNetworkEndpointGroup("externalProxy", {
 *     networkEndpointType: "INTERNET_FQDN_PORT",
 *     defaultPort: "443",
 * }, {
 *     provider: google_beta,
 * });
 * const proxy = new gcp.compute.GlobalNetworkEndpoint("proxy", {
 *     globalNetworkEndpointGroup: externalProxy.id,
 *     fqdn: "test.example.com",
 *     port: externalProxy.defaultPort,
 * }, {
 *     provider: google_beta,
 * });
 * const _default = new gcp.compute.BackendService("default", {
 *     enableCdn: true,
 *     timeoutSec: 10,
 *     connectionDrainingTimeoutSec: 10,
 *     customRequestHeaders: [pulumi.interpolate`host: ${proxy.fqdn}`],
 *     customResponseHeaders: ["X-Cache-Hit: {cdn_cache_status}"],
 *     backends: [{
 *         group: externalProxy.id,
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * BackendService can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/backendService:BackendService default projects/{{project}}/global/backendServices/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/backendService:BackendService default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/backendService:BackendService default {{name}}
 * ```
 */
class BackendService extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["affinityCookieTtlSec"] = state ? state.affinityCookieTtlSec : undefined;
            inputs["backends"] = state ? state.backends : undefined;
            inputs["cdnPolicy"] = state ? state.cdnPolicy : undefined;
            inputs["circuitBreakers"] = state ? state.circuitBreakers : undefined;
            inputs["connectionDrainingTimeoutSec"] = state ? state.connectionDrainingTimeoutSec : undefined;
            inputs["consistentHash"] = state ? state.consistentHash : undefined;
            inputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            inputs["customRequestHeaders"] = state ? state.customRequestHeaders : undefined;
            inputs["customResponseHeaders"] = state ? state.customResponseHeaders : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enableCdn"] = state ? state.enableCdn : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["healthChecks"] = state ? state.healthChecks : undefined;
            inputs["iap"] = state ? state.iap : undefined;
            inputs["loadBalancingScheme"] = state ? state.loadBalancingScheme : undefined;
            inputs["localityLbPolicy"] = state ? state.localityLbPolicy : undefined;
            inputs["logConfig"] = state ? state.logConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["outlierDetection"] = state ? state.outlierDetection : undefined;
            inputs["portName"] = state ? state.portName : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["securityPolicy"] = state ? state.securityPolicy : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
            inputs["sessionAffinity"] = state ? state.sessionAffinity : undefined;
            inputs["timeoutSec"] = state ? state.timeoutSec : undefined;
        }
        else {
            const args = argsOrState;
            inputs["affinityCookieTtlSec"] = args ? args.affinityCookieTtlSec : undefined;
            inputs["backends"] = args ? args.backends : undefined;
            inputs["cdnPolicy"] = args ? args.cdnPolicy : undefined;
            inputs["circuitBreakers"] = args ? args.circuitBreakers : undefined;
            inputs["connectionDrainingTimeoutSec"] = args ? args.connectionDrainingTimeoutSec : undefined;
            inputs["consistentHash"] = args ? args.consistentHash : undefined;
            inputs["customRequestHeaders"] = args ? args.customRequestHeaders : undefined;
            inputs["customResponseHeaders"] = args ? args.customResponseHeaders : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enableCdn"] = args ? args.enableCdn : undefined;
            inputs["healthChecks"] = args ? args.healthChecks : undefined;
            inputs["iap"] = args ? args.iap : undefined;
            inputs["loadBalancingScheme"] = args ? args.loadBalancingScheme : undefined;
            inputs["localityLbPolicy"] = args ? args.localityLbPolicy : undefined;
            inputs["logConfig"] = args ? args.logConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["outlierDetection"] = args ? args.outlierDetection : undefined;
            inputs["portName"] = args ? args.portName : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["securityPolicy"] = args ? args.securityPolicy : undefined;
            inputs["sessionAffinity"] = args ? args.sessionAffinity : undefined;
            inputs["timeoutSec"] = args ? args.timeoutSec : undefined;
            inputs["creationTimestamp"] = undefined /*out*/;
            inputs["fingerprint"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(BackendService.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing BackendService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BackendService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BackendService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackendService.__pulumiType;
    }
}
exports.BackendService = BackendService;
/** @internal */
BackendService.__pulumiType = 'gcp:compute/backendService:BackendService';
//# sourceMappingURL=backendService.js.map