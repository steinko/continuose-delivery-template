"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./getTopic"));
__export(require("./liteSubscription"));
__export(require("./liteTopic"));
__export(require("./subscription"));
__export(require("./subscriptionIAMBinding"));
__export(require("./subscriptionIAMMember"));
__export(require("./subscriptionIAMPolicy"));
__export(require("./topic"));
__export(require("./topicIAMBinding"));
__export(require("./topicIAMMember"));
__export(require("./topicIAMPolicy"));
__export(require("./zMixins"));
// Import resources to register:
const liteSubscription_1 = require("./liteSubscription");
const liteTopic_1 = require("./liteTopic");
const subscription_1 = require("./subscription");
const subscriptionIAMBinding_1 = require("./subscriptionIAMBinding");
const subscriptionIAMMember_1 = require("./subscriptionIAMMember");
const subscriptionIAMPolicy_1 = require("./subscriptionIAMPolicy");
const topic_1 = require("./topic");
const topicIAMBinding_1 = require("./topicIAMBinding");
const topicIAMMember_1 = require("./topicIAMMember");
const topicIAMPolicy_1 = require("./topicIAMPolicy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:pubsub/liteSubscription:LiteSubscription":
                return new liteSubscription_1.LiteSubscription(name, undefined, { urn });
            case "gcp:pubsub/liteTopic:LiteTopic":
                return new liteTopic_1.LiteTopic(name, undefined, { urn });
            case "gcp:pubsub/subscription:Subscription":
                return new subscription_1.Subscription(name, undefined, { urn });
            case "gcp:pubsub/subscriptionIAMBinding:SubscriptionIAMBinding":
                return new subscriptionIAMBinding_1.SubscriptionIAMBinding(name, undefined, { urn });
            case "gcp:pubsub/subscriptionIAMMember:SubscriptionIAMMember":
                return new subscriptionIAMMember_1.SubscriptionIAMMember(name, undefined, { urn });
            case "gcp:pubsub/subscriptionIAMPolicy:SubscriptionIAMPolicy":
                return new subscriptionIAMPolicy_1.SubscriptionIAMPolicy(name, undefined, { urn });
            case "gcp:pubsub/topic:Topic":
                return new topic_1.Topic(name, undefined, { urn });
            case "gcp:pubsub/topicIAMBinding:TopicIAMBinding":
                return new topicIAMBinding_1.TopicIAMBinding(name, undefined, { urn });
            case "gcp:pubsub/topicIAMMember:TopicIAMMember":
                return new topicIAMMember_1.TopicIAMMember(name, undefined, { urn });
            case "gcp:pubsub/topicIAMPolicy:TopicIAMPolicy":
                return new topicIAMPolicy_1.TopicIAMPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteSubscription", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteTopic", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscription", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topic", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIAMPolicy", _module);
//# sourceMappingURL=index.js.map