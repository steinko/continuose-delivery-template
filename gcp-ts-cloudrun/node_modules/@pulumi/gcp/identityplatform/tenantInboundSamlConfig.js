"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Inbound SAML configuration for a Identity Toolkit tenant.
 *
 * You must enable the
 * [Google Identity Platform](https://console.cloud.google.com/marketplace/details/google-cloud-platform/customer-identity) in
 * the marketplace prior to using this resource.
 *
 * ## Example Usage
 * ### Identity Platform Tenant Inbound Saml Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 *
 * const tenant = new gcp.identityplatform.Tenant("tenant", {displayName: "tenant"});
 * const tenantSamlConfig = new gcp.identityplatform.TenantInboundSamlConfig("tenantSamlConfig", {
 *     displayName: "Display Name",
 *     tenant: tenant.name,
 *     idpConfig: {
 *         idpEntityId: "tf-idp",
 *         signRequest: true,
 *         ssoUrl: "https://example.com",
 *         idpCertificates: [{
 *             x509Certificate: fs.readFileSync("test-fixtures/rsa_cert.pem"),
 *         }],
 *     },
 *     spConfig: {
 *         spEntityId: "tf-sp",
 *         callbackUri: "https://example.com",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * TenantInboundSamlConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig default projects/{{project}}/tenants/{{tenant}}/inboundSamlConfigs/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig default {{project}}/{{tenant}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig default {{tenant}}/{{name}}
 * ```
 */
class TenantInboundSamlConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["idpConfig"] = state ? state.idpConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["spConfig"] = state ? state.spConfig : undefined;
            inputs["tenant"] = state ? state.tenant : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.idpConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpConfig'");
            }
            if ((!args || args.spConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spConfig'");
            }
            if ((!args || args.tenant === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenant'");
            }
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["idpConfig"] = args ? args.idpConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["spConfig"] = args ? args.spConfig : undefined;
            inputs["tenant"] = args ? args.tenant : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TenantInboundSamlConfig.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TenantInboundSamlConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TenantInboundSamlConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TenantInboundSamlConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TenantInboundSamlConfig.__pulumiType;
    }
}
exports.TenantInboundSamlConfig = TenantInboundSamlConfig;
/** @internal */
TenantInboundSamlConfig.__pulumiType = 'gcp:identityplatform/tenantInboundSamlConfig:TenantInboundSamlConfig';
//# sourceMappingURL=tenantInboundSamlConfig.js.map