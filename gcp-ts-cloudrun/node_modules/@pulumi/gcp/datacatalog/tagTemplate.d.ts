import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * A tag template defines a tag, which can have one or more typed fields.
 * The template is used to create and attach the tag to GCP resources.
 *
 * To get more information about TagTemplate, see:
 *
 * * [API documentation](https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/data-catalog/docs)
 *
 * ## Example Usage
 * ### Data Catalog Tag Template Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basicTagTemplate = new gcp.datacatalog.TagTemplate("basic_tag_template", {
 *     displayName: "Demo Tag Template",
 *     fields: [
 *         {
 *             displayName: "Source of data asset",
 *             fieldId: "source",
 *             isRequired: true,
 *             type: {
 *                 primitiveType: "STRING",
 *             },
 *         },
 *         {
 *             displayName: "Number of rows in the data asset",
 *             fieldId: "num_rows",
 *             type: {
 *                 primitiveType: "DOUBLE",
 *             },
 *         },
 *         {
 *             displayName: "PII type",
 *             fieldId: "pii_type",
 *             type: {
 *                 enumType: {
 *                     allowedValues: [
 *                         {
 *                             displayName: "EMAIL",
 *                         },
 *                         {
 *                             displayName: "SOCIAL SECURITY NUMBER",
 *                         },
 *                         {
 *                             displayName: "NONE",
 *                         },
 *                     ],
 *                 },
 *             },
 *         },
 *     ],
 *     forceDelete: false,
 *     region: "us-central1",
 *     tagTemplateId: "my_template",
 * });
 * ```
 *
 * ## Import
 *
 * TagTemplate can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datacatalog/tagTemplate:TagTemplate default {{name}}
 * ```
 */
export declare class TagTemplate extends pulumi.CustomResource {
    /**
     * Get an existing TagTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TagTemplateState, opts?: pulumi.CustomResourceOptions): TagTemplate;
    /**
     * Returns true if the given object is an instance of TagTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TagTemplate;
    /**
     * The display name for this template.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
     * Structure is documented below.
     */
    readonly fields: pulumi.Output<outputs.datacatalog.TagTemplateField[]>;
    /**
     * This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     */
    readonly forceDelete: pulumi.Output<boolean | undefined>;
    /**
     * -
     * The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Template location region.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The id of the tag template to create.
     */
    readonly tagTemplateId: pulumi.Output<string>;
    /**
     * Create a TagTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TagTemplateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering TagTemplate resources.
 */
export interface TagTemplateState {
    /**
     * The display name for this template.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
     * Structure is documented below.
     */
    readonly fields?: pulumi.Input<pulumi.Input<inputs.datacatalog.TagTemplateField>[]>;
    /**
     * This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     */
    readonly forceDelete?: pulumi.Input<boolean>;
    /**
     * -
     * The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Template location region.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * The id of the tag template to create.
     */
    readonly tagTemplateId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a TagTemplate resource.
 */
export interface TagTemplateArgs {
    /**
     * The display name for this template.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
     * Structure is documented below.
     */
    readonly fields: pulumi.Input<pulumi.Input<inputs.datacatalog.TagTemplateField>[]>;
    /**
     * This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     */
    readonly forceDelete?: pulumi.Input<boolean>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Template location region.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * The id of the tag template to create.
     */
    readonly tagTemplateId: pulumi.Input<string>;
}
