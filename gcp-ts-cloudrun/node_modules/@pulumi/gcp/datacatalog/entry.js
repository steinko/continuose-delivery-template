"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Entry Metadata. A Data Catalog Entry resource represents another resource in Google Cloud Platform
 * (such as a BigQuery dataset or a Pub/Sub topic) or outside of Google Cloud Platform. Clients can use
 * the linkedResource field in the Entry resource to refer to the original resource ID of the source system.
 *
 * An Entry resource contains resource details, such as its schema. An Entry can also be used to attach
 * flexible metadata, such as a Tag.
 *
 * To get more information about Entry, see:
 *
 * * [API documentation](https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/data-catalog/docs)
 *
 * ## Example Usage
 * ### Data Catalog Entry Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const entryGroup = new gcp.datacatalog.EntryGroup("entryGroup", {entryGroupId: "my_group"});
 * const basicEntry = new gcp.datacatalog.Entry("basicEntry", {
 *     entryGroup: entryGroup.id,
 *     entryId: "my_entry",
 *     userSpecifiedType: "my_custom_type",
 *     userSpecifiedSystem: "SomethingExternal",
 * });
 * ```
 * ### Data Catalog Entry Fileset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const entryGroup = new gcp.datacatalog.EntryGroup("entryGroup", {entryGroupId: "my_group"});
 * const basicEntry = new gcp.datacatalog.Entry("basicEntry", {
 *     entryGroup: entryGroup.id,
 *     entryId: "my_entry",
 *     type: "FILESET",
 *     gcsFilesetSpec: {
 *         filePatterns: ["gs://fake_bucket/dir/*"],
 *     },
 * });
 * ```
 * ### Data Catalog Entry Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const entryGroup = new gcp.datacatalog.EntryGroup("entryGroup", {entryGroupId: "my_group"});
 * const basicEntry = new gcp.datacatalog.Entry("basicEntry", {
 *     entryGroup: entryGroup.id,
 *     entryId: "my_entry",
 *     userSpecifiedType: "my_user_specified_type",
 *     userSpecifiedSystem: "Something_custom",
 *     linkedResource: "my/linked/resource",
 *     displayName: "my custom type entry",
 *     description: "a custom type entry for a user specified system",
 *     schema: `{
 *   "columns": [
 *     {
 *       "column": "first_name",
 *       "description": "First name",
 *       "mode": "REQUIRED",
 *       "type": "STRING"
 *     },
 *     {
 *       "column": "last_name",
 *       "description": "Last name",
 *       "mode": "REQUIRED",
 *       "type": "STRING"
 *     },
 *     {
 *       "column": "address",
 *       "description": "Address",
 *       "mode": "REPEATED",
 *       "subcolumns": [
 *         {
 *           "column": "city",
 *           "description": "City",
 *           "mode": "NULLABLE",
 *           "type": "STRING"
 *         },
 *         {
 *           "column": "state",
 *           "description": "State",
 *           "mode": "NULLABLE",
 *           "type": "STRING"
 *         }
 *       ],
 *       "type": "RECORD"
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Entry can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datacatalog/entry:Entry default {{name}}
 * ```
 */
class Entry extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["bigqueryDateShardedSpecs"] = state ? state.bigqueryDateShardedSpecs : undefined;
            inputs["bigqueryTableSpecs"] = state ? state.bigqueryTableSpecs : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["entryGroup"] = state ? state.entryGroup : undefined;
            inputs["entryId"] = state ? state.entryId : undefined;
            inputs["gcsFilesetSpec"] = state ? state.gcsFilesetSpec : undefined;
            inputs["integratedSystem"] = state ? state.integratedSystem : undefined;
            inputs["linkedResource"] = state ? state.linkedResource : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["schema"] = state ? state.schema : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userSpecifiedSystem"] = state ? state.userSpecifiedSystem : undefined;
            inputs["userSpecifiedType"] = state ? state.userSpecifiedType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.entryGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entryGroup'");
            }
            if ((!args || args.entryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entryId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["entryGroup"] = args ? args.entryGroup : undefined;
            inputs["entryId"] = args ? args.entryId : undefined;
            inputs["gcsFilesetSpec"] = args ? args.gcsFilesetSpec : undefined;
            inputs["linkedResource"] = args ? args.linkedResource : undefined;
            inputs["schema"] = args ? args.schema : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["userSpecifiedSystem"] = args ? args.userSpecifiedSystem : undefined;
            inputs["userSpecifiedType"] = args ? args.userSpecifiedType : undefined;
            inputs["bigqueryDateShardedSpecs"] = undefined /*out*/;
            inputs["bigqueryTableSpecs"] = undefined /*out*/;
            inputs["integratedSystem"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Entry.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Entry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Entry(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Entry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Entry.__pulumiType;
    }
}
exports.Entry = Entry;
/** @internal */
Entry.__pulumiType = 'gcp:datacatalog/entry:Entry';
//# sourceMappingURL=entry.js.map