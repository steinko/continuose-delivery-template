"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template.
 *
 * See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags.
 *
 * To get more information about Tag, see:
 *
 * * [API documentation](https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.tags)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/data-catalog/docs)
 *
 * ## Example Usage
 * ### Data Catalog Entry Tag Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const entryGroup = new gcp.datacatalog.EntryGroup("entryGroup", {entryGroupId: "my_entry_group"});
 * const entry = new gcp.datacatalog.Entry("entry", {
 *     entryGroup: entryGroup.id,
 *     entryId: "my_entry",
 *     userSpecifiedType: "my_custom_type",
 *     userSpecifiedSystem: "SomethingExternal",
 * });
 * const tagTemplate = new gcp.datacatalog.TagTemplate("tagTemplate", {
 *     tagTemplateId: "my_template",
 *     region: "us-central1",
 *     displayName: "Demo Tag Template",
 *     fields: [
 *         {
 *             fieldId: "source",
 *             displayName: "Source of data asset",
 *             type: {
 *                 primitiveType: "STRING",
 *             },
 *             isRequired: true,
 *         },
 *         {
 *             fieldId: "num_rows",
 *             displayName: "Number of rows in the data asset",
 *             type: {
 *                 primitiveType: "DOUBLE",
 *             },
 *         },
 *         {
 *             fieldId: "pii_type",
 *             displayName: "PII type",
 *             type: {
 *                 enumType: {
 *                     allowedValues: [
 *                         {
 *                             displayName: "EMAIL",
 *                         },
 *                         {
 *                             displayName: "SOCIAL SECURITY NUMBER",
 *                         },
 *                         {
 *                             displayName: "NONE",
 *                         },
 *                     ],
 *                 },
 *             },
 *         },
 *     ],
 *     forceDelete: "false",
 * });
 * const basicTag = new gcp.datacatalog.Tag("basicTag", {
 *     parent: entry.id,
 *     template: tagTemplate.id,
 *     fields: [{
 *         fieldName: "source",
 *         stringValue: "my-string",
 *     }],
 * });
 * ```
 * ### Data Catalog Entry Group Tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const entryGroup = new gcp.datacatalog.EntryGroup("entryGroup", {entryGroupId: "my_entry_group"});
 * const firstEntry = new gcp.datacatalog.Entry("firstEntry", {
 *     entryGroup: entryGroup.id,
 *     entryId: "first_entry",
 *     userSpecifiedType: "my_custom_type",
 *     userSpecifiedSystem: "SomethingExternal",
 * });
 * const secondEntry = new gcp.datacatalog.Entry("secondEntry", {
 *     entryGroup: entryGroup.id,
 *     entryId: "second_entry",
 *     userSpecifiedType: "another_custom_type",
 *     userSpecifiedSystem: "SomethingElseExternal",
 * });
 * const tagTemplate = new gcp.datacatalog.TagTemplate("tagTemplate", {
 *     tagTemplateId: "my_template",
 *     region: "us-central1",
 *     displayName: "Demo Tag Template",
 *     fields: [
 *         {
 *             fieldId: "source",
 *             displayName: "Source of data asset",
 *             type: {
 *                 primitiveType: "STRING",
 *             },
 *             isRequired: true,
 *         },
 *         {
 *             fieldId: "num_rows",
 *             displayName: "Number of rows in the data asset",
 *             type: {
 *                 primitiveType: "DOUBLE",
 *             },
 *         },
 *         {
 *             fieldId: "pii_type",
 *             displayName: "PII type",
 *             type: {
 *                 enumType: {
 *                     allowedValues: [
 *                         {
 *                             displayName: "EMAIL",
 *                         },
 *                         {
 *                             displayName: "SOCIAL SECURITY NUMBER",
 *                         },
 *                         {
 *                             displayName: "NONE",
 *                         },
 *                     ],
 *                 },
 *             },
 *         },
 *     ],
 *     forceDelete: "false",
 * });
 * const entryGroupTag = new gcp.datacatalog.Tag("entryGroupTag", {
 *     parent: entryGroup.id,
 *     template: tagTemplate.id,
 *     fields: [{
 *         fieldName: "source",
 *         stringValue: "my-string",
 *     }],
 * });
 * ```
 * ### Data Catalog Entry Tag Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const entryGroup = new gcp.datacatalog.EntryGroup("entryGroup", {entryGroupId: "my_entry_group"});
 * const entry = new gcp.datacatalog.Entry("entry", {
 *     entryGroup: entryGroup.id,
 *     entryId: "my_entry",
 *     userSpecifiedType: "my_custom_type",
 *     userSpecifiedSystem: "SomethingExternal",
 *     schema: `{
 *   "columns": [
 *     {
 *       "column": "first_name",
 *       "description": "First name",
 *       "mode": "REQUIRED",
 *       "type": "STRING"
 *     },
 *     {
 *       "column": "last_name",
 *       "description": "Last name",
 *       "mode": "REQUIRED",
 *       "type": "STRING"
 *     },
 *     {
 *       "column": "address",
 *       "description": "Address",
 *       "mode": "REPEATED",
 *       "subcolumns": [
 *         {
 *           "column": "city",
 *           "description": "City",
 *           "mode": "NULLABLE",
 *           "type": "STRING"
 *         },
 *         {
 *           "column": "state",
 *           "description": "State",
 *           "mode": "NULLABLE",
 *           "type": "STRING"
 *         }
 *       ],
 *       "type": "RECORD"
 *     }
 *   ]
 * }
 * `,
 * });
 * const tagTemplate = new gcp.datacatalog.TagTemplate("tagTemplate", {
 *     tagTemplateId: "my_template",
 *     region: "us-central1",
 *     displayName: "Demo Tag Template",
 *     fields: [
 *         {
 *             fieldId: "source",
 *             displayName: "Source of data asset",
 *             type: {
 *                 primitiveType: "STRING",
 *             },
 *             isRequired: true,
 *         },
 *         {
 *             fieldId: "num_rows",
 *             displayName: "Number of rows in the data asset",
 *             type: {
 *                 primitiveType: "DOUBLE",
 *             },
 *         },
 *         {
 *             fieldId: "pii_type",
 *             displayName: "PII type",
 *             type: {
 *                 enumType: {
 *                     allowedValues: [
 *                         {
 *                             displayName: "EMAIL",
 *                         },
 *                         {
 *                             displayName: "SOCIAL SECURITY NUMBER",
 *                         },
 *                         {
 *                             displayName: "NONE",
 *                         },
 *                     ],
 *                 },
 *             },
 *         },
 *     ],
 *     forceDelete: "false",
 * });
 * const basicTag = new gcp.datacatalog.Tag("basicTag", {
 *     parent: entry.id,
 *     template: tagTemplate.id,
 *     fields: [
 *         {
 *             fieldName: "source",
 *             stringValue: "my-string",
 *         },
 *         {
 *             fieldName: "num_rows",
 *             doubleValue: 5,
 *         },
 *         {
 *             fieldName: "pii_type",
 *             enumValue: "EMAIL",
 *         },
 *     ],
 *     column: "address",
 * });
 * const second_tag = new gcp.datacatalog.Tag("second-tag", {
 *     parent: entry.id,
 *     template: tagTemplate.id,
 *     fields: [
 *         {
 *             fieldName: "source",
 *             stringValue: "my-string",
 *         },
 *         {
 *             fieldName: "pii_type",
 *             enumValue: "NONE",
 *         },
 *     ],
 *     column: "first_name",
 * });
 * ```
 *
 * ## Import
 *
 * Tag can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datacatalog/tag:Tag default {{name}}
 * ```
 */
class Tag extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["column"] = state ? state.column : undefined;
            inputs["fields"] = state ? state.fields : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parent"] = state ? state.parent : undefined;
            inputs["template"] = state ? state.template : undefined;
            inputs["templateDisplayname"] = state ? state.templateDisplayname : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.fields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            inputs["column"] = args ? args.column : undefined;
            inputs["fields"] = args ? args.fields : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["template"] = args ? args.template : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["templateDisplayname"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Tag.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Tag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Tag(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Tag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tag.__pulumiType;
    }
}
exports.Tag = Tag;
/** @internal */
Tag.__pulumiType = 'gcp:datacatalog/tag:Tag';
//# sourceMappingURL=tag.js.map