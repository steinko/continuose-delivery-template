"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A collection of policy tags that classify data along a common axis.
 *
 * To get more information about Taxonomy, see:
 *
 * * [API documentation](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/data-catalog/docs)
 *
 * ## Example Usage
 * ### Data Catalog Taxonomy Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basicTaxonomy = new gcp.datacatalog.Taxonomy("basicTaxonomy", {
 *     region: "us",
 *     displayName: "my_display_name",
 *     description: "A collection of policy tags",
 *     activatedPolicyTypes: ["FINE_GRAINED_ACCESS_CONTROL"],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Taxonomy can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datacatalog/taxonomy:Taxonomy default {{name}}
 * ```
 */
class Taxonomy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["activatedPolicyTypes"] = state ? state.activatedPolicyTypes : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            inputs["activatedPolicyTypes"] = args ? args.activatedPolicyTypes : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Taxonomy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Taxonomy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Taxonomy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Taxonomy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Taxonomy.__pulumiType;
    }
}
exports.Taxonomy = Taxonomy;
/** @internal */
Taxonomy.__pulumiType = 'gcp:datacatalog/taxonomy:Taxonomy';
//# sourceMappingURL=taxonomy.js.map