"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Contains the data that describes an Identity Aware Proxy owned client.
 *
 * > **Note:** Only internal org clients can be created via declarative tools. External clients must be
 * manually created via the GCP console. This restriction is due to the existing APIs and not lack of support
 * in this tool.
 *
 * To get more information about Client, see:
 *
 * * [API documentation](https://cloud.google.com/iap/docs/reference/rest/v1/projects.brands.identityAwareProxyClients)
 * * How-to Guides
 *     * [Setting up IAP Client](https://cloud.google.com/iap/docs/authentication-howto)
 *
 * > **Warning:** All arguments including `secret` will be stored in the raw
 * state as plain-text. [Read more about secrets in state](https://www.pulumi.com/docs/intro/concepts/programming-model/#secrets).
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Client can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:iap/client:Client default {{brand}}/identityAwareProxyClients/{{client_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:iap/client:Client default {{brand}}/{{client_id}}
 * ```
 */
class Client extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["brand"] = state ? state.brand : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["secret"] = state ? state.secret : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.brand === undefined) && !opts.urn) {
                throw new Error("Missing required property 'brand'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            inputs["brand"] = args ? args.brand : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["clientId"] = undefined /*out*/;
            inputs["secret"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Client.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Client resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Client(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Client.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Client.__pulumiType;
    }
}
exports.Client = Client;
/** @internal */
Client.__pulumiType = 'gcp:iap/client:Client';
//# sourceMappingURL=client.js.map