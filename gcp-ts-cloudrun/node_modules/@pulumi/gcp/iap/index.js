"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./appEngineServiceIamBinding"));
__export(require("./appEngineServiceIamMember"));
__export(require("./appEngineServiceIamPolicy"));
__export(require("./appEngineVersionIamBinding"));
__export(require("./appEngineVersionIamMember"));
__export(require("./appEngineVersionIamPolicy"));
__export(require("./brand"));
__export(require("./client"));
__export(require("./getClient"));
__export(require("./tunnelIamBinding"));
__export(require("./tunnelIamMember"));
__export(require("./tunnelIamPolicy"));
__export(require("./tunnelInstanceIAMBinding"));
__export(require("./tunnelInstanceIAMMember"));
__export(require("./tunnelInstanceIAMPolicy"));
__export(require("./webBackendServiceIamBinding"));
__export(require("./webBackendServiceIamMember"));
__export(require("./webBackendServiceIamPolicy"));
__export(require("./webIamBinding"));
__export(require("./webIamMember"));
__export(require("./webIamPolicy"));
__export(require("./webTypeAppEngingIamBinding"));
__export(require("./webTypeAppEngingIamMember"));
__export(require("./webTypeAppEngingIamPolicy"));
__export(require("./webTypeComputeIamBinding"));
__export(require("./webTypeComputeIamMember"));
__export(require("./webTypeComputeIamPolicy"));
// Import resources to register:
const appEngineServiceIamBinding_1 = require("./appEngineServiceIamBinding");
const appEngineServiceIamMember_1 = require("./appEngineServiceIamMember");
const appEngineServiceIamPolicy_1 = require("./appEngineServiceIamPolicy");
const appEngineVersionIamBinding_1 = require("./appEngineVersionIamBinding");
const appEngineVersionIamMember_1 = require("./appEngineVersionIamMember");
const appEngineVersionIamPolicy_1 = require("./appEngineVersionIamPolicy");
const brand_1 = require("./brand");
const client_1 = require("./client");
const tunnelIamBinding_1 = require("./tunnelIamBinding");
const tunnelIamMember_1 = require("./tunnelIamMember");
const tunnelIamPolicy_1 = require("./tunnelIamPolicy");
const tunnelInstanceIAMBinding_1 = require("./tunnelInstanceIAMBinding");
const tunnelInstanceIAMMember_1 = require("./tunnelInstanceIAMMember");
const tunnelInstanceIAMPolicy_1 = require("./tunnelInstanceIAMPolicy");
const webBackendServiceIamBinding_1 = require("./webBackendServiceIamBinding");
const webBackendServiceIamMember_1 = require("./webBackendServiceIamMember");
const webBackendServiceIamPolicy_1 = require("./webBackendServiceIamPolicy");
const webIamBinding_1 = require("./webIamBinding");
const webIamMember_1 = require("./webIamMember");
const webIamPolicy_1 = require("./webIamPolicy");
const webTypeAppEngingIamBinding_1 = require("./webTypeAppEngingIamBinding");
const webTypeAppEngingIamMember_1 = require("./webTypeAppEngingIamMember");
const webTypeAppEngingIamPolicy_1 = require("./webTypeAppEngingIamPolicy");
const webTypeComputeIamBinding_1 = require("./webTypeComputeIamBinding");
const webTypeComputeIamMember_1 = require("./webTypeComputeIamMember");
const webTypeComputeIamPolicy_1 = require("./webTypeComputeIamPolicy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding":
                return new appEngineServiceIamBinding_1.AppEngineServiceIamBinding(name, undefined, { urn });
            case "gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember":
                return new appEngineServiceIamMember_1.AppEngineServiceIamMember(name, undefined, { urn });
            case "gcp:iap/appEngineServiceIamPolicy:AppEngineServiceIamPolicy":
                return new appEngineServiceIamPolicy_1.AppEngineServiceIamPolicy(name, undefined, { urn });
            case "gcp:iap/appEngineVersionIamBinding:AppEngineVersionIamBinding":
                return new appEngineVersionIamBinding_1.AppEngineVersionIamBinding(name, undefined, { urn });
            case "gcp:iap/appEngineVersionIamMember:AppEngineVersionIamMember":
                return new appEngineVersionIamMember_1.AppEngineVersionIamMember(name, undefined, { urn });
            case "gcp:iap/appEngineVersionIamPolicy:AppEngineVersionIamPolicy":
                return new appEngineVersionIamPolicy_1.AppEngineVersionIamPolicy(name, undefined, { urn });
            case "gcp:iap/brand:Brand":
                return new brand_1.Brand(name, undefined, { urn });
            case "gcp:iap/client:Client":
                return new client_1.Client(name, undefined, { urn });
            case "gcp:iap/tunnelIamBinding:TunnelIamBinding":
                return new tunnelIamBinding_1.TunnelIamBinding(name, undefined, { urn });
            case "gcp:iap/tunnelIamMember:TunnelIamMember":
                return new tunnelIamMember_1.TunnelIamMember(name, undefined, { urn });
            case "gcp:iap/tunnelIamPolicy:TunnelIamPolicy":
                return new tunnelIamPolicy_1.TunnelIamPolicy(name, undefined, { urn });
            case "gcp:iap/tunnelInstanceIAMBinding:TunnelInstanceIAMBinding":
                return new tunnelInstanceIAMBinding_1.TunnelInstanceIAMBinding(name, undefined, { urn });
            case "gcp:iap/tunnelInstanceIAMMember:TunnelInstanceIAMMember":
                return new tunnelInstanceIAMMember_1.TunnelInstanceIAMMember(name, undefined, { urn });
            case "gcp:iap/tunnelInstanceIAMPolicy:TunnelInstanceIAMPolicy":
                return new tunnelInstanceIAMPolicy_1.TunnelInstanceIAMPolicy(name, undefined, { urn });
            case "gcp:iap/webBackendServiceIamBinding:WebBackendServiceIamBinding":
                return new webBackendServiceIamBinding_1.WebBackendServiceIamBinding(name, undefined, { urn });
            case "gcp:iap/webBackendServiceIamMember:WebBackendServiceIamMember":
                return new webBackendServiceIamMember_1.WebBackendServiceIamMember(name, undefined, { urn });
            case "gcp:iap/webBackendServiceIamPolicy:WebBackendServiceIamPolicy":
                return new webBackendServiceIamPolicy_1.WebBackendServiceIamPolicy(name, undefined, { urn });
            case "gcp:iap/webIamBinding:WebIamBinding":
                return new webIamBinding_1.WebIamBinding(name, undefined, { urn });
            case "gcp:iap/webIamMember:WebIamMember":
                return new webIamMember_1.WebIamMember(name, undefined, { urn });
            case "gcp:iap/webIamPolicy:WebIamPolicy":
                return new webIamPolicy_1.WebIamPolicy(name, undefined, { urn });
            case "gcp:iap/webTypeAppEngingIamBinding:WebTypeAppEngingIamBinding":
                return new webTypeAppEngingIamBinding_1.WebTypeAppEngingIamBinding(name, undefined, { urn });
            case "gcp:iap/webTypeAppEngingIamMember:WebTypeAppEngingIamMember":
                return new webTypeAppEngingIamMember_1.WebTypeAppEngingIamMember(name, undefined, { urn });
            case "gcp:iap/webTypeAppEngingIamPolicy:WebTypeAppEngingIamPolicy":
                return new webTypeAppEngingIamPolicy_1.WebTypeAppEngingIamPolicy(name, undefined, { urn });
            case "gcp:iap/webTypeComputeIamBinding:WebTypeComputeIamBinding":
                return new webTypeComputeIamBinding_1.WebTypeComputeIamBinding(name, undefined, { urn });
            case "gcp:iap/webTypeComputeIamMember:WebTypeComputeIamMember":
                return new webTypeComputeIamMember_1.WebTypeComputeIamMember(name, undefined, { urn });
            case "gcp:iap/webTypeComputeIamPolicy:WebTypeComputeIamPolicy":
                return new webTypeComputeIamPolicy_1.WebTypeComputeIamPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineServiceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineServiceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineServiceIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineVersionIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineVersionIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/appEngineVersionIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/brand", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/client", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelInstanceIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelInstanceIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/tunnelInstanceIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webBackendServiceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webBackendServiceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webBackendServiceIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeAppEngingIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeAppEngingIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeAppEngingIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeComputeIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeComputeIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "iap/webTypeComputeIamPolicy", _module);
//# sourceMappingURL=index.js.map