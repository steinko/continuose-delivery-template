"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Google Cloud Redis instance.
 *
 * To get more information about Instance, see:
 *
 * * [API documentation](https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/memorystore/docs/redis/)
 *
 * ## Example Usage
 * ### Redis Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cache = new gcp.redis.Instance("cache", {
 *     memorySizeGb: 1,
 * });
 * ```
 * ### Redis Instance Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const redis-network = gcp.compute.getNetwork({
 *     name: "redis-test-network",
 * });
 * const cache = new gcp.redis.Instance("cache", {
 *     tier: "STANDARD_HA",
 *     memorySizeGb: 1,
 *     locationId: "us-central1-a",
 *     alternativeLocationId: "us-central1-f",
 *     authorizedNetwork: redis_network.then(redis_network => redis_network.id),
 *     redisVersion: "REDIS_4_0",
 *     displayName: "Test Instance",
 *     reservedIpRange: "192.168.0.0/29",
 *     labels: {
 *         my_key: "my_val",
 *         other_key: "other_val",
 *     },
 * });
 * ```
 * ### Redis Instance Private Service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const redis-network = gcp.compute.getNetwork({
 *     name: "redis-test-network",
 * });
 * const serviceRange = new gcp.compute.GlobalAddress("serviceRange", {
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: redis_network.then(redis_network => redis_network.id),
 * });
 * const privateServiceConnection = new gcp.servicenetworking.Connection("privateServiceConnection", {
 *     network: redis_network.then(redis_network => redis_network.id),
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [serviceRange.name],
 * });
 * const cache = new gcp.redis.Instance("cache", {
 *     tier: "STANDARD_HA",
 *     memorySizeGb: 1,
 *     locationId: "us-central1-a",
 *     alternativeLocationId: "us-central1-f",
 *     authorizedNetwork: redis_network.then(redis_network => redis_network.id),
 *     connectMode: "PRIVATE_SERVICE_ACCESS",
 *     redisVersion: "REDIS_4_0",
 *     displayName: "Test Instance",
 * }, {
 *     dependsOn: [privateServiceConnection],
 * });
 * ```
 *
 * ## Import
 *
 * Instance can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default {{name}}
 * ```
 */
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["alternativeLocationId"] = state ? state.alternativeLocationId : undefined;
            inputs["authEnabled"] = state ? state.authEnabled : undefined;
            inputs["authString"] = state ? state.authString : undefined;
            inputs["authorizedNetwork"] = state ? state.authorizedNetwork : undefined;
            inputs["connectMode"] = state ? state.connectMode : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["currentLocationId"] = state ? state.currentLocationId : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["host"] = state ? state.host : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["locationId"] = state ? state.locationId : undefined;
            inputs["memorySizeGb"] = state ? state.memorySizeGb : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["persistenceIamIdentity"] = state ? state.persistenceIamIdentity : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["redisConfigs"] = state ? state.redisConfigs : undefined;
            inputs["redisVersion"] = state ? state.redisVersion : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["reservedIpRange"] = state ? state.reservedIpRange : undefined;
            inputs["serverCaCerts"] = state ? state.serverCaCerts : undefined;
            inputs["tier"] = state ? state.tier : undefined;
            inputs["transitEncryptionMode"] = state ? state.transitEncryptionMode : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.memorySizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memorySizeGb'");
            }
            inputs["alternativeLocationId"] = args ? args.alternativeLocationId : undefined;
            inputs["authEnabled"] = args ? args.authEnabled : undefined;
            inputs["authorizedNetwork"] = args ? args.authorizedNetwork : undefined;
            inputs["connectMode"] = args ? args.connectMode : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["locationId"] = args ? args.locationId : undefined;
            inputs["memorySizeGb"] = args ? args.memorySizeGb : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["redisConfigs"] = args ? args.redisConfigs : undefined;
            inputs["redisVersion"] = args ? args.redisVersion : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["reservedIpRange"] = args ? args.reservedIpRange : undefined;
            inputs["tier"] = args ? args.tier : undefined;
            inputs["transitEncryptionMode"] = args ? args.transitEncryptionMode : undefined;
            inputs["authString"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["currentLocationId"] = undefined /*out*/;
            inputs["host"] = undefined /*out*/;
            inputs["persistenceIamIdentity"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["serverCaCerts"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'gcp:redis/instance:Instance';
//# sourceMappingURL=instance.js.map