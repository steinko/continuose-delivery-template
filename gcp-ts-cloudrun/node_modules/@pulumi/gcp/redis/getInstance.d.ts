import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../types";
/**
 * Get info about a Google Cloud Redis instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myInstance = gcp.redis.getInstance({
 *     name: "my-redis-instance",
 * });
 * export const instanceMemorySizeGb = myInstance.then(myInstance => myInstance.memorySizeGb);
 * export const instanceConnectMode = myInstance.then(myInstance => myInstance.connectMode);
 * export const instanceAuthorizedNetwork = myInstance.then(myInstance => myInstance.authorizedNetwork);
 * ```
 */
export declare function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult>;
/**
 * A collection of arguments for invoking getInstance.
 */
export interface GetInstanceArgs {
    /**
     * The name of a Redis instance.
     */
    readonly name: string;
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     */
    readonly project?: string;
    /**
     * The region in which the resource belongs. If it
     * is not provided, the provider region is used.
     */
    readonly region?: string;
}
/**
 * A collection of values returned by getInstance.
 */
export interface GetInstanceResult {
    readonly alternativeLocationId: string;
    readonly authEnabled: boolean;
    readonly authString: string;
    readonly authorizedNetwork: string;
    readonly connectMode: string;
    readonly createTime: string;
    readonly currentLocationId: string;
    readonly displayName: string;
    readonly host: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: {
        [key: string]: string;
    };
    readonly locationId: string;
    readonly memorySizeGb: number;
    readonly name: string;
    readonly persistenceIamIdentity: string;
    readonly port: number;
    readonly project?: string;
    readonly redisConfigs: {
        [key: string]: string;
    };
    readonly redisVersion: string;
    readonly region?: string;
    readonly reservedIpRange: string;
    readonly serverCaCerts: outputs.redis.GetInstanceServerCaCert[];
    readonly tier: string;
    readonly transitEncryptionMode: string;
}
