import * as pulumi from "@pulumi/pulumi";
export declare function getKMSSecretAsymmetric(args: GetKMSSecretAsymmetricArgs, opts?: pulumi.InvokeOptions): Promise<GetKMSSecretAsymmetricResult>;
/**
 * A collection of arguments for invoking getKMSSecretAsymmetric.
 */
export interface GetKMSSecretAsymmetricArgs {
    /**
     * The ciphertext to be decrypted, encoded in base64
     */
    readonly ciphertext: string;
    /**
     * The crc32 checksum of the `ciphertext` in hexadecimal notation. If not specified, it will be computed.
     */
    readonly crc32?: string;
    /**
     * The id of the CryptoKey version that will be used to
     * decrypt the provided ciphertext. This is represented by the format
     * `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
     */
    readonly cryptoKeyVersion: string;
}
/**
 * A collection of values returned by getKMSSecretAsymmetric.
 */
export interface GetKMSSecretAsymmetricResult {
    readonly ciphertext: string;
    /**
     * Contains the crc32 checksum of the provided ciphertext.
     */
    readonly crc32?: string;
    readonly cryptoKeyVersion: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Contains the result of decrypting the provided ciphertext.
     */
    readonly plaintext: string;
}
