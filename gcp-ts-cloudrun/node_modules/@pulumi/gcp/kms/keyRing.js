"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A `KeyRing` is a toplevel logical grouping of `CryptoKeys`.
 *
 * > **Note:** KeyRings cannot be deleted from Google Cloud Platform.
 * Destroying a provider-managed KeyRing will remove it from state but
 * *will not delete the resource from the project.*
 *
 * To get more information about KeyRing, see:
 *
 * * [API documentation](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings)
 * * How-to Guides
 *     * [Creating a key ring](https://cloud.google.com/kms/docs/creating-keys#create_a_key_ring)
 *
 * ## Example Usage
 * ### Kms Key Ring Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example_keyring = new gcp.kms.KeyRing("example-keyring", {
 *     location: "global",
 * });
 * ```
 *
 * ## Import
 *
 * KeyRing can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:kms/keyRing:KeyRing default projects/{{project}}/locations/{{location}}/keyRings/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:kms/keyRing:KeyRing default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:kms/keyRing:KeyRing default {{location}}/{{name}}
 * ```
 */
class KeyRing extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["selfLink"] = state ? state.selfLink : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["selfLink"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(KeyRing.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing KeyRing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KeyRing(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KeyRing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyRing.__pulumiType;
    }
}
exports.KeyRing = KeyRing;
/** @internal */
KeyRing.__pulumiType = 'gcp:kms/keyRing:KeyRing';
//# sourceMappingURL=keyRing.js.map