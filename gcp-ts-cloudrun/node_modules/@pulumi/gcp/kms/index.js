"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./cryptoKey"));
__export(require("./cryptoKeyIAMBinding"));
__export(require("./cryptoKeyIAMMember"));
__export(require("./cryptoKeyIAMPolicy"));
__export(require("./getKMSCryptoKey"));
__export(require("./getKMSCryptoKeyVersion"));
__export(require("./getKMSKeyRing"));
__export(require("./getKMSSecret"));
__export(require("./getKMSSecretAsymmetric"));
__export(require("./getKMSSecretCiphertext"));
__export(require("./keyRing"));
__export(require("./keyRingIAMBinding"));
__export(require("./keyRingIAMMember"));
__export(require("./keyRingIAMPolicy"));
__export(require("./keyRingImportJob"));
__export(require("./registry"));
__export(require("./secretCiphertext"));
// Import resources to register:
const cryptoKey_1 = require("./cryptoKey");
const cryptoKeyIAMBinding_1 = require("./cryptoKeyIAMBinding");
const cryptoKeyIAMMember_1 = require("./cryptoKeyIAMMember");
const cryptoKeyIAMPolicy_1 = require("./cryptoKeyIAMPolicy");
const keyRing_1 = require("./keyRing");
const keyRingIAMBinding_1 = require("./keyRingIAMBinding");
const keyRingIAMMember_1 = require("./keyRingIAMMember");
const keyRingIAMPolicy_1 = require("./keyRingIAMPolicy");
const keyRingImportJob_1 = require("./keyRingImportJob");
const registry_1 = require("./registry");
const secretCiphertext_1 = require("./secretCiphertext");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:kms/cryptoKey:CryptoKey":
                return new cryptoKey_1.CryptoKey(name, undefined, { urn });
            case "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding":
                return new cryptoKeyIAMBinding_1.CryptoKeyIAMBinding(name, undefined, { urn });
            case "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember":
                return new cryptoKeyIAMMember_1.CryptoKeyIAMMember(name, undefined, { urn });
            case "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy":
                return new cryptoKeyIAMPolicy_1.CryptoKeyIAMPolicy(name, undefined, { urn });
            case "gcp:kms/keyRing:KeyRing":
                return new keyRing_1.KeyRing(name, undefined, { urn });
            case "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding":
                return new keyRingIAMBinding_1.KeyRingIAMBinding(name, undefined, { urn });
            case "gcp:kms/keyRingIAMMember:KeyRingIAMMember":
                return new keyRingIAMMember_1.KeyRingIAMMember(name, undefined, { urn });
            case "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy":
                return new keyRingIAMPolicy_1.KeyRingIAMPolicy(name, undefined, { urn });
            case "gcp:kms/keyRingImportJob:KeyRingImportJob":
                return new keyRingImportJob_1.KeyRingImportJob(name, undefined, { urn });
            case "gcp:kms/registry:Registry":
                return new registry_1.Registry(name, undefined, { urn });
            case "gcp:kms/secretCiphertext:SecretCiphertext":
                return new secretCiphertext_1.SecretCiphertext(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKey", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRing", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingImportJob", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/registry", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/secretCiphertext", _module);
//# sourceMappingURL=index.js.map