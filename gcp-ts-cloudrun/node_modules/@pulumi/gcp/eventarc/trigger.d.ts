import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * subcategory: "Eventarc"
 * layout: "google"
 * page_title: "Google: gcp.eventarc.Trigger"
 * sidebar_current: "docs-google-eventarc-trigger"
 * description: |-
 *   An event trigger sends messages to the event receiver service deployed on Cloud Run.
 * ---
 *
 * An event trigger sends messages to the event receiver service deployed on Cloud Run.
 *
 * * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.triggers)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     metadata: {
 *         namespace: "my-project",
 *     },
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "gcr.io/cloudrun/hello",
 *                 args: ["arrgs"],
 *             }],
 *             containerConcurrency: 50,
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * const trigger = new gcp.eventarc.Trigger("trigger", {
 *     location: "us-central1",
 *     matchingCriterias: [{
 *         attribute: "type",
 *         value: "google.cloud.pubsub.topic.v1.messagePublished",
 *     }],
 *     destination: {
 *         cloudRunService: {
 *             service: _default.name,
 *             region: "us-central1",
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Trigger can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:eventarc/trigger:Trigger default projects/{{project}}/locations/{{location}}/triggers/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:eventarc/trigger:Trigger default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:eventarc/trigger:Trigger default {{location}}/{{name}}
 * ```
 */
export declare class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerState, opts?: pulumi.CustomResourceOptions): Trigger;
    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Trigger;
    readonly createTime: pulumi.Output<string>;
    /**
     * Required. Destination specifies where the events should be sent to.
     */
    readonly destination: pulumi.Output<outputs.eventarc.TriggerDestination>;
    readonly etag: pulumi.Output<string>;
    /**
     * Optional. User labels attached to the triggers that can be used to group resources.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The location for the resource
     */
    readonly location: pulumi.Output<string>;
    /**
     * Required. The criteria by which events are filtered. Only events that match with this criteria will be sent to the destination.
     */
    readonly matchingCriterias: pulumi.Output<outputs.eventarc.TriggerMatchingCriteria[]>;
    /**
     * Required. The resource name of the trigger. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    readonly project: pulumi.Output<string>;
    /**
     * Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa\\\_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
     */
    readonly serviceAccount: pulumi.Output<string | undefined>;
    /**
     * Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
     */
    readonly transports: pulumi.Output<outputs.eventarc.TriggerTransport[]>;
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Trigger resources.
 */
export interface TriggerState {
    readonly createTime?: pulumi.Input<string>;
    /**
     * Required. Destination specifies where the events should be sent to.
     */
    readonly destination?: pulumi.Input<inputs.eventarc.TriggerDestination>;
    readonly etag?: pulumi.Input<string>;
    /**
     * Optional. User labels attached to the triggers that can be used to group resources.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The location for the resource
     */
    readonly location?: pulumi.Input<string>;
    /**
     * Required. The criteria by which events are filtered. Only events that match with this criteria will be sent to the destination.
     */
    readonly matchingCriterias?: pulumi.Input<pulumi.Input<inputs.eventarc.TriggerMatchingCriteria>[]>;
    /**
     * Required. The resource name of the trigger. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa\\\_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
     */
    readonly serviceAccount?: pulumi.Input<string>;
    /**
     * Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
     */
    readonly transports?: pulumi.Input<pulumi.Input<inputs.eventarc.TriggerTransport>[]>;
    readonly updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Trigger resource.
 */
export interface TriggerArgs {
    /**
     * Required. Destination specifies where the events should be sent to.
     */
    readonly destination: pulumi.Input<inputs.eventarc.TriggerDestination>;
    /**
     * Optional. User labels attached to the triggers that can be used to group resources.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The location for the resource
     */
    readonly location: pulumi.Input<string>;
    /**
     * Required. The criteria by which events are filtered. Only events that match with this criteria will be sent to the destination.
     */
    readonly matchingCriterias: pulumi.Input<pulumi.Input<inputs.eventarc.TriggerMatchingCriteria>[]>;
    /**
     * Required. The resource name of the trigger. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    readonly project?: pulumi.Input<string>;
    /**
     * Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa\\\_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
     */
    readonly serviceAccount?: pulumi.Input<string>;
    /**
     * Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
     */
    readonly transports?: pulumi.Input<pulumi.Input<inputs.eventarc.TriggerTransport>[]>;
}
