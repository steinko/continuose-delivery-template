"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows creation of custom info types.
 *
 * To get more information about StoredInfoType, see:
 *
 * * [API documentation](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.storedInfoTypes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dlp/docs/creating-stored-infotypes)
 *
 * ## Example Usage
 * ### Dlp Stored Info Type Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.dataloss.PreventionStoredInfoType("basic", {
 *     description: "Description",
 *     displayName: "Displayname",
 *     parent: "projects/my-project-name",
 *     regex: {
 *         groupIndexes: [2],
 *         pattern: "patient",
 *     },
 * });
 * ```
 * ### Dlp Stored Info Type Dictionary
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dictionary = new gcp.dataloss.PreventionStoredInfoType("dictionary", {
 *     description: "Description",
 *     dictionary: {
 *         wordList: {
 *             words: [
 *                 "word",
 *                 "word2",
 *             ],
 *         },
 *     },
 *     displayName: "Displayname",
 *     parent: "projects/my-project-name",
 * });
 * ```
 * ### Dlp Stored Info Type Large Custom Dictionary
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bucket = new gcp.storage.Bucket("bucket", {forceDestroy: true});
 * const object = new gcp.storage.BucketObject("object", {
 *     bucket: bucket.name,
 *     source: new pulumi.asset.FileAsset("./test-fixtures/dlp/words.txt"),
 * });
 * const large = new gcp.dataloss.PreventionStoredInfoType("large", {
 *     parent: "projects/my-project-name",
 *     description: "Description",
 *     displayName: "Displayname",
 *     largeCustomDictionary: {
 *         cloudStorageFileSet: {
 *             url: pulumi.interpolate`gs://${bucket.name}/${object.name}`,
 *         },
 *         outputPath: {
 *             path: pulumi.interpolate`gs://${bucket.name}/output/dictionary.txt`,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * StoredInfoType can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dataloss/preventionStoredInfoType:PreventionStoredInfoType default {{parent}}/storedInfoTypes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataloss/preventionStoredInfoType:PreventionStoredInfoType default {{parent}}/{{name}}
 * ```
 */
class PreventionStoredInfoType extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["dictionary"] = state ? state.dictionary : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["largeCustomDictionary"] = state ? state.largeCustomDictionary : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parent"] = state ? state.parent : undefined;
            inputs["regex"] = state ? state.regex : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["dictionary"] = args ? args.dictionary : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["largeCustomDictionary"] = args ? args.largeCustomDictionary : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["regex"] = args ? args.regex : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(PreventionStoredInfoType.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing PreventionStoredInfoType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PreventionStoredInfoType(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PreventionStoredInfoType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PreventionStoredInfoType.__pulumiType;
    }
}
exports.PreventionStoredInfoType = PreventionStoredInfoType;
/** @internal */
PreventionStoredInfoType.__pulumiType = 'gcp:dataloss/preventionStoredInfoType:PreventionStoredInfoType';
//# sourceMappingURL=preventionStoredInfoType.js.map