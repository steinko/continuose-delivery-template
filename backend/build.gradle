plugins {    
    id 'org.springframework.boot' version '2.4.5'
    id 'java'
    id 'checkstyle'
    id 'jacoco' 
    id "org.sonarqube" version "3.2.0"
}

repositories {
    mavenCentral()
}

sourceSets {
	intTest {
	    compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
	}
	
}

configurations {
	intTestImplementation.extendsFrom implementation
	intTestRuntimeOnly.extendsFrom runtimeOnly
	
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security:2.4.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.4.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.4.5'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    
	testImplementation('org.springframework.boot:spring-boot-starter-test:2.4.5') 
	testImplementation 'io.rest-assured:spring-mock-mvc:4.3.0'
	testImplementation  'io.rest-assured:rest-assured-common:4.3.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    
    intTestImplementation('org.springframework.boot:spring-boot-starter-test:2.4.5') 
	intTestImplementation 'io.rest-assured:spring-mock-mvc:4.3.0'
	intTestImplementation  'io.rest-assured:rest-assured-common:4.3.1'
	intTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    intTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test 
     reports {
        xml.enabled true
     }
}

test {
	useJUnitPlatform()
}

tasks.withType(Checkstyle) {
 reports {
      xml.enabled false
        html.enabled true
  }
}

task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}


project.tasks["sonarqube"].dependsOn "jacocoTestReport"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io/"
        property "sonar.sources", "src/main/java"
        property "sonar.login","730e95d52b7508b871eed7bcc07299b806b9ba83"
        property "sonar.organization" , "steinko-github"
        property "sonar.projectKey", "gradle-ci-cd"
    }
  } 
  
  tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest