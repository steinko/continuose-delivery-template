default:
  image: openjdk:15
variables:
  BACKEND_URL: ""  
 
stages:
  - continuose-intgeration
  - build-image
  - test-infrastructure-provision
  - test-deployment-test
  - test-acceptance-test
  - test-infrastructure-destruction
  - production-infrastructure-provision
  - production-deployment-test
  - production-acceptance-test
  - production-infrastructure-destruction

 
backend-integration-test:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle check
    - cd ..

backend-generate-code-coverage:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle jacocoTestReport
    - cd ..

backend-generate-java-doc:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle javadoc
    - cd ..

backend-check-code-quality:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle sonarqube
    - cd ..

frontend-integration-test:
  stage: continuose-intgeration
  image: node
  before_script:
    - cd frontend
  script:
    - npm install
    - npm run test -- --coverage --watchAll=false
    - cd ..

frontend-lint:
  stage: continuose-intgeration
  image: node
  before_script:
    - cd frontend
  script:
    - npm install
    - npm run lint
    - cd ..

backend-assemble-artefact:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle assemble
    - cd ..
  artifacts:
    paths:
      - backend/build/libs/backend.jar 

build-backend-image:
    stage: build-image
    image: docker:dind
    services:
      - docker:dind
    script:
     - cd backend
     - docker login -u steinko --password "$DOCKER_PASSWORD"  
     - docker build  -t steinko/helloworld-backend .
     - docker push steinko/helloworld-backend
     - cd ..

build-frontend-image:
    stage: build-image
    image: docker:dind
    services:
      - docker:dind
    script:
     - cd frontend
     - docker login -u steinko --password "$DOCKER_PASSWORD"  
     - docker build  -t steinko/helloworld-frontend .
     - docker push steinko/helloworld-frontend
     - cd ..


provide-infrastructure-test:
   image: pulumi/pulumi-nodejs
   
   stage: test-infrastructure-provision
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select dev
    - pulumi up -y
    - export BACKEND_URL= http://$(pulumi stack output url)/helloworld
    - cd ..
   environment:
    name: test


test-functional-acceptance-test:
  image: gradle
  stage: test-acceptance-test
  
  script:
    - cd acceptanceTest
    - gradle cucumber
    - cd ..



destroy-test-infrastructure:
   image: pulumi/pulumi-nodejs
   stage: test-infrastructure-destruction
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select test
    - pulumi destroy -y
    - cd ..

provide-infrastructure-production:
   image: pulumi/pulumi-nodejs
   stage: production-infrastructure-provision
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select production
    - pulumi up -y
    - export BACKEND_URL= http://$(pulumi stack output url)/helloworld
    - cd ..
   environment:
    name: production


production-functional-acceptance-test:
  image: gradle
  stage: production-acceptance-test
  
  script:
    - cd acceptanceTest
    - gradle cucumber
    - cd ..


destroy-infrastructure-production:
   image: pulumi/pulumi-nodejs
   stage: production-infrastructure-destruction
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select production
    - pulumi destroy -y
    - cd ..