default:
  image: openjdk:15
 
stages:
  - integration-test
  - build-image
  - provide-infrastructure
  - deployment-test
  - acceptance-test
  - destroy-infrastructure

backend-integration-test:
  stage: integration-test
  script:
    - ./gradlew chec

backend- static-security-integration-test:
  stage: integration-test
  image: docker
  script:
    - docker run -it -e "SNYK_TOKEN=f57069f4-5360-4d3a-9d49-27f86c695d48" snyk/snyk-cli:gradle-5.4 test 


frontend-static-security-integration-test:
  stage: integration-test
  image: ubuntu
  before_script:
    - cd frontend
    - chmod +x ./scripts/*.sh
    - ./scripts/npm-install.sh
  script:
    - npm install
    - npm run auth 
    - npm run snyk 
    

backend-generate-code-coverage:
  stage: integration-test
  script:
    - ./gradlew jacocoTestReport

backend-generate-java-doc:
  stage: integration-test
  script:
    - ./gradlew javadoc

backend-check-code-quality:
  stage: integration-test
  script:
    - ./gradlew sonarqube

frontend-integration-test:
  stage: integration-test
  image: ubuntu
  before_script:
    - cd frontend
    - chmod +x ./scripts/*.sh
    - ./scripts/npm-install.sh
  script:
    - npm install
    - npm run test -- --coverage --watchAll=false
    - cd ..

frontend-lint:
  stage: integration-test
  image: ubuntu
  before_script:
    - cd frontend
    - chmod +x ./scripts/*.sh
    - ./scripts/npm-install.sh
  script:
    - npm install
    - npm run lint
    - cd ..

backend-assemble-artefact:
  stage: integration-test
  script:
    - ./gradlew assemble
  artifacts:
    paths:
      - ./app/build/libs/app.jar 


backend-build-image:
   image: ubuntu
   stage: build-image
   script:
     - apt update -y
     - apt upgrade -y
     - apt install apt-transport-https  ca-certificates curl gnupg lsb-release -y
     - apt install curl -y
     - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
     - echo  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |  tee /etc/apt/sources.list.d/docker.list > /dev/null
     - apt update -y
     - export tzdata=Europe/OSLO
     - export DEBIAN_FRONTEND=noninteractive
     - ln -snf /usr/share/zoneinfo/$tzdata /etc/localtime && echo $tzdata > /etc/timezone
     - apt update -y
     - apt install docker-ce docker-ce-cli containerd.io -y tzdata
     - apt update -y
     - service docker start
     - service docker restart
     - service docker status
     - docker run hello-world
     - export DOCKER_CLI_EXPERIMENTAL=enabled
     - docker buildx install
     - docker run --privileged --rm tonistiigi/binfmt --install all 
     - docker context create node-amd64  --from default
     - docker context create node-arm64  --from default
     - docker buildx create --use --name mybuild node-amd64 
     - docker buildx create --append --name mybuild node-arm64
     - docker login -u steinko -p $DOCKER_PASSWORD
     - docker buildx build --platform linux/amd64 --push -t steinko/helloworld-backend .
   
frontend-build-image:
   image: ubuntu
   stage: build-image
   script:
     - apt update -y
     - apt upgrade -y
     - apt install apt-transport-https  ca-certificates curl gnupg lsb-release -y
     - apt install curl -y
     - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
     - echo  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |  tee /etc/apt/sources.list.d/docker.list > /dev/null
     - apt update -y
     - export tzdata=Europe/OSLO
     - export DEBIAN_FRONTEND=noninteractive
     - ln -snf /usr/share/zoneinfo/$tzdata /etc/localtime && echo $tzdata > /etc/timezone
     - apt update -y
     - apt install docker-ce docker-ce-cli containerd.io -y tzdata
     - apt update -y
     - service docker start
     - service docker restart
     - service docker status
     - cd frontend
     - docker run hello-world
     - export DOCKER_CLI_EXPERIMENTAL=enabled
     - docker buildx install
     - docker run --privileged --rm tonistiigi/binfmt --install all 
     - docker context create node-amd64  --from default
     - docker context create node-arm64  --from default
     - docker buildx create --use --name mybuild node-amd64 
     - docker buildx create --append --name mybuild node-arm64
     - docker login -u steinko -p $DOCKER_PASSWORD
     - docker buildx build --platform linux/amd64 --push -t steinko/helloworld-frontend .
   


provide-infrastructure:
   image: pulumi/pulumi-nodejs
   
   stage: provide-infrastructure
   script:
    - cd deploymentaws
    - npm install
    - pulumi up

deployment-test:
  stage: deployment-test
  image: golang:latest
  before_script:
    - cd infIntTest
    - export PATH=$PATH:$(dirname $(go list -f '{{.Target}}' .))
    - go get github.com/cucumber/godog/cmd/godog@v0.11.0
    - export PATH=$PATH:$(dirname $(go list -f '{{.Target}}' .))
  script:
    - godog
    - cd ..

   

acceptance-test:
  image: gradle
  stage: acceptance-test
  
  script:
    - cd ./acceptanceTest
    - gradle cucumber
    - cd ..

destroy-infrastructure:
   image: ubuntu
   stage: destroy-infrastructure
   before_script:
    - chmod +x ./infAsCode/scripts/*.sh
    - ./infAsCode/scripts/setup.sh

   script:
    - ./infAsCode/scripts/destroy-pulumi.sh
  
 
