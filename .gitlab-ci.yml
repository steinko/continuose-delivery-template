default:
  image: openjdk:15

 
stages:
  - continuose-intgeration
  - build-image
  - test-infrastructure-provision
  - test-deployment-test
  - test-acceptance-test
  - test-infrastructure-destruction
  - production-infrastructure-provision
  - production-deployment-test
  - production-acceptance-test
  - production-infrastructure-destruction

 
backend-integration-test:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle check
    - cd ..

backend-generate-code-coverage:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle jacocoTestReport
    - cd ..

backend-generate-java-doc:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle javadoc
    - cd ..

backend-check-code-quality:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle sonarqube
    - cd ..

frontend-integration-test:
  stage: continuose-intgeration
  image: node
  before_script:
    - cd frontend
  script:
    - npm install
    - npm run test -- --coverage --watchAll=false
    - cd ..

frontend-lint:
  stage: continuose-intgeration
  image: node
  before_script:
    - cd frontend
  script:
    - npm install
    - npm run lint
    - cd ..

backend-assemble-artefact:
  stage: continuose-intgeration
  image: gradle:alpine
  script:
    - cd backend
    - gradle assemble
    - cd ..
  artifacts:
    paths:
      - backend/build/libs/backend.jar 

build-backend-image:
    stage: build-image
    image: docker:dind
    services:
      - docker:dind
    script:
     - cd backend
     - docker login -u steinko --password "$DOCKER_PASSWORD"  
     - docker build  -t steinko/helloworld-backend .
     - docker push steinko/helloworld-backend
     - cd ..

build-frontend-image:
    stage: build-image
    image: docker:dind
    services:
      - docker:dind
    script:
     - cd frontend
     - docker login -u steinko --password "$DOCKER_PASSWORD"  
     - docker build  -t steinko/helloworld-frontend .
     - docker push steinko/helloworld-frontend
     - cd ..


provide-infrastructure-test:
   image: pulumi/pulumi-nodejs
   stage: test-infrastructure-provision
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select dev
    - pulumi up -y
    - BACKEND_URL=http://$(pulumi stack output backendUrl)/helloworld >> test.env
    - FRONTEND_URL=http://$(pulumi stack output frontendUrl)
    - apt update && apt install -y curl jq python3 python3-pip
    - cat cypress.env.json | jq --arg FRONTEND_URL "$FRONTEND_URL" '.FRONTEND_URL = $FRONTEND_URL' > new.json
    - cat new.json
    - cp new.json ../acceptanceTest/cypress.env.json
    - cat ../acceptanceTest/cypress.env.json
    - cd ..
   environment:
     name: test
   artifacts:
     paths:
     - test.env
     - frontend/cypress.env.json


test-functional-backend-acceptance-test:
  image: gradle
  stage: test-acceptance-test
  
  script:
    - cd backendAcceptanceTest
    - export << test.env
    - echo $BACKEND_URL
    - gradle cucumber
    - cd ..
  dependencies:
    - provide-infrastructure-test

test-functional-acceptance-test:
  image: node:latest
  stage: test-acceptance-test
  script:
    - cd acceptanceTest
    - npm ci
    - npm run start:ci &
    - npm run cypress-run --spec **/*.feat
    - cd ..
  dependencies:
    - provide-infrastructure-test


destroy-test-infrastructure:
   image: pulumi/pulumi-nodejs
   stage: test-infrastructure-destruction
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select dev
    - pulumi destroy -y
    - cd ..

provide-infrastructure-production:
   image: pulumi/pulumi-nodejs
   stage: production-infrastructure-provision
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select dev
    - pulumi up -y
    - BACKEND_URL=http://$(pulumi stack output url)/helloworld >> production.env
    - cd ..
   environment:
    name: production
   artifacts:
     paths:
       - production.env



production-functional-acceptance-test:
  image: gradle
  stage: production-acceptance-test 
  script:
    - cd acceptanceTest
    - export << production.env
    - echo $BACKEND_URL
    - gradle cucumber
    - cd ..
  dependencies:
    - provide-infrastructure-production

destroy-infrastructure-production:
   image: pulumi/pulumi-nodejs
   stage: production-infrastructure-destruction
   script:
    - cd deploytofaragte
    - npm install
    - export PULUMI_ACCESS_TOKEN="$PULUMI_ACCESS_TOKEN"
    - pulumi login
    - pulumi stack select dev
    - pulumi destroy -y
    - cd ..